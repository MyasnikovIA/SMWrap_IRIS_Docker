<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Routine name="%Const" type="INC"><![CDATA[
 ; Color constants (Some duplications)  using RGB color scheme.  Three byte constant, each byte value range 0-FF.  First byte is Blue value, second is Green value third is Red value.
 ; These bytes are swapped by the $ZH function to give RGB.  The total number of available colors is 16777216. (Depending on display settings)
#define clBlack $ZH("000000")
#define clMaroon $ZH("000080")
#define clGreen $ZH("008000")
#define clLtGreen $ZH("C0FFC0")
#define clMedGreen $ZH("80FF80")
#define clOlive $ZH("008080")
#define clNavy $ZH("800000")
#define clPurple $ZH("800080")
#define clTeal $ZH("808000")
#define clGray $ZH("808080") 
#define clSilver $ZH("C0C0C0")
#define clRed $ZH("0000FF")
#define clMedRed $ZH("8080FF")
#define clLtRed $ZH("C0C0FF")
#define clOrange $ZH("0080FF")
#define clMedOrange $ZH("80C0FF")
#define clLtOrange $ZH("C0E0FF")
#define clLime $ZH("00FF00")
#define clYellow $ZH("00FFFF")
#define clMedYellow $ZH("80FFFF")
#define clLtYellow $ZH("C0FFFF")
#define clBlue $ZH("FF0000")
#define clMedBlue $ZH("FF8080")
#define clLtBlue $ZH("FFC0C0")
#define clFuchsia $ZH("FF00FF")
#define clPink $ZH("FF00FF")
#define clMedPink $ZH("FF80FF")
#define clLtPink $ZH("FFC0FF")
#define clAqua $ZH("FFFF00")
#define clMedAqua $ZH("FFFF80")
#define clLtAqua $ZH("FFC0C0")
#define clLtGray $ZH("C0C0C0")
#define clDkGray $ZH("808080")
#define clFocus $ZH("8080FF")
#define clWhite $ZH("FFFFFF")
#define clNone $ZH("1FFFFFFF")
#define clDefault $ZH("20000000")
 
#define clScrollBar -2147483648
#define clBackground -2147483647
#define clActiveCaption -2147483646
#define clInactiveCaption -2147483645
#define clMenu -2147483644
#define clWindow -2147483643
#define clWindowFrame -2147483642
#define clMenuText -2147483641
#define clWindowText -2147483640
#define clCaptionText -2147483639
#define clActiveBorder -2147483638
#define clInactiveBorder -2147483637
#define clAppWorkSpace -2147483636
#define clHighlight -2147483635
#define clHighlightText -2147483634
#define clBtnFace -2147483633
#define clBtnShadow -2147483632 
#define clGrayText -2147483631
#define clBtnText -2147483630
#define clInactiveCaptionText -2147483629
#define clBtnHighlight -2147483628
#define cl3DDkShadow -2147483627
#define cl3DLight -2147483626
#define clInfoText -2147483625
#define clInfoBk -2147483624
 
 ;CHARSETS constants
#define ANSICHARSET     0
 ;       ANSI characters. 
#define DEFAULTCHARSET  1
 ;       Font is chosen based solely on Name and Size. If the described font is not available on the system, Windows will substitute another font.
#define SYMBOLCHARSET   2       
 ;       Standard symbol set.
#define MACCHARSET      77
 ;       Macintosh characters. Not available on NT 3.51.
#define SHIFTJISCHARSET 128
 ;       Japanese shift-jis characters.
#define HANGEULCHARSET  129
 ;       Korean characters (Wansung).
#define JOHABCHARSET    130
 ;       Korean characters (Johab). Not available on NT 3.51
#define GB2312CHARSET   134
 ;       Simplified Chinese characters (mainland china).
#define CHINESEBIG5CHARSET      136
 ;       Traditional Chinese characters (taiwanese).
#define GREEKCHARSET    161
 ;       Greek characters. Not available on NT 3.51.
#define TURKISHCHARSET  162
 ;       Turkish characters. Not available on NT 3.51
#define VIETNAMESECHARSET       163
 ;       Vietnamese characters. Not available on NT 3.51.
#define HEBREWCHARSET   177
 ;       Hebrew characters. Not available on NT 3.51
#define ARABICCHARSET   178
 ;       Arabic characters. Not available on NT 3.51
#define BALTICCHARSET   186
 ;       Baltic characters. Not available on NT 3.51.
#define RUSSIANCHARSET  204
 ;       Cyrillic characters. Not available on NT 3.51.
#define THAICHARSET     222
 ;       Thai characters. Not available on NT 3.51
#define EASTEUROPECHARSET       238
 ;       Includes diacritical marks for eastern european countries. Not available on NT 3.51.
#define OEMCHARSET      255
 ;       Depends on the codepage of the operating system.
#define crDefault 0
#define crNone    -1
#define crArrow   -2
#define crCross   -3
#define crIBeam   -4
#define crSize     -22
#define crSizeNESW -6
#define crSizeNS   -7
#define crSizeNWSE -8
#define crSizeWE   -9
#define crUpArrow  -10
#define crHourGlass -11
#define crDrag     -12
#define crNoDrop   -13
#define crHSplit   -14
#define crVSplit   -15
#define crMultiDrag -16
#define crSQLWait   -17
#define crNo        -18
#define crAppStart  -19
#define crHelp      -20
#define crHandPoint -21
#define crSizeAll   -22
 
#define ETOOPAQUE         2
#define ETOCLIPPED        4
#define ETOGLYPHINDEX    $ZH("10")
#define ETORTLREADING     $ZH("80")
#define ETONUMERICSLOCAL  $ZH("400")
#define ETONUMERICSLATIN  $ZH("800")
#define ETOIGNORELANGUAGE $ZH("1000")
#define ETOPDY            $ZH("2000")
 
 ; %TMApplication.MessageBox() flags
#define MBOK $ZH("00000000")
#define MBOKCANCEL $ZH("00000001")
#define MBABORTRETRYIGNORE $ZH("00000002")
#define MBYESNOCANCEL $ZH("00000003")
#define MBYESNO $ZH("00000004")
#define MBRETRYCANCEL $ZH("00000005")
 
#define MBICONHAND $ZH("00000010")
#define MBICONQUESTION $ZH("00000020")
#define MBICONEXCLAMATION $ZH("00000030")
#define MBICONASTERISK $ZH("00000040")
#define MBUSERICON $ZH("00000080")
#define MBICONWARNING $ZH("00000030")
#define MBICONERROR $ZH("00000010")
#define MBICONINFORMATION $ZH("00000040")
#define MBICONSTOP $ZH("00000010")
 
#define MBDEFBUTTON1 $ZH("00000000")
#define MBDEFBUTTON2 $ZH("00000100")
#define MBDEFBUTTON3 $ZH("00000200")
#define MBDEFBUTTON4 $ZH("00000300")
 
#define MBAPPLMODAL $ZH("00000000")
#define MBSYSTEMMODAL $ZH("00001000")
#define MBTASKMODAL $ZH("00002000")
#define MBHELP $ZH("00004000")                         
 
#define MBNOFOCUS $ZH("00008000")
#define MBSETFOREGROUND $ZH("00010000")
#define MBDEFAULTDESKTOPONLY $ZH("00020000")
 
#define MBTOPMOST $ZH("00040000")
#define MBRIGHT $ZH("00080000")
#define MBRTLREADING $ZH("00100000")
 
#define MBSERVICENOTIFICATION $ZH("00200000")
#define MBSERVICENOTIFICATIONNT3X $ZH("00040000")
 
#define MBTYPEMASK $ZH("0000000F")
#define MBICONMASK $ZH("000000F0")
#define MBDEFMASK $ZH("00000F00")
#define MBMODEMASK $ZH("00003000")
#define MBMISCMASK $ZH("0000C000")
 
 ;const  { Dialog Box Command IDs }
#define IDOK 1
#define IDCANCEL 2
#define IDABORT 3
#define IDRETRY 4
#define IDIGNORE 5
#define IDYES 6
#define IDNO 7
#define IDCLOSE 8
#define IDHELP 9
 
 ;const  { ModalResult IDs }        
#define mrNone 0
#define mrOk 1
#define mrCancel 2
#define mrAbort 3
#define mrRetry 4
#define mrIgnore 5
#define mrYes 6
#define mrNo 7
#define mrAll 8
#define mrNoToAll 9
#define mrYesToAll 10
 
#define fmCreate         $ZH("FFFF")
#define fmOpenRead       $ZH("0000")
#define fmOpenWrite      $ZH("0001")
#define fmOpenReadWrite  $ZH("0002")
#define fmShareCompat    $ZH("0000")
#define fmShareExclusive $ZH("0010")
#define fmShareDenyWrite $ZH("0020")
#define fmShareDenyRead  $ZH("0030")
#define fmShareDenyNone  $ZH("0040")
 
#define faReadOnly       $ZH("00000001")
#define faHidden         $ZH("00000002")
#define faSysFile        $ZH("00000004")
#define faVolumeID       $ZH("00000008")
#define faDirectory      $ZH("00000010")
#define faArchive        $ZH("00000020")
#define faAnyFile        $ZH("0000003F")
 
 ; declare OLE Automation constants
#define varEmpty        $ZH("0000")
#define varNull         $ZH("0001")
#define varSmallint     $ZH("0002")
#define varInteger      $ZH("0003")
#define varSingle       $ZH("0004")
#define varDouble       $ZH("0005")
#define varCurrency     $ZH("0006")
#define varDate         $ZH("0007")
#define varOleStr       $ZH("0008")
#define varDispatch     $ZH("0009")
#define varError        $ZH("000A")
#define varBoolean      $ZH("000B")
#define varVariant      $ZH("000C")
#define varUnknown      $ZH("000D")
#define varByte         $ZH("0011")
#define varString       $ZH("0100")
#define varTypeMask     $ZH("0FFF")
#define varArray        $ZH("2000")
#define varByRef        $ZH("4000")
 
 ; declare SMWrap component's constants
#define sbHorizontal   "sbHorizontal"
#define sbVertical   "sbVertical"
#define trHorizontal   "trHorizontal"
#define trVertical   "trVertical"
#define tmBottomRight   "tmBottomRight"
#define tmTopLeft   "tmTopLeft"
#define tmBoth   "tmBoth"
#define tsNone   "tsNone"
#define tsAuto   "tsAuto"
#define tsManual   "tsManual"
#define scLineUp   "scLineUp"
#define scLineDown   "scLineDown"
#define scPageUp   "scPageUp"
#define scPageDown   "scPageDown"
#define scPosition   "scPosition"
#define scTrack   "scTrack"
#define scTop   "scTop"
#define scBottom   "scBottom"
#define scEndScroll   "scEndScroll"
#define bsBox   "bsBox"
#define bsFrame   "bsFrame"
#define bsTopLine   "bsTopLine"
#define bsBottomLine   "bsBottomLine"
#define bsLeftLine   "bsLeftLine"
#define bsRightLine   "bsRightLine"
#define bsSpacer   "bsSpacer"
#define bsLowered   "bsLowered"
#define bsRaised   "bsRaised"
#define bsSolid   "bsSolid"
#define bsClear   "bsClear"
#define bsHorizontal   "bsHorizontal"
#define bsVertical   "bsVertical"
#define bsFDiagonal   "bsFDiagonal"
#define bsCross   "bsCross"
#define bsDiagCross   "bsDiagCross"
#define taLeftJustify   "taLeftJustify"
#define taRightJustify   "taRightJustify"
#define taCenter   "taCenter"
#define csRead   "csRead"
#define csWrite   "csWrite"
#define ctString   "ctString"
#define ctInteger   "ctInteger"
#define ctDouble   "ctDouble"
#define ctDate   "ctDate"
#define ctCurrency   "ctCurrency"
#define ieSimple   "ieSimple"
#define ieEllipsis   "ieEllipsis"
#define iePickList   "iePickList"
#define gdSelected   "gdSelected"
#define gdFocused   "gdFocused"
#define gdFixed   "gdFixed"
#define goFixedVertLine   "goFixedVertLine"
#define goFixedHorzLine   "goFixedHorzLine"
#define goVertLine   "goVertLine"
#define goHorzLine   "goHorzLine"
#define goRangeSelect   "goRangeSelect"
#define goDrawFocusSelected   "goDrawFocusSelected"
#define goRowSizing   "goRowSizing"
#define goColSizing   "goColSizing"
#define goRowMoving   "goRowMoving"
#define goColMoving   "goColMoving"
#define goEditing   "goEditing"
#define goTabs   "goTabs"
#define goRowSelect   "goRowSelect"
#define goAlwaysShowEditor   "goAlwaysShowEditor"
#define goThumbTracking   "goThumbTracking"
#define ssNone   "ssNone"
#define ssHorizontal   "ssHorizontal"
#define ssVertical   "ssVertical"
#define ssBoth   "ssBoth"
#define cbUnchecked   "cbUnchecked"
#define cbChecked   "cbChecked"
#define cbGrayed   "cbGrayed"
#define ecNormal   "ecNormal"
#define ecUpperCase   "ecUpperCase"
#define ecLowerCase   "ecLowerCase"
#define csDropDown   "csDropDown"
#define csSimple   "csSimple"
#define csDropDownList   "csDropDownList"
#define csOwnerDrawFixed   "csOwnerDrawFixed"
#define csOwnerDrawVariable   "csOwnerDrawVariable"
#define odSelected   "odSelected"
#define odGrayed   "odGrayed"
#define odDisabled   "odDisabled"
#define odChecked   "odChecked"
#define odFocused   "odFocused"
#define htAbove   "htAbove"
#define htNowhere   "htNowhere"
#define htBelow   "htBelow"
#define htOnItem   "htOnItem"
#define htOnButton   "htOnButton"
#define htOnIcon   "htOnIcon"
#define htOnIndent   "htOnIndent"
#define htOnLabel   "htOnLabel"
#define htOnRight   "htOnRight"
#define htOnStateIcon   "htOnStateIcon"
#define htToLeft   "htToLeft"
#define htToRight   "htToRight"
#define cdsSelected   "cdsSelected"
#define cdsGrayed   "cdsGrayed"
#define cdsDisabled   "cdsDisabled"
#define cdsChecked   "cdsChecked"
#define cdsFocused   "cdsFocused"
#define cdsDefault   "cdsDefault"
#define cdsHot   "cdsHot"
#define cdsMarked   "cdsMarked"
#define cdsIndeterminate   "cdsIndeterminate"
#define isNone   "isNone"
#define isCut   "isCut"
#define isDropHilited   "isDropHilited"
#define isFocused   "isFocused"
#define isSelected   "isSelected"
#define isActivating   "isActivating"
#define stWholeWord   "stWholeWord"
#define stMatchCase   "stMatchCase"
#define csCTS   "csCTS"
#define csDSR   "csDSR"
#define csRing   "csRing"
#define csRLSD   "csRLSD"
#define fCtlHold   "fCtlHold"
#define fDsrHold   "fDsrHold"
#define fRlsHold   "fRlsHold"
#define fXoffHold   "fXoffHold"
#define fXOffSent   "fXOffSent"
#define fEof   "fEof"
#define fTxim   "fTxim"
#define ceFrame   "ceFrame"
#define ceRxParity   "ceRxParity"
#define ceOverrun   "ceOverrun"
#define ceBreak   "ceBreak"
#define ceIO   "ceIO"
#define ceMode   "ceMode"
#define ceRxOver   "ceRxOver"
#define ceTxFull   "ceTxFull"
#define ssShift   "ssShift"
#define ssAlt   "ssAlt"
#define ssCtrl   "ssCtrl"
#define ssLeft   "ssLeft"
#define ssRight   "ssRight"
#define ssMiddle   "ssMiddle"
#define ssDouble   "ssDouble"
#define mbLeft   "mbLeft"
#define mbRight   "mbRight"
#define mbMiddle   "mbMiddle"
#define dsDragEnter   "dsDragEnter"
#define dsDragLeave   "dsDragLeave"
#define dsDragMove   "dsDragMove"
#define caNone   "caNone"
#define caHide   "caHide"
 ; #define caFree   "caFree"
#define caMinimize   "caMinimize"
#define fsSurface   "fsSurface"
#define fsBorder   "fsBorder"
#define psStarting   "psStarting"
#define psRunning   "psRunning"
#define psEnding   "psEnding"
#define okWrite   "okWrite"
#define okRead   "okRead"
#define dtrDisable   "dtrDisable"
#define dtrEnable   "dtrEnable"
#define dtrHandshake   "dtrHandshake"
#define rtsDisable   "rtsDisable"
#define rtsEnable   "rtsEnable"
#define rtsHandshake   "rtsHandshake"
#define rtsToggle   "rtsToggle"
#define fcHardware   "fcHardware"
#define fcSoftware   "fcSoftware"
#define fcNone   "fcNone"
#define fcCustom   "fcCustom"
#define prNone   "prNone"
#define prOdd   "prOdd"
#define prEven   "prEven"
#define prMark   "prMark"
#define prSpace   "prSpace"
#define brCustom   "brCustom"
#define br110   "br110"
#define br300   "br300"
#define br600   "br600"
#define br1200   "br1200"
#define br2400   "br2400"
#define br4800   "br4800"
#define br9600   "br9600"
#define br14400   "br14400"
#define br19200   "br19200"
#define br38400   "br38400"
#define br56000   "br56000"
#define br57600   "br57600"
#define br115200   "br115200"
#define br128000   "br128000"
#define br256000   "br256000"
#define dbFive   "dbFive"
#define dbSix   "dbSix"
#define dbSeven   "dbSeven"
#define dbEight   "dbEight"
#define smThreadSync   "smThreadSync"
#define smWindowSync   "smWindowSync"
#define smNone   "smNone"
#define evRxChar   "evRxChar"
#define evTxEmpty   "evTxEmpty"
#define evRxFlag   "evRxFlag"
#define evRing   "evRing"
#define evBreak   "evBreak"
#define evCTS   "evCTS"
#define evDSR   "evDSR"
#define evError   "evError"
#define evRLSD   "evRLSD"
#define evRx80Full   "evRx80Full"
#define dmManual   "dmManual"
#define dmAutomatic   "dmAutomatic"
#define dkDrag   "dkDrag"
#define dkDock   "dkDock"
#define akLeft   "akLeft"
#define akTop   "akTop"
#define akRight   "akRight"
#define akBottom   "akBottom"
#define alNone   "alNone"
#define alTop   "alTop"
#define alBottom   "alBottom"
#define alLeft   "alLeft"
#define alRight   "alRight"
#define alClient   "alClient"
#define doNoOrient   "doNoOrient"
#define doHorizontal   "doHorizontal"
#define doVertical   "doVertical"
#define beLeft   "beLeft"
#define beTop   "beTop"
#define beRight   "beRight"
#define beBottom   "beBottom"
#define bvNone   "bvNone"
#define bvLowered   "bvLowered"
#define bvRaised   "bvRaised"
#define bvSpace   "bvSpace"
#define bkNone   "bkNone"
#define bkTile   "bkTile"
#define bkSoft   "bkSoft"
#define bkFlat   "bkFlat"
#define ftUnknown   "ftUnknown"
#define ftString   "ftString"
#define ftSmallint   "ftSmallint"
#define ftInteger   "ftInteger"
#define ftWord   "ftWord"
#define ftBoolean   "ftBoolean"
#define ftFloat   "ftFloat"
#define ftCurrency   "ftCurrency"
#define ftBCD   "ftBCD"
#define ftDate   "ftDate"
#define ftTime   "ftTime"
#define ftDateTime   "ftDateTime"
#define ftBytes   "ftBytes"
#define ftVarBytes   "ftVarBytes"
#define ftAutoInc   "ftAutoInc"
#define ftBlob   "ftBlob"
#define ftMemo   "ftMemo"
#define tGraphic   "tGraphic"
#define ftFmtMemo   "ftFmtMemo"
#define ftParadoxOle   "ftParadoxOle"
#define ftDBaseOle   "ftDBaseOle"
#define ftTypedBinary   "ftTypedBinary"
#define ftCursor   "ftCursor"
#define ftFixedChar   "ftFixedChar"
#define ftWideString   "ftWideString"
#define ftLargeint   "ftLargeint"
#define ftADT   "ftADT"
#define ftArray   "ftArray"
#define ftReference   "ftReference"
#define ftDataSet   "ftDataSet"
#define csPopup   "csPopup"
#define csDialog   "csDialog"
#define gkCustom   "gkCustom"
#define gkDefault   "gkDefault"
#define gkDropDown   "gkDropDown"
#define gkEllipsis   "gkEllipsis"
#define epaRight   "epaRight"
#define epaLeft   "epaLeft"
#define Sun   "Sun"
#define Mon   "Mon"
#define Tue   "Tue"
#define Wed   "Wed"
#define Fri   "Fri"
#define Sat   "Sat"
#define dyDefault   "dyDefault"
#define dyFour   "dyFour"
#define dyTwo   "dyTwo"
#define fdAnsiOnly   "fdAnsiOnly"
#define fdTrueTypeOnly   "fdTrueTypeOnly"
#define fdEffects   "fdEffects"
#define fdFixedPitchOnly   "fdFixedPitchOnly"
#define fdForceFontExist   "fdForceFontExist"
#define fdNoFaceSel   "fdNoFaceSel"
#define fdNoOEMFonts   "fdNoOEMFonts"
#define fdNoSimulations   "fdNoSimulations"
#define fdNoSizeSel   "fdNoSizeSel"
#define dNoStyleSel   "dNoStyleSel"
#define fdNoVectorFonts   "fdNoVectorFonts"
#define fdShowHelp   "fdShowHelp"
#define fdWysiwyg   "fdWysiwyg"
#define fdLimitSize   "fdLimitSize"
#define fdScalableOnly   "fdScalableOnly"
#define fdApplyButton   "fdApplyButton"
#define cdFullOpen   "cdFullOpen"
#define cdPreventFullOpen   "cdPreventFullOpen"
#define cdShowHelp   "cdShowHelp"
#define cdSolidColor   "cdSolidColor"
#define cdAnyColor   "cdAnyColor"
#define bsNone   "bsNone"
#define bsSingle   "bsSingle"
#define bsSizeable   "bsSizeable"
#define bsDialog   "bsDialog"
#define bsToolWindow   "bsToolWindow"
#define bsSizeToolWin   "bsSizeToolWin"
#define fsEdit   "fsEdit"
#define fsComboBox   "fsComboBox"
#define ofReadOnly   "ofReadOnly"
#define ofOverwritePrompt   "ofOverwritePrompt"
#define ofHideReadOnly   "ofHideReadOnly"
#define ofNoChangeDir   "ofNoChangeDir"
#define ofShowHelp   "ofShowHelp"
#define ofNoValidate   "ofNoValidate"
#define ofAllowMultiSelect   "ofAllowMultiSelect"
#define ofExtensionDifferent   "ofExtensionDifferent"
#define fPathMustExist   "fPathMustExist"
#define ofFileMustExist   "ofFileMustExist"
#define ofCreatePrompt   "ofCreatePrompt"
#define ofShareAware   "ofShareAware"
#define ofNoReadOnlyReturn   "ofNoReadOnlyReturn"
#define ofNoTestFileCreate   "ofNoTestFileCreate"
#define ofNoNetworkButton   "ofNoNetworkButton"
#define ofNoLongNames   "ofNoLongNames"
#define ofOldStyleDialog   "ofOldStyleDialog"
#define ofNoDereferenceLinks   "ofNoDereferenceLinks"
#define ofEnableIncludeNotify   "ofEnableIncludeNotify"
#define ofEnableSizing   "ofEnableSizing"
#define fsBold   "fsBold"
#define fsItalic   "fsItalic"
#define fsUnderline   "fsUnderline"
#define fsStrikeOut   "fsStrikeOut"
#define fpDefault   "fpDefault"
#define fpVariable   "fpVariable"
#define fpFixed   "fpFixed"
#define fsNormal   "fsNormal"
#define fsMDIChild   "fsMDIChild"
#define fsMDIForm   "fsMDIForm"
#define fsStayOnTop   "fsStayOnTop"
#define poDesigned   "poDesigned"
#define poDefault   "poDefault"
#define poDefaultPosOnly   "poDefaultPosOnly"
#define poDefaultSizeOnly   "poDefaultSizeOnly"
#define poScreenCenter   "poScreenCenter"
#define poDesktopCenter   "poDesktopCenter"
#define poNone   "poNone"
#define poProportional   "poProportional"
#define poPrintToFit   "poPrintToFit"
#define wsNormal   "wsNormal"
#define wsMinimized   "wsMinimized"
#define wsMaximized   "wsMaximized"
#define biSystemMenu   "biSystemMenu"
#define biMinimize   "biMinimize"
#define biMaximize   "biMaximize"
#define biHelp   "biHelp"
#define tbHorizontal   "tbHorizontal"
#define tbVertical   "tbVertical"
#define dsNormal   "dsNormal"
#define dsTransparent   "dsTransparent"
#define itImage   "itImage"
#define itMask   "itMask"
#define tlTop   "tlTop"
#define tlCenter   "tlCenter"
#define tlBottom   "tlBottom"
#define lbStandard   "lbStandard"
#define lbOwnerDrawFixed   "lbOwnerDrawFixed"
#define lbOwnerDrawVariable   "lbOwnerDrawVariable"
#define iaTop   "iaTop"
#define iaLeft   "iaLeft"
#define sdLeft   "sdLeft"
#define sdRight   "sdRight"
#define sdAbove   "sdAbove"
#define sdBelow   "sdBelow"
#define sdAll   "sdAll"
#define htHandPoint   "htHandPoint"
#define htUnderlineCold   "htUnderlineCold"
#define htUnderlineHot   "htUnderlineHot"
#define drBounds   "drBounds"
#define drIcon   "drIcon"
#define drLabel   "drLabel"
#define drSelectBounds   "drSelectBounds"
#define ctText   "ctText"
#define ctImage   "ctImage"
#define ctState   "ctState"
#define arAlignBottom   "arAlignBottom"
#define arAlignLeft   "arAlignLeft"
#define arAlignRight   "arAlignRight"
#define arAlignTop   "arAlignTop"
#define arDefault   "arDefault"
#define arSnapToGrid   "arSnapToGrid"
#define mbNone   "mbNone"
#define mbBreak   "mbBreak"
#define mbBarBreak   "mbBarBreak"
#define paCenter   "paCenter"
#define aaManual   "aaManual"
#define aaGetFocus   "aaGetFocus"
#define aaDoubleClick   "aaDoubleClick"
#define smClip   "smClip"
#define smCenter   "smCenter"
#define smScale   "smScale"
#define smStretch   "smStretch"
#define smAutoSize   "smAutoSize"
#define osEmpty   "osEmpty"
#define osLoaded   "osLoaded"
#define osRunning   "osRunning"
#define osOpen   "osOpen"
#define osInPlaceActive   "osInPlaceActive"
#define osUIActive   "osUIActive"
#define pcCopies   "pcCopies"
#define pcOrientation   "pcOrientation"
#define pcCollation   "pcCollation"
#define poPortrait   "poPortrait"
#define poLandscape   "poLandscape"
#define nsNone   "nsNone"
#define nsBullet   "nsBullet"
#define caBold   "caBold"
#define caColor   "caColor"
#define caFace   "caFace"
#define caItalic   "caItalic"
#define caSize   "caSize"
#define caStrikeOut   "caStrikeOut"
#define caUnderline   "caUnderline"
#define caProtected   "caProtected"
#define ssRegular   "ssRegular"
#define ssFlat   "ssFlat"
#define ssHotTrack   "ssHotTrack"
#define dmBoth   "dmBoth"
#define dmGlyphOnly   "dmGlyphOnly"
#define dmTextOnly   "dmTextOnly"
#define blGlyphLeft   "blGlyphLeft"
#define blGlyphRight   "blGlyphRight"
#define blGlyphTop   "blGlyphTop"
#define blGlyphBottom   "blGlyphBottom"
#define rsNone   "rsNone"
#define rsLine   "rsLine"
#define rsUpdate   "rsUpdate"
#define rsPattern   "rsPattern"
#define sptNormal   "sptNormal"
#define sptCapsLock   "sptCapsLock"
#define sptNumLock   "sptNumLock"
#define sptScrollLock   "sptScrollLock"
#define sptDate   "sptDate"
#define sptTime   "sptTime"
#define sptDateTime   "sptDateTime"
#define sptEllipsisText   "sptEllipsisText"
#define sptEllipsisPath   "sptEllipsisPath"
#define sptGlyph   "sptGlyph"
#define sptGauge   "sptGauge"
#define sptOwnerDraw   "sptOwnerDraw"
#define tpTop   "tpTop"
#define tpBottom   "tpBottom"
#define tpLeft   "tpLeft"
#define tpRight   "tpRight"
#define tsTabs   "tsTabs"
#define tsButtons   "tsButtons"
#define tsFlatButtons   "tsFlatButtons"
#define blTop   "blTop"
#define blBottom   "blBottom"
#define blLeft   "blLeft"
#define blRight   "blRight"
#define dpTop   "dpTop"
#define dpBottom   "dpBottom"
#define dpLeft   "dpLeft"
#define dpRight   "dpRight"
#define dmCanFloat   "dmCanFloat"
#define dmCannotFloat   "dmCannotFloat"
#define dmCannotFloatOrChangeDocks   "dmCannotFloatOrChangeDocks"
#define dhDouble   "dhDouble"
#define dhNone   "dhNone"
#define dhSingle   "dhSingle"
#define stNone   "stNone"
#define stData   "stData"
#define stText   "stText"
#define stBoth   "stBoth"
#define naAdd   "naAdd"
#define naAddFirst   "naAddFirst"
#define naAddChild   "naAddChild"
#define naAddChildFirst   "naAddChildFirst"
#define naInsert   "naInsert"
#define sbOneStopBit   "sbOneStopBit"
#define sbOne5StopBits   "sbOne5StopBits"
#define sbTwoStopBits   "sbTwoStopBits"
#define SMWOREF(%s)   ##class(%TMPersistent).GetObjOref(+%s)
 
#define STARTBINDING  ##continue
 n SMWCStr,SMWCLParentAddress,SMWCIndex  ##continue
 s SMWCStr="",SMWCIndex=1 ##continue
 s SMWCLParentAddress=$s(initvalue="":0,1:$lg(initvalue,2,0))
 
#define CREATECONTROL(%classname,%controlname,%parentname,%parentaddress,%createcontrol)   ##continue
#if %createcontrol=1    ##continue
 s %controlname=##class(%classname).%New("") ##continue
#endif ##continue
 s:($l($g(SMWCStr(SMWCIndex)))>=32000) SMWCIndex=$I(SMWCIndex) ##continue
 s SMWCStr(SMWCIndex)=$g(SMWCStr(SMWCIndex))_##class(%TMPersistent).CreateControl(%controlname,%parentname,%parentaddress)
 
#define FINISHBINDING  ##continue
 n i,k,SMWCCommand,SMWCClearList,SMWCControl    ##continue
 f k=1:1:SMWCIndex d    ##continue
 . s SMWCClearList=(k=1) ##continue
 . s SMWCCommand=$$CallBack^%ZMRASD($lb("cac",SMWCClearList,SMWCStr(k)))  ##continue
 . f i=1:3:$ll(SMWCCommand) d  ##continue
 . . s SMWCControl=##class(%TMPersistent).GetObjOref($lg(SMWCCommand,i))  ##continue
 . . d SMWCControl.Bind($lg(SMWCCommand,i+1,0),$lg(SMWCCommand,i+2,0))
 
]]></Routine>


<Class name="%Library.SMProject">
<ClassType>serial</ClassType>
<IncludeCode>%cspInclude</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>64314,73348</TimeCreated>

<Property name="AutoCreateForms">
<Type>%Library.String</Type>
<Collection>array</Collection>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CSPs">
<Type>%Library.String</Type>
<Collection>array</Collection>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Classes">
<Type>%Library.String</Type>
<Collection>array</Collection>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Globals">
<Type>%Library.String</Type>
<Collection>array</Collection>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HelpFile">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HookRoutine">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Icon">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Icons">
<Type>%Library.GlobalCharacterStream</Type>
<Collection>array</Collection>
</Property>

<Property name="Images">
<Type>%Library.GlobalCharacterStream</Type>
<Collection>array</Collection>
</Property>

<Property name="Includes">
<Type>%Library.String</Type>
<Collection>array</Collection>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Locale">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LogoImage">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LogoTime">
<Type>%Library.Integer</Type>
</Property>

<Property name="MainForm">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Name">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OldName">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PrePostRoutine">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Routines">
<Type>%Library.String</Type>
<Collection>array</Collection>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SingleInstance">
<Type>%Library.Boolean</Type>
</Property>

<Property name="StringTables">
<Type>%Library.ArrayOfDataTypes</Type>
<Collection>array</Collection>
</Property>

<Property name="Title">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.
]]></Description>
<FormalSpec>initvalue:%CacheString=""</FormalSpec>
<Language>cache</Language>
<Private>1</Private>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s ..Name=initvalue
 s ..OldName=initvalue
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckExistsProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectName:%Library.String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q $d(^SMProject(ProjectName))>0
]]></Implementation>
</Method>

<Method name="Clear">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s ..HelpFile=""
 s ..HookRoutine=""
 s ..Icon=""
 s ..Locale=""
 s ..LogoImage=""
 s ..LogoTime=0
 s ..MainForm=""
 s ..PrePostRoutine=""
 s ..SingleInstance="False"
 s ..Title=""
 d ..AutoCreateForms.Clear()
 d ..Classes.Clear()
 d ..Routines.Clear()
 d ..Includes.Clear()
 d ..CSPs.Clear()
 d ..Globals.Clear()
 d ..StringTables.Clear()
 q
]]></Implementation>
</Method>

<Method name="Delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
  n key,BLOBIndex

  s key="",BLOBIndex=-1
  s key=$o(^SMProject(ProjectName,"Images",key))
  f  q:key=""  d
  . s BLOBIndex=$o(^BLOB(ProjectName_"."_key,""))
  . d:BLOBIndex'="" DeleteBLOB^%ZMRASD(BLOBIndex)
  . s key=$o(^SMProject(ProjectName,"Images",key))

  s key="",BLOBIndex=-1
  s key=$o(^SMProject(ProjectName,"Icons",key))
  f  q:key=""  d
  . s BLOBIndex=$o(^BLOB(ProjectName_"."_key,""))
  . d:BLOBIndex'="" DeleteBLOB^%ZMRASD(BLOBIndex)
  . s key=$o(^SMProject(ProjectName,"Icons",key))

  k key,BLOBIndex
  k ^SMProject(ProjectName)
  q
]]></Implementation>
</Method>

<Method name="GetAutoList">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n Key,LB s Key="",LB=""
 s Key=..AutoCreateForms.Next(Key)
 f  q:Key=""  d
 . s LB=LB_$LB($LB(Key,..AutoCreateForms.GetAt(Key)))
 . s Key=..AutoCreateForms.Next(Key)
 q LB
]]></Implementation>
</Method>

<Method name="GetCSPApplications">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n url,urls
 s urls=""
#if $p($$GetVersion^%apiOBJ()," ",4)<5.1
 s url=$o($$$CSPAPP(""))
 f  q:(url="")  d
 . i $$$CSPAPPnamespace($$$CSPAPP(url))=$$$GETNS d
 . . i ($$$GETNS'="%CACHELIB") || ((url'="/csp/broker") && (url'="/apps/documatic")) d
 . . . s urls=urls_$lb(url)
 . s url=$order($$$CSPAPP(url))
#else
	; we cannot use CSP applications in %CACHELIB namespace
	i $znspace="%CACHELIB" q:$Q urls  q
	n savens,result,sc
	s savens=$znspace
	; we use query from %sys namespace with nonpercent classname
	zn "%sys"
	Set result=##class(%ResultSet).%New("Security.Applications:Detail")
	Set sc=result.Execute("*") If $$$ISERR(sc) Quit
	f  q:'result.Next(.sc)  d
	. If $$$ISERR(sc) Quit
	. ; if application type ends with "CSP"
	. ; and exist in our work namespace
	. i (result.Data("Type")?.E1"CSP")&(result.Data("NameSpace")=savens) d
	. . s urls=urls_$lb(result.Data("Name"))
	; we must kill object with nonpercent classname from %sys namespace in %sys namespace
	k result
	zn savens
#endif
 q:$Q urls  q
]]></Implementation>
</Method>

<Method name="GetCSPFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 #define CSPAppDirDoesNotExist 5956

 n dir,path,setting,recurse,count,f,files,isdir
 i $e(url,$L(url))="/"!($e(url,$L(url))="\") s url=$e(url,1,$l(url)-1)
 ; s setting=$$getapp^%cspServer(url_"/",.path)
 ; i setting="" q $$$ERROR($$$CSPApplicationDoesNotExist,url)
 ; s recurse=$lg(setting,3,0)
 s recurse=1
 s dir=##class(%File).NormalizeDirectory($$GetFilename^%apiCSP(url_"/"))
 i '##class(%File).DirectoryExists(dir) q $$$ERROR($$$CSPAppDirDoesNotExist,dir,url)
 s files=""
 s f=$zsearch(dir_"*"),count=1
 f  q:f=""  d  s f=$zsearch("")
 . s isdir=##class(%File).DirectoryExists(f)
 . i 'recurse,isdir q
 . i isdir,$e($tr(f,"\","/"),$l(f)-2,32767)="/.."!($e($tr(f,"\","/"),$l(f)-1,32767)="/.") Quit
 . s ext=$zcvt($p(f,".",$l(f,".")),"l")
 . i (ext="csp") ! (ext="csr") ! isdir s files=files_$lb(f),count=count+1
 q:$Q files  q
]]></Implementation>
</Method>

<Method name="GetCSPGlobal">
<Description>
  w ##class(%Library.SMProject).GetCSPGlobal(appUrl)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String,gl:%String="^SMWrapCSPList("_$job_")"</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 #define CSPAppDirDoesNotExist 5956

 n dir,path,setting,recurse,count,f,files,isdir
 i $e(url,$L(url))="/"!($e(url,$L(url))="\") s url=$e(url,1,$l(url)-1)
 ; s setting=$$getapp^%cspServer(url_"/",.path)
 ; i setting="" q $$$ERROR($$$CSPApplicationDoesNotExist,url)
 ; s recurse=$lg(setting,3,0)
 s recurse=1
 s dir=##class(%File).NormalizeDirectory($$GetFilename^%apiCSP(url_"/"))
 i '##class(%File).DirectoryExists(dir) q $$$ERROR($$$CSPAppDirDoesNotExist,dir,url)
 s files=""
 s f=$zsearch(dir_"*"),count=0
 f  q:f=""  d  s f=$zsearch("")
 . s isdir=##class(%File).DirectoryExists(f)
 . i 'recurse,isdir q
 . i isdir,$e($tr(f,"\","/"),$l(f)-2,32767)="/.."!($e($tr(f,"\","/"),$l(f)-1,32767)="/.") Quit
 . s ext=$zcvt($p(f,".",$l(f,".")),"l")
 . i (ext="csp") ! (ext="csr") ! isdir     s count=count+1   s @gl@(count)=f
 q gl
]]></Implementation>
</Method>

<Method name="GetCSPList">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n Key,LB s Key="",LB=""
 s Key=..CSPs.Next(Key)
 f  q:Key=""  d
 . s LB=LB_$LB($LB(Key,..CSPs.GetAt(Key)))
 . s Key=..CSPs.Next(Key)
 q LB
]]></Implementation>
</Method>

<Method name="GetClassesList">
<Description>
Returns list of classes in next format:
$LB($LB(Name, FolderPath), $LB(Name, FolderPath), ...)
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n Key,LB s Key="",LB=""
 s Key=..Classes.Next(Key)
 f  q:Key=""  d
 . s LB=LB_$LB($LB(Key,..Classes.GetAt(Key)))
 . s Key=..Classes.Next(Key)
 q LB
]]></Implementation>
</Method>

<Method name="GetFileContent">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n fileContent,file
 s file=##class(%File).%New(FileName)
 q:'file.Exists(FileName) "File does not exists"
 d file.Open("R")
 n buffer s (buffer,fileContent)=""
 f  q:file.AtEnd  d
 . s buffer=file.Read(16000)
 . i ($l(buffer)<16000) s fileContent=fileContent_$C(13,10)_buffer
 . e  s fileContent=fileContent_buffer
 d file.Close()
 d file.%Close()
 q:$q fileContent  q
]]></Implementation>
</Method>

<Method name="GetFileNameByUrl">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 #define cTableDefault 1
 #define tableDefaultGet(%cat,%key) $g(^%qCacheObjectKey($$$cTableDefault,%cat,%key))
 #define defMemberKeyGet(%class,%ckey,%member,%mkey) $g(^oddDEF(%class,%ckey,%member,%mkey),$$$tableDefaultGet(%ckey,%mkey))
 #define comMemberKeyGet(%class,%ckey,%member,%mkey) $g(^oddCOM(%class,%ckey,%member,%mkey),$g(^oddCOM($g(^oddCOM(%class,%ckey,%member,$$$cXXXXorigin),%class),%ckey,%member,%mkey),$$$defMemberKeyGet($g(^oddCOM(%class,%ckey,%member,$$$cXXXXorigin),%class),%ckey,%member,%mkey)))
 #define comMemberKeyGetLvar(%lvar,%class,%ckey,%member,%mkey) s %lvar=$$$comMemberKeyGet(%class,%ckey,%member,%mkey)

 i url="" q ""
 n filename,version,type
 s version=$piece(url,";",2,32767),url=$piece(url,";")
 i version'="" d
 . s type=$zconvert($piece(url,".",$length(url,".")),"U")
 . q $data(^rBACKUP(url,type,##class(%RoutineMgr).ConvertVersion(url,type,version)))
 i $extract(url)'="/" s url="/"_url
 s filename=$$GetFilename^%apiCSP(url)
 i filename'="" q filename
 s cls=$$GetCSPClassName^%cspServer(url)
 i cls="" q ""
 $$$comMemberKeyGetLvar(cspfile,cls,$$$cCLASSparameter,"CSPFILE",$$$cPARAMdefault)
 i cspfile=filename||(cspfile="") q ""
 q cspfile
]]></Implementation>
</Method>

<Method name="GetGlobalNodeAsBitString">
<ClassMethod>1</ClassMethod>
<FormalSpec>Node:%Library.String,startbit:%Library.Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s et=$ztrap
 s $ztrap="ERR"
 n i
 n Result
 n BitCount
 n TotalBitCount
 s Result=""
 s TotalBitCount=$bitcount(Node)
 f i=1:1:$bitcount(Node) d
 . s BitCount=i
 . s:($l(Result)<32768) Result=Result_$bit(Node,i)
  ;w Result
 s $ztrap=et
 q $lb(TotalBitCount, BitCount,Result)
ERR
 s $ztrap=et
 s Result="<INVALID BIT STRING>"
 s TotalBitCount=0
 s BitCount=0
 q $lb(TotalBitCount, BitCount,Result)
]]></Implementation>
</Method>

<Method name="GetGlobalsList">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n Key,LB s Key="",LB=""
 s Key=..Globals.Next(Key)
 f  q:Key=""  d
 . s LB=LB_$LB(Key)
 . s Key=..Globals.Next(Key)
 q LB
]]></Implementation>
</Method>

<Method name="GetIncludesList">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n Key,LB s Key="",LB=""
 s Key=..Includes.Next(Key)
 f  q:Key=""  d
 . s LB=LB_$LB(Key)
 . s Key=..Includes.Next(Key)
 q LB
]]></Implementation>
</Method>

<Method name="GetProjectList">
<Description>
Returns list build of projects names
</Description>
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n key,LB s key="",LB=""
 s key=$o(^SMProject(key))
 f  q:key=""  d
 . s LB=LB_$LB(key)
 . s key=$o(^SMProject(key))
 q LB
]]></Implementation>
</Method>

<Method name="GetRoutinesList">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n Key,LB s Key="",LB=""
 s Key=..Routines.Next(Key)
 f  q:Key=""  d
 . s LB=LB_$LB(Key)
 . s Key=..Routines.Next(Key)
 q LB
]]></Implementation>
</Method>

<Method name="Load">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
  q:'$d(^SMProject(..Name))
  s ..MainForm=$lg(^SMProject(..Name,"MainForm"),1)
  s ..Title=$g(^SMProject(..Name,"AppTitle"),"")
  s ..HelpFile=$g(^SMProject(..Name,"HelpFile"),"")
  s ..Icon=$g(^SMProject(..Name,"MainIcon"),"")
  s ..Locale=$g(^SMProject(..Name,"MainLocale"),"")
  s ..LogoImage=$g(^SMProject(..Name,"AppLogo"),"")
  s ..LogoTime=$g(^SMProject(..Name,"AppLogoTime"),"")
  s ..SingleInstance=$g(^SMProject(..Name,"RunSingleCopy"),"")
  s ..PrePostRoutine=$g(^SMProject(..Name,"PrePostRoutine"),"")
  s ..HookRoutine=$g(^SMProject(..Name,"HookRoutine"),"")

  n key,value,name
  d ..AutoCreateForms.Clear()
  s value=""
  s key=$o(^SMProject(..Name,"AUTO",""))
  f  q:key=""  d
  . s value=$g(^SMProject(..Name,"AUTO",key),"")
  . d ..AutoCreateForms.SetAt(value,key)
  . s key=$o(^SMProject(..Name,"AUTO",key))

  d ..Classes.Clear()
  s value=""
  s key=$o(^SMProject(..Name,"Classes",""))
  f  q:key=""  d
  . s value=$g(^SMProject(..Name,"Classes",key),"")
  . d ..Classes.SetAt(value,key)
  . s key=$o(^SMProject(..Name,"Classes",key))

  d ..Includes.Clear()
  s key=$o(^SMProject(..Name,"Includes",""))
  f  q:key=""  d
  . d ..Includes.SetAt("",key)
  . s key=$o(^SMProject(..Name,"Includes",key))

  d ..Routines.Clear()
  s key=$o(^SMProject(..Name,"Routines",""))
  f  q:key=""  d
  . d ..Routines.SetAt("",key)
  . s key=$o(^SMProject(..Name,"Routines",key))

  d ..Globals.Clear()
  s key=$o(^SMProject(..Name,"Globals",""))
  f  q:key=""  d
  . d ..Globals.SetAt("",key)
  . s key=$o(^SMProject(..Name,"Globals",key))

  d ..CSPs.Clear()
  s value=""
  s key=$o(^SMProject(..Name,"CSP pages",""))
  f  q:key=""  d
  . s value=$g(^SMProject(..Name,"CSP pages",key),"")
  . d ..CSPs.SetAt(value,key)
  . s key=$o(^SMProject(..Name,"CSP pages",key))

  n stream,BLOBIndex,idx
  d ..Images.Clear()
  s key="",BLOBIndex="",idx=""
  s key=$o(^SMProject(..Name,"Images",key))
  f  q:key=""  d
  . s BLOBIndex=$o(^BLOB(..Name_"."_key,""))
  . i BLOBIndex'="" d
  . . s stream=##class(%GlobalCharacterStream).%New()
  . . s idx=$o(^BLOB(BLOBIndex,""))
  . . f  q:idx=""  d
  . . . d stream.Write(^BLOB(BLOBIndex,idx))
  . . . s idx=$o(^BLOB(BLOBIndex,idx))
  . . d ..Images.SetAt(stream,key)
  . s key=$o(^SMProject(..Name,"Images",key))

  d ..Icons.Clear()
  s key="",BLOBIndex="",idx=""
  s key=$o(^SMProject(..Name,"Icons",key))
  f  q:key=""  d
  . s BLOBIndex=$o(^BLOB(..Name_"."_key,""))
  . i BLOBIndex'="" d
  . . s stream=##class(%GlobalCharacterStream).%New()
  . . s idx=$o(^BLOB(BLOBIndex,""))
  . . f  q:idx=""  d
  . . . d stream.Write(^BLOB(BLOBIndex,idx))
  . . . s idx=$o(^BLOB(BLOBIndex,idx))
  . . d ..Icons.SetAt(stream,key)
  . s key=$o(^SMProject(..Name,"Icons",key))

  d ..StringTables.Clear()
  s key=$o(^SMProject(..Name,"StringTables",""))
  f  q:key=""  d
  . s arr=##class(%ArrayOfDataTypes).%New()
  . s name=""
  . s name=$o(^SMProject(..Name,"StringTables",key,""))
  . f  q:name=""  d
  . . s value=$g(^SMProject(..Name,"StringTables",key,name),"")
  . . d arr.SetAt(value,name)
  . . s name=$o(^SMProject(..Name,"StringTables",key,name))
  . d ..StringTables.SetAt(arr,key)
  . s key=$o(^SMProject(..Name,"StringTables",key))
  k name,key,value
  q
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Saves current project. Method returns 1 in case of success and 0 otherwise. If method is called inside
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
  n zt s zt=$ztrap
  s $zt="ZT"
  n TL s TL=$tlevel
  i TL = 0 TS


  n key ,BLOBIndex
  s key="",BLOBIndex=-1
  s key=$o(^SMProject(..Name,"Images",key))
  f  q:key=""  d
  . s BLOBIndex=$o(^BLOB(..Name_"."_key,""))
  . d:BLOBIndex'="" DeleteBLOB^%ZMRASD(BLOBIndex)
  . s key=$o(^SMProject(..Name,"Images",key))

  n key ,BLOBIndex
  s key="",BLOBIndex=-1
  s key=$o(^SMProject(..Name,"Icons",key))
  f  q:key=""  d
  . s BLOBIndex=$o(^BLOB(..Name_"."_key,""))
  . d:BLOBIndex'="" DeleteBLOB^%ZMRASD(BLOBIndex)
  . s key=$o(^SMProject(..Name,"Icons",key))

  k ^SMProject(..Name)
  n key
  s MainFormOref=""

  s key=""
  s key=..AutoCreateForms.Next(key)
  f  q:key=""  d
  . s:key=..MainForm MainFormOref=..AutoCreateForms.GetAt(key)
  . s key=..AutoCreateForms.Next(key)

  s ^SMProject(..Name)=$LB("SMWP",..Name)
  s ^SMProject(..Name,"MainForm")=$LB(..MainForm,MainFormOref)
  s ^SMProject(..Name,"AppTitle")=..Title
  s ^SMProject(..Name,"HelpFile")=..HelpFile
  s ^SMProject(..Name,"MainIcon")=..Icon
  s ^SMProject(..Name,"MainLocale")=..Locale
  s ^SMProject(..Name,"AppLogo")=..LogoImage
  s ^SMProject(..Name,"AppLogoTime")=..LogoTime
  s ^SMProject(..Name,"RunSingleCopy")=..SingleInstance
  s ^SMProject(..Name,"PrePostRoutine")=..PrePostRoutine
  s ^SMProject(..Name,"HookRoutine")=..HookRoutine

  s key=""
  s key=..AutoCreateForms.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"AUTO",key)=..AutoCreateForms.GetAt(key)
  . s key=..AutoCreateForms.Next(key)

  s key=""
  s key=..Classes.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"Classes",key)=..Classes.GetAt(key)
  . s key=..Classes.Next(key)

  s key=""
  s key=..Includes.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"Includes",key)=""
  . s key=..Includes.Next(key)

  s key=""
  s key=..Routines.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"Routines",key)=""
  . s key=..Routines.Next(key)

  s key=""
  s key=..Globals.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"Globals",key)=""
  . s key=..Globals.Next(key)

  s key=""
  s key=..CSPs.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"CSP pages",key)=..CSPs.GetAt(key)
  . s key=..CSPs.Next(key)



  n stream,BLOBIndex,name,bufSize,bufStr,i
  s key="",BLOBIndex=""
  s key=..Images.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"Images",key)=""
  . s name=..Name_"."_key
  . s BLOBIndex=$o(^BLOB(name,""))
  . s:BLOBIndex="" BLOBIndex=$$CreateBLOB^%ZMRASD(name)
  . d ClearBLOB^%ZMRASD(BLOBIndex,0)
  . s stream=..Images.GetAt(key)
  . d stream.Rewind()
  . f  q:stream.AtEnd=1  d
  . . s bufSize=2048,bufStr=""
  . . s bufStr=stream.Read(.bufSize)
  . . d AddBLOBBlock^%ZMRASD(BLOBIndex,bufStr)
  . s key=..Images.Next(key)


  s key="",BLOBIndex=""
  s key=..Icons.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"Icons",key)=""
  . s name=..Name_"."_key
  . s BLOBIndex=$o(^BLOB(name,""))
  . s:BLOBIndex="" BLOBIndex=$$CreateBLOB^%ZMRASD(name)
  . d ClearBLOB^%ZMRASD(BLOBIndex,0)
  . s stream=..Icons.GetAt(key)
  . d stream.Rewind()
  . f  q:stream.AtEnd=1  d
  . . s bufSize=2048,bufStr=""
  . . s bufStr=stream.Read(.bufSize)
  . . d AddBLOBBlock^%ZMRASD(BLOBIndex,bufStr)
  . s key=..Icons.Next(key)
  k stream,BLOBIndex,name,bufSize,bufStr

  n intkey,arr
  s key=""
  s key=..StringTables.Next(key)
  f  q:key=""  d
  . s ^SMProject(..Name,"StringTables",key)=""
  . s arr=..StringTables.GetAt(key)
  . s intkey=""
  . s intkey=arr.Next(intkey)
  . f  q:intkey=""  d
  . . s value=arr.GetAt(intkey)
  . . s ^SMProject(..Name,"StringTables",key,intkey)=value
  . . s intkey=arr.Next(intkey)
  . s key=..StringTables.Next(key)

  i (..Name'=..OldName) d ##class(%SMProject).Delete(..OldName)
  i TL = 0 TC
  s $ztrap=zt
  q 1

ZT
  i TL = 0 TRO
  s $ztrap=zt
  q 0
]]></Implementation>
</Method>

<Method name="SetAutoList">
<Description>
Accepts list of Auto created forms in next format:
$LB($LB(Name, OrefVar), $LB(Name, OrefVar), ...)
</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d ..AutoCreateForms.SetAt($LG($LG(ListBuild, i),2), $LG($LG(ListBuild, i),1))
 q
]]></Implementation>
</Method>

<Method name="SetCSPList">
<Description>
Accepts list of CSP pages in next format:
$LB($LB(Name, FilePath), $LB(Name, FilePath), ...)
</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d ..CSPs.SetAt($LG($LG(ListBuild, i),2), $LG($LG(ListBuild, i),1))
 q
]]></Implementation>
</Method>

<Method name="SetClassesList">
<Description>
Accepts list of classes in next format:
$LB($LB(Name, FolderPath), $LB(Name, FolderPath), ...)
</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d ..Classes.SetAt($LG($LG(ListBuild, i),2), $LG($LG(ListBuild, i),1))
 q
]]></Implementation>
</Method>

<Method name="SetGlobalsList">
<Description>
Accepts list of globals in next format:
$LB(GlobalName1, GlobalName2, ...)
</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d ..Globals.SetAt("",$LG(ListBuild, i))
 q
]]></Implementation>
</Method>

<Method name="SetIconsList">
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d
 . s stream($lg(ListBuild,i))= ##class(%GlobalCharacterStream).%New()
 . d ..Icons.SetAt(stream($lg(ListBuild,i)),$LG(ListBuild,i))
]]></Implementation>
</Method>

<Method name="SetIncludesList">
<Description>
Accepts list of includes in next format:
$LB(IncludeName1, IncludeName2, ...)
</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d ..Includes.SetAt("",$LG(ListBuild,i))
 q
]]></Implementation>
</Method>

<Method name="SetPicturesList">
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d
 . s stream($lg(ListBuild,i))= ##class(%GlobalCharacterStream).%New()
 . d ..Images.SetAt(stream($lg(ListBuild,i)),$LG(ListBuild,i))
]]></Implementation>
</Method>

<Method name="SetRoutinesList">
<Description>
Accepts list of routines in next format:
$LB(RoutineName1, RoutineName2, ...)
</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i = 1:1:$LL(ListBuild) d ..Routines.SetAt("",$LG(ListBuild,i))
 q
]]></Implementation>
</Method>

<Method name="TS">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 New ext,ts,nm
 Set ext=$zconvert($piece(name,".",$length(name,".")),"l"),nm=$piece(name,".",1,$length(name,".")-1),ts=""
 If (ext="mac") {
 Set ts=$get(^rMAC(nm,0))
 } ElseIf (ext="int")||(ext="bas") {
 Set ts=$get(^ROUTINE(nm,0))
 } ElseIf ext="inc" {
 Set ts=$get(^rINC(nm,0))
 } ElseIf ext="csp"||(ext="csr") {
 Set nm=$$GetFilename^%apiCSP(name)
 If nm'="" Set ts=##class(%File).GetFileDateModified(nm)
 }
 Set $ztrap="TSERR"
 If ts'="" Set ts=$zdt(ts,3)
 Quit ts
TSERR Quit ""
]]></Implementation>
</Method>

<Method name="DrawClassInfo">
<Description>
w ##class(%Library.SMProject).DrawClassInfo()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   s Classobj=##class(%Dictionary.ClassDefinition).%OpenId(ClassName)
   q:Classobj="" ""
   ; |     (ColIndex(1)) = "Name"
   w "Name="_ClassName_""
   ; |     (ColIndex(2)) = "Super"
   if $d(^oddDEF(ClassName,60)) w ",Super="_$tr(^oddDEF(ClassName,60),",","|")_""
   e                            w ",Super="_""
   ; |     (ColIndex(3)) = "Hidden"
   if $d(^oddDEF(ClassName,32)),^oddDEF(ClassName,32)="1"  w " ,Hidden=Hidden"
   if $d(^oddDEF(ClassName,32)),^oddDEF(ClassName,32)="0" w " ,Hidden=Not_Hidden"
   if '$d(^oddDEF(ClassName,32)) w " ,Hidden="
   ; |     (ColIndex(4)) = "Datatype" 
   if $d(^oddDEF(ClassName,23)) w ",Datatype="_^oddDEF(ClassName,23)_""
   e                            w ",Datatype="_""
   ; |     (ColIndex(6)) = "Final"   
   if $d(^oddDEF(ClassName,7)),^oddDEF(ClassName,7)="1"  w " ,Final=Final"
   if $d(^oddDEF(ClassName,7)),^oddDEF(ClassName,7)="0"  w " ,Final=Not_Final"
   if '$d(^oddDEF(ClassName,7)) w " ,Final="
   ; |     (ColIndex(7)) = "Persistent"  
   if $d(^oddDEF(ClassName,23)),^oddDEF(ClassName,23)="Persistent"  w ",Persistent=Persistent"
   if $d(^oddDEF(ClassName,23)),^oddDEF(ClassName,23)'="Persistent" w ",Persistent=Not_Persistent"
   if '$d(^oddDEF(ClassName,23)) w " ,Persistent="
   ; |     (ColIndex(8)) = "Serial"     
   if $d(^oddDEF(ClassName,23)),^oddDEF(ClassName,23)="Serial"  w ",Serial=Serial"
   if $d(^oddDEF(ClassName,23)),^oddDEF(ClassName,23)'="Serial" w ",Serial=Not_Serial"
   if '$d(^oddDEF(ClassName,23)) w ",Serial="
   ; |     (ColIndex(9)) = "TimeChanged"
   ;  if $d(^oddDEF(ClassName,64)) w " ,TimeChanged="_^oddDEF(ClassName,64)_""
   ;  e                            w " ,TimeChanged="_$h_""
   ; |     (ColIndex(10)) = "SqlTableName"   
   if $d(^oddDEF(ClassName,58)) w " ,SqlTableName="_^oddDEF(ClassName,58)_""
   e                            w " ,SqlTableName="
   ; |     (ColIndex(11)) = "ProcedureBlock"   
   s sect=46
   if $d(^oddDEF(ClassName,sect)),^oddDEF(ClassName,sect)="1"  w ",ProcedureBlock=ProcedureBlock"
   if $d(^oddDEF(ClassName,sect)),^oddDEF(ClassName,sect)="0" w ",ProcedureBlock=Not_ProcedureBlock"
   if '$d(^oddDEF(ClassName,sect)) w ",ProcedureBlock="
   ; |     (ColIndex(12)) = "ClassType"   
   s sect=23
   if $d(^oddDEF(ClassName,sect))  w ",ClassType="_^oddDEF(ClassName,sect)
   if '$d(^oddDEF(ClassName,sect)) w ",ClassType="
   ; |     (ColIndex(13)) = "Abstract"   
   s sect=21
   if $d(^oddDEF(ClassName,sect)),^oddDEF(ClassName,sect)="1"  w ",Abstract=Abstract"
   if $d(^oddDEF(ClassName,sect)),^oddDEF(ClassName,sect)="0" w ",Abstract=Not_Abstract"
   if '$d(^oddDEF(ClassName,sect)) w ",Abstract="
   ; |     (ColIndex(14)) = "NoContext"   
   s sect=42 ; Р’РѕР·РјРѕР¶РЅРѕ РѕС€РёР±РєР°
   if $d(^oddDEF(ClassName,sect)), ^oddDEF(ClassName,sect)="1"  w ",NoContext=NoContext"
   if $d(^oddDEF(ClassName,sect)), ^oddDEF(ClassName,sect)="0"  w ",NoContext=Not_NoContext"
   if '$d(^oddDEF(ClassName,sect)) w ",NoContext="

   w ",CodeInc="_Classobj.IncludeCode
   w ",IsClassDataType="
   w ",GeneratorInc="_Classobj.IncludeGenerator
   w ",CompileAfter="_$tr(Classobj.CompileAfter ,",","|")
   w ",FStorageStrategy="_Classobj.StorageStrategy 
   ; | "System" 
   if $d(^oddDEF(ClassName,61)),^oddDEF(ClassName,61)="1"  w " ,IsSystem=System"
   if $d(^oddDEF(ClassName,61)),^oddDEF(ClassName,61)="0"  w " ,IsSystem=Not_System"
   if '$d(^oddDEF(ClassName,61)) w " ,IsSystem="
   w ",FSqlCategory="_Classobj.SqlCategory
   w ",FSqlRowIdName="_Classobj.SqlRowIdName
   w ",FSqlRowIdPrivate="_Classobj.SqlRowIdPrivate
   w ",FSqlTableName="_Classobj.SqlTableName
   w ",FIsDDLAllowed="_Classobj.DdlAllowed
   w ",Owner="_Classobj.Owner
   w ",PCount="_Classobj.Properties.Count()
   w ",MCount="_Classobj.Methods.Count()
   w ",QCount="_Classobj.Queries.Count()
   w ",PrCount="_Classobj.Parameters.Count()
   w ",ICount="_Classobj.Indices.Count()
   w ",StCount="_Classobj.Storages.Count()
   w ",TrCount="_Classobj.Triggers.Count()
   w ",FCount="_Classobj.ForeignKeys.Count()
   w ",XCount="_Classobj.XDatas.Count()
   w ",Language="_Classobj.Language
   w ",ClientDataType="_Classobj.ClientDataType
   w ",ODBCType="_Classobj.OdbcType
   w ",SQLRoutinePrefix="_Classobj.SqlRoutinePrefix
   w ",ViewQuery="_Classobj.ViewQuery
   w ",ClassDefinitionError="_Classobj.ClassDefinitionError
   w ",Import="_Classobj.Import
   w ",ModificationAuxiliary="_Classobj.ModificationAuxiliary
   w ",Name="_Classobj.Name
   w ",PropertyClass="_Classobj.PropertyClass
   w ",TimeChanged="_$Replace(Classobj.TimeChanged," ","_")
   w ",TimeCreated="_$Replace(Classobj.TimeCreated," ","_")
   w ",ProjectionsCount="_Classobj.Projections.Count()
   w ",UDLTextsCount="_Classobj.UDLTexts.Count()
   w ",IsClassDynamic="_Classobj.Dynamic
   w ",SoapBindingStyle="_Classobj.SoapBindingStyle
   w ",SoapBodyUse="_Classobj.SoapBodyUse
   
   w ",IncludeCode="_$tr(Classobj.IncludeCode,",","|")
   w ",IncludeGenerator="_$tr(Classobj.IncludeGenerator,",","|")
   w ",Import="_$tr(Classobj.Import,",","|")
   w ",CompileAfter="_$tr(Classobj.CompileAfter,",","|")
   
   
   
   q Classobj
]]></Implementation>
</Method>

<Method name="DrawMethodInfo">
<Description>
w ##class(%Library.SMProject).DrawMethodInfo()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassObj:%Dictionary.MethodDefinition=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	q:ClassObj="" ""
	q:'$isObject(ClassObj) ""
	w ",Name="_ClassObj.Name
    w ",IsMethodClassMethod="_ClassObj.ClassMethod
    w ",IsMethodPrivate="_ClassObj.Private
    w ",IsMethodFinal="_ClassObj.Final
    w ",IsMethodSQLProc="_ClassObj.SqlProc
    w ",ReturnType="_ClassObj.ReturnType
    w ",FormalSpec="_$REPLACE(ClassObj.FormalSpec," ","_")
    w ",CodeMode="_ClassObj.CodeMode
    w ",IsMethodClientMethod="_ClassObj.ClientMethod
    w ",AbstractMethod="_ClassObj.Abstract
    if ClassObj.ProcedureBlock=1 {   w ",isProcedureBlock=ProcedureBlock" }
    elseif ClassObj.ProcedureBlock=0  {  w ",isProcedureBlock=Not_ProcedureBlock" }
    else {  w ",isProcedureBlock=" }
    w ",AbstractMethod="_ClassObj.Abstract
    w ",AbstractMethod="_ClassObj.Abstract
    w ",SequenceNumber="_ClassObj.SequenceNumber
    w ",ServerOnly="_ClassObj.ServerOnly
    w ",SoapBindingStyle="_ClassObj.SoapBindingStyle
    w ",SoapBodyUse="_ClassObj.SoapBodyUse
    w ",SqlProc="_ClassObj.SqlProc
    w ",SoapNameSpace="_ClassObj.SoapNameSpace
    w ",GenerateAfter="_ClassObj.GenerateAfter
    w ",NotForProperty="_ClassObj.NotForProperty
    w ",NotInheritable="_ClassObj.NotInheritable
    w ",SQLName="_ClassObj.SqlName
    w ",PlaceAfter="_ClassObj.PlaceAfter
    w ",Language="_ClassObj.Language
    w ",ClientName="_ClassObj.ClientNam
    w ",WebMethod="_ClassObj.WebMethod
    w ",PublicList="_ClassObj.PublicList
    w ",Internal="_ClassObj.Internal
    q ""
]]></Implementation>
</Method>

<Method name="IsSMWrapForm">
<Description>
Проверка Является ли класс SMWrap формой
s isForm=##class(%Library.SMProject).IsSMWrapForm("%s")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName,60)) 0
   if $l(^oddDEF(ClassName,60),"%TMFormClass")>1          q 1
   if $l(^oddDEF(ClassName,60),"%Library.TMFormClass")>1  q 1
   s res=0
   for i=1:1:$l(^oddDEF(ClassName,60),",") {
         s SubClass=$p(^oddDEF(ClassName,60),",",i)
         if $l(SubClass,".")=1,$l(SubClass,"%")=2 s SubClass="%Library."_SubClass
         if $l(SubClass,".")=1                    s SubClass="User."_SubClass
         if $d(^oddDEF(SubClass)) {
             if $d(^oddDEF(SubClass,60)) { 
               if $l(^oddDEF(SubClass,60),"%Library.TMFormClass")>1   s res=1  q
             }   
         }
   }
   q res
]]></Implementation>
</Method>

<Method name="IsWebForm">
<Description>
Проверка Является ли класс Web формой
s isForm=##class(%Library.SMProject).IsWebForm("%s")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName,60)) 0
   if $l(^oddDEF(ClassName,60),"%TMWebFormClass")>1          q 1
   if $l(^oddDEF(ClassName,60),"%Library.TMWebFormClass")>1  q 1
   s res=0
   for i=1:1:$l(^oddDEF(ClassName,60),",") {
         s SubClass=$p(^oddDEF(ClassName,60),",",i)
         if $l(SubClass,".")=1,$l(SubClass,"%")=2 s SubClass="%Library."_SubClass
         if $l(SubClass,".")=1                    s SubClass="User."_SubClass
         if $d(^oddDEF(SubClass)) {
             if $d(^oddDEF(SubClass,60)) { 
               if $l(^oddDEF(SubClass,60),"%Library.TMWebFormClass")>1   s res=1  q
             }   
         }
   }
   q res
]]></Implementation>
</Method>

<Method name="DrawHierarchy">
<Description>
Выводит список классов в котором используется  указанный класс
d ##class(%Library.SMProject).DrawHierarchy("%s")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName))
   s ClassNameTmp="",CountRaw=0
   for {
	   s ClassNameTmp=$o(^oddDEF(ClassNameTmp))
	   q:ClassNameTmp=""
	   continue:'$d(^oddDEF(ClassNameTmp,60))
	   s Super=^oddDEF(ClassNameTmp,60)
	   if $l(","_Super,","_ClassName)>1 {
		   s CountRaw=CountRaw+1
		   w:CountRaw'=1 $c(13,10)
		   w ClassNameTmp
	   }
   } 
   q
]]></Implementation>
</Method>

<Method name="IsClassPersistent">
<Description>
Проверка Является ли хронимым классом 
s IsClassPersistent=##class(%Library.SMProject).IsClassPersistent("User.Tab")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName,60)) 0
   if $l(^oddDEF(ClassName,60),"%Persistent")>1          q 1
   if $l(^oddDEF(ClassName,60),"%Library.Persistent")>1  q 1
   s res=0
   for i=1:1:$l(^oddDEF(ClassName,60),",") {
         s SubClass=$p(^oddDEF(ClassName,60),",",i)
         s SubClass=$TR(SubClass," ","")
         if $l(SubClass,".")=1,$l(SubClass,"%")=2 s SubClass="%Library."_SubClass
         if $l(SubClass,".")=1                    s SubClass="User."_SubClass
         if $d(^oddDEF(SubClass)) {
             if $d(^oddDEF(SubClass,60)) { 
               if $l(^oddDEF(SubClass,60),"%Library.Persistent")>1   s res=1  q
             }   
         }
   }
   q res
]]></Implementation>
</Method>

<Method name="SaveRelationshipMethod">
<Description>
Сохранить информации о связи поля
d ##class(%Library.SMProject).SaveRelationshipMethod("User.Tab","SrcProperty","User.DstTabName","DSTPropertyName","CardinalitySrc","CardinalityDst")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",SelectRelationshipName="",RelationshipTable="",RelationshipTablePole="",RelationshipSvyazSrc="",RelationshipSvyazDst=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
 
       ; s RelationshipTypeHron =$zcvt(%request.Get("RelationshipTypeHron",""),"I","URL")
       ; s Internal =$zcvt(%request.Get("Internal",""),"I","URL")
       ; проверяем наличие поля на удаленной таблице
       s ttSub=##class(%Dictionary.ClassDefinition).%OpenId(RelationshipTable)
       if 'ttSub {  w "Table "_RelationshipTable_" not found" q}
       s isFoundPole=0
       for i=1:1:ttSub.Properties.Count()   q:isFoundPole=1  d
       . q:ttSub.Properties.GetAt(i).Name'=RelationshipTablePole
       . s isFoundPole=1
       if isFoundPole=0 {
	      w "Property "_RelationshipTablePole_" not found in table "_RelationshipTable_" " q
       }
       s tt=##class(%Dictionary.ClassDefinition).%OpenId(ClassName)
       if 'tt {  w "Table "_RelationshipTable_" not found" q}
       for i=1:1:tt.Properties.Count() d
       .  q:tt.Properties.GetAt(i).Name'=SelectRelationshipName
       .  s tt.Properties.GetAt(i).Collection=""
       .  s tt.Properties.GetAt(i).Cardinality = RelationshipSvyazSrc
       .  s tt.Properties.GetAt(i).Inverse = RelationshipTablePole
       .  s tt.Properties.GetAt(i).Type=RelationshipTable
       .
       .  for j=1:1:ttSub.Properties.Count() d
       .  .  q:ttSub.Properties.GetAt(j).Name'=RelationshipTablePole
       .  .  s ttSub.Properties.GetAt(j).Collection=""
       .  .  s ttSub.Properties.GetAt(j).Cardinality=RelationshipSvyazDst
       .  .  s ttSub.Properties.GetAt(j).Inverse = SelectRelationshipName
       .  .  s ttSub.Properties.GetAt(j).Relationship=1
       .  .  s ttSub.Properties.GetAt(j).Type=ClassName
       .  .  w ttSub.Properties.GetAt(j).%Save()
       .  
       .  w tt.Properties.GetAt(i).%Save(),!
       Quit
]]></Implementation>
</Method>

<Method name="ClearRelationshipMethod">
<Description>
d ##class(%Library.SMProject).ClearRelationshipMethod("User.Tab","SrcProperty")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>RelationshipTable="",RelationshipTablePole=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
   s ttSub=##class(%Dictionary.ClassDefinition).%OpenId(RelationshipTable)
   if 'ttSub {  w "Table "_RelationshipTable_" not found" q}
   s ClassDst=""
   s PropertyDST=""
   for j=1:1:ttSub.Properties.Count() d
   .  q:ttSub.Properties.GetAt(j).Name'=RelationshipTablePole
   .  s PropertyDST=ttSub.Properties.GetAt(j).Inverse
   .  s ClassDst=ttSub.Properties.GetAt(j).Type
   .  s ttSub.Properties.GetAt(j).Collection=""
   .  s ttSub.Properties.GetAt(j).Cardinality=""
   .  s ttSub.Properties.GetAt(j).Inverse = ""
   .  s ttSub.Properties.GetAt(j).Relationship=0
   .  ; s ttSub.Properties.GetAt(j).Type=ClassName
   .  s ttSub.Properties.GetAt(j).SqlComputeOnChange=""
   .  k ^oddDEF(RelationshipTable,"a",RelationshipTablePole,46)
   .  w ttSub.Properties.GetAt(j).%Save()
   
   if PropertyDST'="",ClassDst'="" {
      s ttSub=##class(%Dictionary.ClassDefinition).%OpenId(ClassDst)	   
      if ttSub { 
        for j=1:1:ttSub.Properties.Count() d
        .  q:ttSub.Properties.GetAt(j).Name'=PropertyDST
        .  if ttSub.Properties.GetAt(j).Relationship=1{
	    .    s ttSub.Properties.GetAt(j).Collection=""
        .    s ttSub.Properties.GetAt(j).Cardinality=""
        .    s ttSub.Properties.GetAt(j).Inverse = ""
        .    s ttSub.Properties.GetAt(j).Relationship=0
        .    s ttSub.Properties.GetAt(j).SqlComputeOnChange=""
        .    k ^oddDEF(ClassDst,"a",PropertyDST,46)
	    .  }      
        w ttSub.Properties.GetAt(j).%Save()
      }
      
   }
   
   q
]]></Implementation>
</Method>

<Method name="SaveSelectivity">
<Description>
d ##class(%Library.SMProject).SaveSelectivity("User.Tab","Default","fsdfsdfsd")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",StorageName="",Text="",ObjectClass=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
   for indLine=1:1:$l(Text,$c(13,10)) {
	  s line=$p(Text,$c(13,10),indLine)
	  continue:$L(line)=0
	  continue:$L(line,"=")=1
	  s nam=$p(line,"=",1)
	  continue:$L(nam)=0
	  s val=$p(line,"=",2)
	  continue:$L(val)=0
	  s ^oddDEF(ClassName,"s",StorageName,"M",nam)=""   
	  s ^oddDEF(ClassName,"s",StorageName,"M",nam,21)=val
   }	
 ;  if $isObject(ObjectClass){
 ;	  w ObjectClass.%Save() 
 ;  }
]]></Implementation>
</Method>

<Method name="DrawSelectivity">
<Description>
d ##class(%Library.SMProject).DrawSelectivity("User.Tab","Default")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",StorageName=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
	q:'$d(^oddDEF(ClassName,"s",StorageName,"M"))
	s count=0
	s SelName=""
	for {
       s SelName=$o(^oddDEF(ClassName,"s",StorageName,"M",SelName))
       q:SelName=""
       continue:'$d(^oddDEF(ClassName,"s",StorageName,"M",SelName,21))
       s count=count+1
       w:count'=1 $c(13,10)
       s val=^oddDEF(ClassName,"s",StorageName,"M",SelName,21)
       w SelName_"="_val
	}
	q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>SMProjectState</State>
<StreamLocation>^%Library.SMProjectS</StreamLocation>
<Data name="SMProjectState">
<Subscript>"%Library.SMProject"</Subscript>
<Value name="1">
<Value>AutoCreateForms</Value>
</Value>
<Value name="2">
<Value>CSPs</Value>
</Value>
<Value name="3">
<Value>Classes</Value>
</Value>
<Value name="4">
<Value>Globals</Value>
</Value>
<Value name="5">
<Value>HelpFile</Value>
</Value>
<Value name="6">
<Value>HookRoutine</Value>
</Value>
<Value name="7">
<Value>Icon</Value>
</Value>
<Value name="8">
<Value>Icons</Value>
</Value>
<Value name="9">
<Value>Images</Value>
</Value>
<Value name="10">
<Value>Includes</Value>
</Value>
<Value name="11">
<Value>Locale</Value>
</Value>
<Value name="12">
<Value>LogoImage</Value>
</Value>
<Value name="13">
<Value>LogoTime</Value>
</Value>
<Value name="14">
<Value>MainForm</Value>
</Value>
<Value name="15">
<Value>Name</Value>
</Value>
<Value name="16">
<Value>OldName</Value>
</Value>
<Value name="17">
<Value>PrePostRoutine</Value>
</Value>
<Value name="18">
<Value>Routines</Value>
</Value>
<Value name="19">
<Value>SingleInstance</Value>
</Value>
<Value name="20">
<Value>StringTables</Value>
</Value>
<Value name="21">
<Value>Title</Value>
</Value>
<Value name="22">
<Value>OldPicturesList</Value>
</Value>
<Value name="23">
<Value>PicturesDeleteList</Value>
</Value>
<Value name="24">
<Value>PicturesDeleted</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMApplication">
<Description><![CDATA[
This class represents the server-side image of a windows client application. It's methods and properties allow to control application running,  to handle exceptions, to process keystrokes, enabling online help and hotkeys.
<p>Note: Each SMWrap application automatically declares an MApplication variable as the oref of the application.
]]></Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73312</TimeCreated>

<Property name="Active">
<Description>
Read-only property. Contains "True" while the application is active, i.e., if the form or application has focus, and "False" in the opposite case.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AllowTesting">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BiDiMode">
<Description>
Specifies the bi-directional mode, controlling the direction in which text appears (left-to-right or right-to-left) and (optional) the default text alignment.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bdLeftToRight,bdRightToLeft,bdRightToLeftNoAlign,bdRightToLeftReadingOnly"/>
</Property>

<Property name="ClientState">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ClipboardText">
<Description><![CDATA[
Represents the text in the Windows Clipboard.<br>
Note: An attempt to read this property when the Clipboard contains no text, leads to an exception.
Use HasFormat to figure out, does the Clipboard contains text string(s).
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CrashReportCaption">
<Description>
Subject of bug report mail
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CrashReportEMailAddress">
<Description>
Bug report email address
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="CurrencyDecimals">
<Description>
Represents client-side setting for the number of digits after decimal point for currency values.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CurrencyFormat">
<Description><![CDATA[
Represents client-side setting for the currency format. Possible values:<br>
0 - string looks like "$1";<br>
1 - string looks like "1$";<br>
2 - string looks like "$ 1";<br>
3 - string looks like "1 $".
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CurrencyString">
<Description>
Represents client-side setting for the currency symbol.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DateSeparator">
<Description>
Represents client-side setting for the symbol separating days, months and years.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DecimalSeparator">
<Description>
Represents client-side setting for the national replacement of the decimal point.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Fonts">
<Description>
Represents the list of available screen fonts on the client side.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="HelpFile">
<Description>
Specifies the application Help file.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Hint">
<Description>
Contains the Hint value of menu or control item when the mouse is moving over it.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HintColor">
<Description>
Determines the hint box color. A default value is $$$clInfoBk.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HintHidePause">
<Description>
Determines the time interval (in milliseconds) before the hint box disappears if the mouse remains over the corresponding control. Default value is 2500.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HintPause">
<Description>
Determines the time interval (in milliseconds) before the hint box appears if the mouse pointer is placed over the corresponding control. Default value is 500.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HintShortCuts">
<Description>
Determines, does the hints include shortcut information. Possible values are "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HintShortPause">
<Description>
Determines the time interval (in milliseconds) before new hint box appears if another hint has been shown. Default value is 50.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Icon">
<Description>
Determines the icon representing current application on the Windows task bar.
</Description>
<Type>%Library.TMIcon</Type>
</Property>

<Property name="ListSeparator">
<Description>
Represents client-side setting for the symbol separating items in lists.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LongDateFormat">
<Description>
Represents client-side setting for long date format. May look like: ""dd/mm/yyyy"". For details see the '%TMStatusPanel.DateFormat' and '%TMStatusPanel.TimeFormat' descriptions.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LongTimeFormat">
<Description>
Represents client-side setting for long time format. May look like: ""h:mm:ss"". For details see the '%TMStatusPanel.DateFormat' and '%TMStatusPanel.TimeFormat' descriptions.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Name">
<Description>
Application name.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="NegCurrFormat">
<Description><![CDATA[
Represents client-side setting for the currency format used for negative amounts. Possible values:<br>
0 - string looks like "($1)";<br>
1 - string looks like "-$1";<br>
2 - string looks like "$-1";<br>
4 - string looks like "(1$)";<br>
5 - string looks like "-1$";<br>
6 - string looks like "1-$";<br>
7 - string looks like "1$-";<br>
8 - string looks like "-1 $";<br>
9 - string looks like "-$ 1";<br>
10 - string looks like "1 $-";<br>
11 - string looks like "$ 1-";<br>
12 - string looks like "$ -1";<br>
13 - string looks like "1- $";<br>
14 - string looks like "($ 1)";<br>
15 - string looks like "(1 $".
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnActivate">
<Description>
Handler of event occuring when application becomes active, i.e., after start or when focus is set on any window of this application.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDeactivate">
<Description>
Handler of event occuring when application becomes inactive, i.e., user switches to another application.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnException">
<Description>
Handler of any unhandled exception.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnHelp">
<Description>
Handler of event occuring when HelpCommand, HelpContext or HelpJump methos is called.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnHint">
<Description>
Handler of event occuring when mouse pointer moves over a control or menu item with ShowHint property set to 1 and non-empty Hint property.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnIdle">
<Description>
Handler of event occuring when application becomes idle.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMinimize">
<Description>
Handler of event occuring when application is minimized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRestore">
<Description>
Handler of event occurs when normal size of minimized application is restored.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ScreenCursor">
<Description>
Determines the mouse cursor shape. Default is $$$crDefault.  If set to any other value, all windows of this application will have the same cursor. Available values are listed in %Const.INC.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScreenHeight">
<Description>
Shows the vertical size (in pixels) of user part of the screen.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScreenPixelsPerInch">
<Description>
Shows the number of pixels per inch in the vertical direction.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScreenWidth">
<Description>
Shows the horizontal size (in pixels) of user part of the screen.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShortDateFormat">
<Description>
Represents client-side setting for short date format. May look like: ""dd/mm/yy"". For details see the '%TMStatusPanel.DateFormat' and '%TMStatusPanel.TimeFormat' descriptions.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShortTimeFormat">
<Description>
Represents client-side setting for short time format. May look like: ""hh:mm"". For details see the '%TMStatusPanel.DateFormat' and '%TMStatusPanel.TimeFormat' descriptions.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShowHint">
<Description>
Determines whether hints are enabled (if set to "True") or disabled (if set to "False") for the application. Overrides the corresponding properties of individual controls.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowMainForm">
<Description>
Determines, should the main form be shown (if set to 1, which is default value) or hidden (if set to 0) on the application startup.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tag">
<Description>
Arbitrary string associated with the application.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Terminated">
<Description>
Indicates that application is being terminated by the the Windows.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ThousandSeparator">
<Description>
Represents client-side setting for the symbol separating 3-digit groups in long numbers.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimeAMString">
<Description>
Represents client-side setting for the suffix for times before 12:00.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimePMString">
<Description>
Represents client-side setting for the suffix for times equal or later than 12:00.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimeSeparator">
<Description>
Represents client-side setting for the symbol separating hours, minutes and seconds.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Title">
<Description>
Contains the text that appears near the icon representing the application when it is minimized.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TwoDigitYearCenturyWindow">
<Description>
Represents client-side setting for the value to be subtracted from the current year to determine year,
before which 2-digit years should be considered as belonging to next century.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UpdateFormatSettings">
<Description>
Determines, should the formats be updated immediately after the regional settings reconfiguration.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UpdateMetricSettings">
<Description>
Determines, should the metrics be updated immediately after the display appearance reconfiguration.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" d ##this.Fonts.%Close() s ##this.Fonts=""""")
 $$$GENERATE(" d ##this.Icon.%Close() s ##this.Icon=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Fonts.%Close() s ..Fonts=""""")
 $$$GENERATE(" s ..Fonts=##class(%TMStrings).%New($lb(##this.Address,0,""Fonts""))")
 $$$GENERATE(" d ..Icon.%Close() s ..Icon=""""")
 $$$GENERATE(" s ..Icon=##class(%TMIcon).%New($lb(##this.Address,0,""Icon""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveGet">
<Description>
Method for getting 'Active' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Active")
 q tmp
]]></Implementation>
</Method>

<Method name="ActiveSet">
<Description>
Method for setting 'Active' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Active",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowTestingGet">
<Description>
Method for getting 'AllowTesting' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowTesting")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowTestingSet">
<Description>
Method for setting 'AllowTesting' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AllowTesting",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BiDiModeGet">
<Description>
Method for getting 'BiDiMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BiDiMode")
 q tmp
]]></Implementation>
</Method>

<Method name="BiDiModeSet">
<Description>
Method for setting 'BiDiMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("BiDiMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BringToFront">
<Description>
Moves  the last active window to the foreground. The window must be visible and enabled.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("BringToFront",$lb())
 q
]]></Implementation>
</Method>

<Method name="CancelHint">
<Description><![CDATA[
Cancels the hint displaying for controls.
<p>As a rule, used internally, in such cases as not vaild window or application termination.
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("CancelHint",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMApplication"
]]></Implementation>
</Method>

<Method name="ClientStateGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%ClientState
]]></Implementation>
</Method>

<Method name="ClientStateSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%ClientState=Value
 ; s %ZoMRi(2153)=""
 d ##this.SetProperty("ClientState",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClipboardTextGet">
<Description>
Method for getting 'ClipboardText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClipboardText")
 q tmp
]]></Implementation>
</Method>

<Method name="ClipboardTextSet">
<Description>
Method for setting 'ClipboardText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ClipboardText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CrashReportCaptionGet">
<Description>
Method for getting 'CrashReportCaption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("CrashReportCaption")
]]></Implementation>
</Method>

<Method name="CrashReportCaptionSet">
<Description>
Method for setting 'CrashReportCaption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("CrashReportCaption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CrashReportEMailAddressGet">
<Description>
Method for getting 'CrashReportEMailAddress' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("CrashReportEMailAddress")
]]></Implementation>
</Method>

<Method name="CrashReportEMailAddressSet">
<Description>
Method for setting 'CrashReportEMailAddress' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("CrashReportEMailAddress",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CurrencyDecimalsGet">
<Description>
Method for getting 'CurrencyDecimals' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("CurrencyDecimals")
]]></Implementation>
</Method>

<Method name="CurrencyDecimalsSet">
<Description>
Method for setting 'CurrencyDecimals' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("CurrencyDecimals",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CurrencyFormatGet">
<Description>
Method for getting 'CurrencyFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("CurrencyFormat")
]]></Implementation>
</Method>

<Method name="CurrencyFormatSet">
<Description>
Method for setting 'CurrencyFormat' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("CurrencyFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CurrencyStringGet">
<Description>
Method for getting 'CurrencyString' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("CurrencyString")
]]></Implementation>
</Method>

<Method name="CurrencyStringSet">
<Description>
Method for setting 'CurrencyString' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("CurrencyString",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DateSeparatorGet">
<Description>
Method for getting 'DateSeparator' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DateSeparator")
]]></Implementation>
</Method>

<Method name="DateSeparatorSet">
<Description>
Method for setting 'DateSeparator' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DateSeparator",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DecimalSeparatorGet">
<Description>
Method for getting 'DecimalSeparator' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DecimalSeparator")
]]></Implementation>
</Method>

<Method name="DecimalSeparatorSet">
<Description>
Method for setting 'DecimalSeparator' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DecimalSeparator",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExeName">
<Description>
Return full name of current client process.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("ExeName",$lb())
]]></Implementation>
</Method>

<Method name="Execute">
<Description>
Run new process on the client computer.
CmdLine specifies command line with arguments of new process
CurrDir specifies current directory for new process. If CurrDir is empty string, new process runs in current directory of SMWrap player.
Wait specifies timeout in milliseconds of waiting while new process terminates.
If Wait = 0, SMWrap player does not wait new process and return result immediately.
If Wait = -1, SMWrap player wait child process infinitely.

Return of this function is:
If Wait = 0, specifies "True" if child process run's successfully and in other case system's diagnostic message.
If Wait '= 0, specifies numeric value as child process's exit code or diagnostic message if waitnig filed.

For example, simple run:
s res=MAplication.Execute("notepad.exe")
and run and wait:
s res=MApplication.Execute("e:\program files\winrar\winrar.exe w:\filename.zip","",-1)
</Description>
<FormalSpec>CmdLine:%String,CurrDir:%String="",Wait:%Integer=0</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("Execute",$lb(CmdLine,CurrDir,Wait))
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Fonts.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Fonts,""Fonts"","""")_result")
 $$$GENERATE(" s result=result_..Icon.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Icon,""Icon"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetClientIP">
<Description>
Returns the client's IP-address.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetClientIP",$LB())
]]></Implementation>
</Method>

<Method name="GetLongDayNames">
<Description>
Returns client-side setting for the long name of day of week specified by Index (from 1 to 7).
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetLongDayNames",$LB(Index))
]]></Implementation>
</Method>

<Method name="GetLongMonthNames">
<Description>
Returns client-side setting for the long name of month specified by Index (from 1 to 12).
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetLongMonthNames",$LB(Index))
]]></Implementation>
</Method>

<Method name="GetShortDayNames">
<Description>
Returns client-side setting for the short name of day of week specified by Index (from 1 to 7).
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetShortDayNames",$lb(Index))
]]></Implementation>
</Method>

<Method name="GetShortMonthNames">
<Description>
Returns client-side setting for the short name of month specified by Index (from 1 to 12).
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetShortMonthNames",$lb(Index))
]]></Implementation>
</Method>

<Method name="HelpCommand">
<Description><![CDATA[
A wrapper function calling the OnHelp event.
<p>Parameters of this method are described in the WinHelp issue of the Windows Help system.
]]></Description>
<FormalSpec>Command:%Integer,Data:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.RunMethod("HelpCommand",$lb(Command,Data))
]]></Implementation>
</Method>

<Method name="HelpContext">
<Description><![CDATA[
This method calls the OnHelp event to display screen with the context help ID (passed in Context parameter) of the help file specified in the HelpFile property.
<p>Returns 0 if HelpFile value is empty string, else 1.
]]></Description>
<FormalSpec>Context:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.RunMethod("HelpContext",$lb(Context))
]]></Implementation>
</Method>

<Method name="HelpFileGet">
<Description>
Method for getting 'HelpFile' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpFile")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpFileSet">
<Description>
Method for setting 'HelpFile' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HelpFile",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpJump">
<Description><![CDATA[
This method calls the OnHelp event to display screen having the context string (passed in JumpID parameter) of the help file specified in the HelpFile property.
<p>Returns 0 if HelpFile value is empty string, else 1.
]]></Description>
<FormalSpec>JumpID:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.RunMethod("HelpJump",$lb(JumpID))
]]></Implementation>
</Method>

<Method name="HideHint">
<Description><![CDATA[
Hides the current hint.
<p>As a rule, used internally.
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("HideHint",$lb())
 q
]]></Implementation>
</Method>

<Method name="HintColorGet">
<Description>
Method for getting 'HintColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HintColor")
 q tmp
]]></Implementation>
</Method>

<Method name="HintColorSet">
<Description>
Method for setting 'HintColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HintColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintGet">
<Description>
Method for getting 'Hint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Hint")
 q tmp
]]></Implementation>
</Method>

<Method name="HintHidePauseGet">
<Description>
Method for getting 'HintHidePause' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HintHidePause")
 q tmp
]]></Implementation>
</Method>

<Method name="HintHidePauseSet">
<Description>
Method for setting 'HintHidePause' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HintHidePause",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintPauseGet">
<Description>
Method for getting 'HintPause' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HintPause")
 q tmp
]]></Implementation>
</Method>

<Method name="HintPauseSet">
<Description>
Method for setting 'HintPause' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HintPause",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintSet">
<Description>
Method for setting 'Hint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Hint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintShortCutsGet">
<Description>
Method for getting 'HintShortCuts' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HintShortCuts")
 q tmp
]]></Implementation>
</Method>

<Method name="HintShortCutsSet">
<Description>
Method for setting 'HintShortCuts' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HintShortCuts",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintShortPauseGet">
<Description>
Method for getting 'HintShortPause' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HintShortPause")
 q tmp
]]></Implementation>
</Method>

<Method name="HintShortPauseSet">
<Description>
Method for setting 'HintShortPause' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HintShortPause",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ListSeparatorGet">
<Description>
Method for getting 'ListSeparator' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ListSeparator")
]]></Implementation>
</Method>

<Method name="ListSeparatorSet">
<Description>
Method for setting 'ListSeparator' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ListSeparator",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LoadString">
<Description><![CDATA[
Returns the string from the stringtable defined in application project.<br>
The Id parameter contains string identifier, the Locale parameter, if defined, is the stringtable index.
If Locale is undefined, DefaultLocale value is used.
]]></Description>
<FormalSpec>Id:%String,Locale:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 q:..Name="" ""
 s:Locale="" Locale=$g(^SMProject(..Name,"MainLocale"),"")
 q:Locale="" ""
 q $g(^SMProject(..Name,"StringTables",Locale,Id),"")
]]></Implementation>
</Method>

<Method name="LongDateFormatGet">
<Description>
Method for getting 'LongDateFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("LongDateFormat")
]]></Implementation>
</Method>

<Method name="LongDateFormatSet">
<Description>
Method for setting 'LongDateFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("LongDateFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LongTimeFormatGet">
<Description>
Method for getting 'LongTimeFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("LongTimeFormat")
]]></Implementation>
</Method>

<Method name="LongTimeFormatSet">
<Description>
Method for setting 'LongTimeFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("LongTimeFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MessageBeep">
<Description>
The MessageBeep function plays a waveform sound. The waveform sound for each sound type is identified by an entry in the "sounds" section of the registry.

Parameters

- uType (Specifies the sound type, as identified by an entry in the "sounds" section of the registry. This parameter can be one of the following values:

Sound                                                                 Value
--------------------------------------------------------------------       -------------------------------
Standard beep using the computer speaker       0
SystemAsterisk                                                   $$$MBICONASTERISK
SystemExclamation                                            $$$MBICONEXCLAMATION
SystemHand                                                      $$$MBICONHAND
SystemQuestion                                                 $$$MBICONQUESTION
SystemDefault                                                    $$$MBOK

Return Values

If the function succeeds, the return value is "True"
If the function fails, the return value is "False"
</Description>
<FormalSpec>uType:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.RunMethod("MessageBeep",$lb(uType))
]]></Implementation>
</Method>

<Method name="MessageBox">
<Description><![CDATA[
Displays dialog box with specified Caption (optional) and Text and with a set of buttons depending on
the  Flags parameter.
<p>The possible values of the Flags parameter are listed in <i>%Const.INC</i>, their values can be added to obtain the desired effect.
<p>Returns:
<p>
<table cols=2>
<tr>
<td width="10%" valign="top"> <i>0:</i></td>
<td valign="top"> Could not create message box.</td>
</tr><tr>
<td valign="top"> <i>1:</i></td>
<td valign="top"> &quot;OK&quot; button pressed.</td>
</tr><tr>
<td valign="top"> <i>2:</i></td>
<td valign="top"> &quot;Cancel&quot; button pressed.</td>
</tr><tr>
<td valign="top"> <i>3:</i></td>
<td valign="top"> &quot; Abort&quot; button pressed.</td>
</tr><tr>
<td valign="top"> <i>4:</i></td>
<td valign="top"> &quot;Retry&quot; button pressed.</td>
</tr><tr>
<td valign="top"> <i>5:</i></td>
<td valign="top"> &quot;Ignore&quot; button pressed.</td>
</tr><tr>
<td valign="top"> <i>6:</i></td>
<td valign="top"> &quot;Yes&quot; button pressed.</td>
</tr><tr>
<td valign="top"> <i>7:</i></td>
<td valign="top"> &quot;No&quot; button pressed.</td>
</tr>
</table>
]]></Description>
<FormalSpec>Text:%String,Caption:%String,Flags:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.RunMethod("MessageBox",$lb(Text,Caption,Flags))
]]></Implementation>
</Method>

<Method name="Minimize">
<Description>
Shrinks an application to the taskbar.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("Minimize",$lb())
 q
]]></Implementation>
</Method>

<Method name="NegCurrFormatGet">
<Description>
Method for getting 'NegCurrFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("NegCurrFormat")
]]></Implementation>
</Method>

<Method name="NegCurrFormatSet">
<Description>
Method for setting 'NegCurrFormat' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("NegCurrFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NormalizeAllTopMosts">
<Description>
Unset "Always on Top" property for all forms, including the main window.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("NormalizeAllTopMosts",$lb())
 q
]]></Implementation>
</Method>

<Method name="NormalizeTopMosts">
<Description>
Unset "Always on Top" property for all forms, excluding the main window.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("NormalizeTopMosts",$lb())
 q
]]></Implementation>
</Method>

<Method name="OnActivateGet">
<Description>
Method for getting 'OnActivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnActivate
]]></Implementation>
</Method>

<Method name="OnActivateSet">
<Description>
Method for setting 'OnActivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnActivate=Value
 d ##this.SetEvent("OnActivate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDeactivateGet">
<Description>
Method for getting 'OnDeactivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDeactivate
]]></Implementation>
</Method>

<Method name="OnDeactivateSet">
<Description>
Method for setting 'OnDeactivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDeactivate=Value
 d ##this.SetEvent("OnDeactivate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnExceptionGet">
<Description>
Method for getting 'OnException' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnException
]]></Implementation>
</Method>

<Method name="OnExceptionSet">
<Description>
Method for setting 'OnException' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnException=Value
 d ##this.SetEvent("OnException",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHelpGet">
<Description>
Method for getting 'OnHelp' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHelp
]]></Implementation>
</Method>

<Method name="OnHelpSet">
<Description>
Method for setting 'OnHelp' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHelp=Value
 d ##this.SetEvent("OnHelp",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHintGet">
<Description>
Method for getting 'OnHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHint
]]></Implementation>
</Method>

<Method name="OnHintSet">
<Description>
Method for setting 'OnHint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHint=Value
 d ##this.SetEvent("OnHint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnIdleGet">
<Description>
Method for getting 'OnIdle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnIdle
]]></Implementation>
</Method>

<Method name="OnIdleSet">
<Description>
Method for setting 'OnIdle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnIdle=Value
 d ##this.SetEvent("OnIdle",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMinimizeGet">
<Description>
Method for getting 'OnMinimize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMinimize
]]></Implementation>
</Method>

<Method name="OnMinimizeSet">
<Description>
Method for setting 'OnMinimize' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMinimize=Value
 d ##this.SetEvent("OnMinimize",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRestoreGet">
<Description>
Method for getting 'OnRestore' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRestore
]]></Implementation>
</Method>

<Method name="OnRestoreSet">
<Description>
Method for setting 'OnRestore' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRestore=Value
 d ##this.SetEvent("OnRestore",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ProcessMessages">
<Description>
Interrupts the application execution to permit Windows to respond to events. Recommended
to call this method in lengthy operations.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("ProcessMessages",$lb())
 q
]]></Implementation>
</Method>

<Method name="Restore">
<Description>
Restores minimized application to its previous size.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("Restore",$lb())
 q
]]></Implementation>
</Method>

<Method name="RestoreTopMosts">
<Description>
Restores forms with FormStyle "fsStayOnTop" to be always on top again after NormailzeTopMosts method call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("RestoreTopMosts",$lb())
 q
]]></Implementation>
</Method>

<Method name="ScreenCursorGet">
<Description>
Method for getting 'ScreenCursor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScreenCursor")
 q tmp
]]></Implementation>
</Method>

<Method name="ScreenCursorSet">
<Description>
Method for setting 'ScreenCursor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ScreenCursor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScreenHeightGet">
<Description>
Method for getting 'ScreenHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScreenHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ScreenHeightSet">
<Description>
Method for setting 'ScreenHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ScreenHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScreenPixelsPerInchGet">
<Description>
Method for getting 'ScreenPixelsPerInch' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScreenPixelsPerInch")
 q tmp
]]></Implementation>
</Method>

<Method name="ScreenPixelsPerInchSet">
<Description>
Method for setting 'ScreenPixelsPerInch' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ScreenPixelsPerInch",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScreenWidthGet">
<Description>
Method for getting 'ScreenWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScreenWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ScreenWidthSet">
<Description>
Method for setting 'ScreenWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ScreenWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetLongDayNames">
<Description>
Sets client-side setting for the long name of day of week specified by Index (from 1 to 7).
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=..RunMethod("SetLongDayNames",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetLongMonthNames">
<Description>
Sets client-side setting for the long name of month specified by Index (from 1 to 12).
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=..RunMethod("SetLongMonthNames",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetShortDayNames">
<Description>
Sets client-side setting for the short name of day of week specified by Index (from 1 to 7).
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=..RunMethod("SetShortDayNames",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetShortMonthNames">
<Description>
Sets client-side setting for the short name of month specified by Index (from 1 to 12).
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetShortMonthNames",$LB(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="ShortDateFormatGet">
<Description>
Method for getting 'ShortDateFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ShortDateFormat")
]]></Implementation>
</Method>

<Method name="ShortDateFormatSet">
<Description>
Method for setting 'ShortDateFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ShortDateFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShortTimeFormatGet">
<Description>
Method for getting 'ShortTimeFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ShortTimeFormat")
]]></Implementation>
</Method>

<Method name="ShortTimeFormatSet">
<Description>
Method for setting 'ShortDateFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ShortTimeFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowHintGet">
<Description>
Method for getting 'ShowHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowHint")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowHintSet">
<Description>
Method for setting 'ShowHint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ShowHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowMainFormGet">
<Description>
Method for getting 'ShowMainForm' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowMainForm")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowMainFormSet">
<Description>
Method for setting 'ShowMainForm' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ShowMainForm",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowWatch">
<Description>
This method shows system window with list of local variables (except %obj) and objects. Window is shown in modal mode. In this window programmer can change value of variable, add new or kill available one. Process execution stops until watch window is closed.

The same window can be showed at any time by pressing CTRL+SHIFT+F8 in modeless mode without stopping process execution.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("ShowWatch",$lb())
 q $$$OK
]]></Implementation>
</Method>

<Method name="Terminate">
<Description>
Terminates application execution.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("Terminate",$lb())
 q
]]></Implementation>
</Method>

<Method name="TerminatedGet">
<Description>
Method for getting 'Terminated' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Terminated")
 q tmp
]]></Implementation>
</Method>

<Method name="TerminatedSet">
<Description>
Method for setting 'Terminated' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Terminated",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ThousandSeparatorGet">
<Description>
Method for getting 'ThousandSeparator' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ThousandSeparator")
]]></Implementation>
</Method>

<Method name="ThousandSeparatorSet">
<Description>
Method for setting 'ThousandSeparator' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ThousandSeparator",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TimeAMStringGet">
<Description>
Method for getting 'TimeAMString' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("TimeAMString")
]]></Implementation>
</Method>

<Method name="TimeAMStringSet">
<Description>
Method for setting 'TimeAMString' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("TimeAMString",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TimePMStringGet">
<Description>
Method for getting 'TimePMString' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("TimePMString")
]]></Implementation>
</Method>

<Method name="TimePMStringSet">
<Description>
Method for setting 'TimePMString' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("TimePMString",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TimeSeparatorGet">
<Description>
Method for getting 'TimeSeparator' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("TimeSeparator")
]]></Implementation>
</Method>

<Method name="TimeSeparatorSet">
<Description>
Method for setting 'TimeSeparator' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("TimeSeparator",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleGet">
<Description>
Method for getting 'Title' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Title")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSet">
<Description>
Method for setting 'Title' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Title",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Trace">
<Description>
Sends interprocess message to be handled and displayed by SMWrap Event Log application.
</Description>
<FormalSpec>Message:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n ts,s,ms
 s ts=$p($ZTIMESTAMP,",",2),s=$p(ts,"."),ms=$p(ts,".",2)
 d SendMsg^%ZMRASD("DEBUGEVENT",$lb($ZTIME(s)_"."_ms,..Name,Message))
 q
]]></Implementation>
</Method>

<Method name="TwoDigitYearCenturyWindowGet">
<Description>
Method for getting 'TwoDigitYearCenturyWindow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("TwoDigitYearCenturyWindow")
]]></Implementation>
</Method>

<Method name="TwoDigitYearCenturyWindowSet">
<Description>
Method for setting 'TwoDigitYearCenturyWindow' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("TwoDigitYearCenturyWindow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateFormatSettingsGet">
<Description>
Method for getting 'UpdateFormatSettings' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UpdateFormatSettings")
 q tmp
]]></Implementation>
</Method>

<Method name="UpdateFormatSettingsSet">
<Description>
Method for setting 'UpdateFormatSettings' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("UpdateFormatSettings",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateMetricSettingsGet">
<Description>
Method for getting 'UpdateMetricSettings' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UpdateMetricSettings")
 q tmp
]]></Implementation>
</Method>

<Method name="UpdateMetricSettingsSet">
<Description>
Method for setting 'UpdateMetricSettings' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("UpdateMetricSettings",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>ClientState</Value>
</Value>
<Value name="9">
<Value>Fonts</Value>
</Value>
<Value name="10">
<Value>Icon</Value>
</Value>
<Value name="11">
<Value>Name</Value>
</Value>
<Value name="12">
<Value>OnActivate</Value>
</Value>
<Value name="13">
<Value>OnDeactivate</Value>
</Value>
<Value name="14">
<Value>OnException</Value>
</Value>
<Value name="15">
<Value>OnHelp</Value>
</Value>
<Value name="16">
<Value>OnHint</Value>
</Value>
<Value name="17">
<Value>OnIdle</Value>
</Value>
<Value name="18">
<Value>OnMinimize</Value>
</Value>
<Value name="19">
<Value>OnRestore</Value>
</Value>
<Value name="20">
<Value>CrashReportCaption</Value>
</Value>
<Value name="21">
<Value>CrashReportEMailAddress</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMAreaSeries">
<Description>
This class is derived from %TMCustomSeries and contains additional properties and methods allowing to draw line through the series points and fill the area between the line and the chart bottom.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMCustomSeries</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="MultiArea">
<Description><![CDATA[
Determines, how the multiple series belonging to the same chart should be drawn. Possible values:<br>
"maNone" - next series behind the previous one;<br>
"maStacked" - next series on top of the previous one;<br>
"maStacked100" - next series on top of the previous one, adjusting individual points to the (0-100) scale.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",maNone,maStacked,maStacked100"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMAreaSeries"
]]></Implementation>
</Method>

<Method name="MultiAreaGet">
<Description>
Method for getting 'MultiArea' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiArea")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiAreaSet">
<Description>
Method for setting 'MultiArea' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiArea",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMArrowSeries">
<Description>
Represents chart points as a set of arrows.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPointSeries</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="ArrowHeight">
<Description>
Determines the vertical size (in pixels) of arrow head.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ArrowWidth">
<Description>
Determines the horizontal size (in pixels) of arrow head.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EndXValues">
<Description>
Contains oref of %TMChartValueList object with horizontal ending coordinates of arrows.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="EndYValues">
<Description>
Contains oref of %TMChartValueList object with vertical ending coordinates of arrows.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="StartXValues">
<Description>
Contains oref of %TMChartValueList object with horizontal starting coordinates of arrows.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="StartYValues">
<Description>
Contains oref of %TMChartValueList object with vertical starting coordinates of arrows.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" d ##this.EndXValues.%Close() s ##this.EndXValues=""""")
 $$$GENERATE(" d ##this.EndYValues.%Close() s ##this.EndYValues=""""")
 $$$GENERATE(" d ##this.StartXValues.%Close() s ##this.StartXValues=""""")
 $$$GENERATE(" d ##this.StartYValues.%Close() s ##this.StartYValues=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" d ##class(=%TMPointSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" d ##class(=%TMPointSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.EndXValues.%Close() s ##this.EndXValues=""""")
 $$$GENERATE(" s ##this.EndXValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""EndXValues""))")
 $$$GENERATE(" d ##this.EndYValues.%Close() s ##this.EndYValues=""""")
 $$$GENERATE(" s ##this.EndYValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""EndYValues""))")
 $$$GENERATE(" d ##this.StartXValues.%Close() s ##this.StartXValues=""""")
 $$$GENERATE(" s ##this.StartXValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""StartXValues""))")
 $$$GENERATE(" d ##this.StartYValues.%Close() s ##this.StartYValues=""""")
 $$$GENERATE(" s ##this.StartYValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""StartYValues""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddArrow">
<FormalSpec>X0:%Float,Y0:%Float,X1:%Float,Y1:%Float,ALabel:%String,AColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddArrow",$lb(X0,Y0,X1,Y1,ALabel,AColor))
 q tmp
]]></Implementation>
</Method>

<Method name="ArrowHeightGet">
<Description>
Method for getting 'ArrowHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ArrowHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ArrowHeightSet">
<Description>
Method for setting 'ArrowHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ArrowHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ArrowWidthGet">
<Description>
Method for getting 'ArrowWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ArrowWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ArrowWidthSet">
<Description>
Method for setting 'ArrowWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ArrowWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMArrowSeries"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" s result=##class(=%TMPointSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..EndXValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..EndXValues,""EndXValues"","""")_result")
 $$$GENERATE(" s result=result_..EndYValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..EndYValues,""EndYValues"","""")_result")
 $$$GENERATE(" s result=result_..StartXValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..StartXValues,""StartXValues"","""")_result")
 $$$GENERATE(" s result=result_..StartYValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..StartYValues,""StartYValues"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>AreaLinesPen</Value>
</Value>
<Value name="24">
<Value>LinePen</Value>
</Value>
<Value name="25">
<Value>OnClickPointer</Value>
</Value>
<Value name="26">
<Value>OnGetPointerStyle</Value>
</Value>
<Value name="27">
<Value>Pointer</Value>
</Value>
<Value name="28">
<Value>EndXValues</Value>
</Value>
<Value name="29">
<Value>EndYValues</Value>
</Value>
<Value name="30">
<Value>StartXValues</Value>
</Value>
<Value name="31">
<Value>StartYValues</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMAsync">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="Kind">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",okWrite,okRead"/>
</Property>

<Property name="Size">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMAsync"
]]></Implementation>
</Method>

<Method name="KindGet">
<Description>
Method for getting 'Kind' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Kind")
 q tmp
]]></Implementation>
</Method>

<Method name="KindSet">
<Description>
Method for setting 'Kind' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Kind",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("Size")
]]></Implementation>
</Method>

<Method name="SizeSet">
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMBarSeries">
<Description>
Represents chart data as a set of vertical bars.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMCustomBarSeries</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="CustomBarWidth">
<Description>
Determines the fixed (unchanged when zooming) width of bars (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="AddBar">
<Description>
Adds new bar with specified value, text and color to the series. Returns index of added bar.
</Description>
<FormalSpec>Value:%Float,Text:%String,Color:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddBar",$lb(Value,Text,Color))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMBarSeries"
]]></Implementation>
</Method>

<Method name="CustomBarWidthGet">
<Description>
Method for getting 'CustomBarWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CustomBarWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="CustomBarWidthSet">
<Description>
Method for setting 'CustomBarWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CustomBarWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetOriginPos">
<Description>
Returns the screen coordinate of the specified bar starting point.
</Description>
<FormalSpec>ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetOriginPos",$lb(ValueIndex))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMBevel">
<Description>
This class allows to display beveled lines and frames.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="Shape">
<Description><![CDATA[
Specifies the bevel appearance. Possible values:<br>
"bsBox" - the entire client area is beveled;<br>
"bsFrame" - the client area outline is beveled;<br>
"bsTopLine" -  the top edge of client area is beveled;<br>
"bsBottomLine" - the bottom edge of client area is beveled;<br>
"bsLeftLine" - the left edge of client area is beveled;<br>
"bsRightLine" - the right edge of client area is beveled;<br>
"bsSpacer" - use an empty space as a bevel.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsBox,bsFrame,bsTopLine,bsBottomLine,bsLeftLine,bsRightLine,bsSpacer"/>
</Property>

<Property name="Style">
<Description>
Specifies, should the bevel be raised (if set to "bsRaised") or lowered (if set to "bsLowered").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsLowered,bsRaised"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMBevel"
]]></Implementation>
</Method>

<Method name="ShapeGet">
<Description>
Method for getting 'Shape' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Shape")
 q tmp
]]></Implementation>
</Method>

<Method name="ShapeSet">
<Description>
Method for setting 'Shape' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Shape",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMBitmap">
<Description>
Represents the server-side image a Windows bitmap object and its palette. Contains methods for creating and manipulating images.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMGraphic</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="Canvas">
<Description>
Read only. Contains oref on %TMCanvas object which may be used for the bitmap modifications.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Data">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Handle">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HandleType">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bmDIB,bmDDB"/>
</Property>

<Property name="IgnorePalette">
<Description>
Determines, should the palette associated with bitmap be used when the image drawing (if set to "False") or not (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaskHandle">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Monochrome">
<Description>
Determines, should the bitmap be displayed as monochrome image (if set to "True") or in color (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PixelFormat">
<Description><![CDATA[
Determines, the bit format the bitmap image is displayed.
<p><b>Description</b>
Determines bit format in which the bitmap image should be displayed. Possible values:
"pfDevice", "pf1bit", "pf4bit" ,"pf8bit", "pf15bit", "pf16bit", "pf24bit", "pf32bit" or "pfCustom".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",pfDevice,pf1bit,pf4bit,pf8bit,pf15bit,pf16bit,pf24bit,pf32bit,pfCustom"/>
</Property>

<Property name="StreamData">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TransparentColor">
<Description>
Determines the color considered as transparent when the bitmap drawing. If the TransparentMode value is "tmAuto", this property contains the color of the bottom left pixel of the bitmap. Direct setting this property changes the TransparentMode to "tmFixed".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TransparentMode">
<Description>
See TransparentColor description.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tmAuto,tmFixed"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMGraphic")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMGraphic")
 e  $$$GENERATE(" d ##class(=%TMGraphic)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMGraphic")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMGraphic")
 e  $$$GENERATE(" d ##class(=%TMGraphic)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMBitmap"
]]></Implementation>
</Method>

<Method name="DataGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Data")
]]></Implementation>
</Method>

<Method name="DataSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ..SetProperty("Data",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="Dormant">
<Description>
Creates a bitmap image in memory using the memory stream object, reducing the consumption of GDI resources.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Dormant",$lb())
 q
]]></Implementation>
</Method>

<Method name="FreeImage">
<Description>
Reduce the memory consumption at the expense of loosing the color depth.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FreeImage",$lb())
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMGraphic")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMGraphic")
 e  $$$GENERATE(" s result=##class(=%TMGraphic)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HandleGet">
<Description>
Method for getting 'Handle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Handle")
 q tmp
]]></Implementation>
</Method>

<Method name="HandleSet">
<Description>
Method for setting 'Handle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Handle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HandleTypeGet">
<Description>
Method for getting 'HandleType' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HandleType")
 q tmp
]]></Implementation>
</Method>

<Method name="HandleTypeSet">
<Description>
Method for setting 'HandleType' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("HandleType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IgnorePaletteGet">
<Description>
Method for getting 'IgnorePalette' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("IgnorePalette")
 q tmp
]]></Implementation>
</Method>

<Method name="IgnorePaletteSet">
<Description>
Method for setting 'IgnorePalette' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("IgnorePalette",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LoadFromClipboard">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("LoadFromClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="Mask">
<Description>
Replaces the specified TransparentColor with white and all other colors with black, converting the current bitmap into a monochrome image.
</Description>
<FormalSpec>TransparentColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Mask",$lb(TransparentColor))
 q
]]></Implementation>
</Method>

<Method name="MaskHandleGet">
<Description>
Method for getting 'MaskHandle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaskHandle")
 q tmp
]]></Implementation>
</Method>

<Method name="MaskHandleSet">
<Description>
Method for setting 'MaskHandle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("MaskHandle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MonochromeGet">
<Description>
Method for getting 'Monochrome' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Monochrome")
 q tmp
]]></Implementation>
</Method>

<Method name="MonochromeSet">
<Description>
Method for setting 'Monochrome' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Monochrome",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PixelFormatGet">
<Description>
Method for getting 'PixelFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PixelFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="PixelFormatSet">
<Description>
Method for setting 'PixelFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("PixelFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReleaseHandle">
<Description>
Deletes association between the bitmap and its handle.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReleaseHandle",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ReleaseMaskHandle">
<Description>
Deletes association between the bitmap and its mask handle.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReleaseMaskHandle",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ReleasePalette">
<Description>
Deletes association between the bitmap and its palette.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReleasePalette",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="SaveToClipboard">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SaveToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="StreamDataGet">
<Description>
Method for getting 'StreamData' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("StreamData")
]]></Implementation>
</Method>

<Method name="StreamDataSet">
<Description>
Method for setting 'StreamData' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ..SetProperty("StreamData",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentColorGet">
<Description>
Method for getting 'TransparentColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TransparentColor")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentColorSet">
<Description>
Method for setting 'TransparentColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("TransparentColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentModeGet">
<Description>
Method for getting 'TransparentMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TransparentMode")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentModeSet">
<Description>
Method for setting 'TransparentMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("TransparentMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnChange</Value>
</Value>
<Value name="9">
<Value>OnProgress</Value>
</Value>
<Value name="10">
<Value>Canvas</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMBrush">
<Description>
Represents the color and pattern to fill shapes.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="Color">
<Description>
Determines the color used to draw the pattern.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring immediately after the brush object changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Style">
<Description>
Determines the pattern for the brush. Possible values: "bsSolid", "bsClear", "bsHorizontal", "bsVertical", "bsFDiagonal", "bsBDiagonal", "bsCross" or "bsDiagCross". If set to "bsClear", the value of the Color property is not used and can not be changed.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsSolid,bsClear,bsHorizontal,bsVertical,bsFDiagonal,bsBDiagonal,bsCross,bsDiagCross"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this brush.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMBrush"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMBubbleSeries">
<Description>
Represents chart data as a set of circles of various radii and colors.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPointSeries</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="RadiusValues">
<Description>
Contains oref of %TMChartValueList containing radii of the circles in the collection.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="Squared">
<Description>
Determines, are the bubble sizes depending on the 'RadiusValues' property (if set to "True", default value) or on X- and YValues and the axis scale (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" d ##class(=%TMPointSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" d ##class(=%TMPointSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.RadiusValues.%Close()")
 $$$GENERATE(" s ##this.RadiusValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""RadiusValues""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddBubble">
<Description>
Adds new bubble with specified X- and YValues, radius, label and color to the series. Returns index of added bubble.
</Description>
<FormalSpec>AX:%Float,AY:%Float,ARadius:%Float,AXLabel:%String,AColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddBubble",$lb(AX,AY,ARadius,AXLabel,AColor))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMBubbleSeries"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" s result=##class(=%TMPointSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..RadiusValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..RadiusValues,""RadiusValues"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="SquaredGet">
<Description>
Method for getting 'Squared' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Squared")
 q tmp
]]></Implementation>
</Method>

<Method name="SquaredSet">
<Description>
Method for setting 'Squared' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Squared",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>AreaLinesPen</Value>
</Value>
<Value name="24">
<Value>LinePen</Value>
</Value>
<Value name="25">
<Value>OnClickPointer</Value>
</Value>
<Value name="26">
<Value>OnGetPointerStyle</Value>
</Value>
<Value name="27">
<Value>Pointer</Value>
</Value>
<Value name="28">
<Value>RadiusValues</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMButton">
<Description>
This class represents the server-side image of a windows push button. It's methods and properties allow to control button appearance and behaviour.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73313</TimeCreated>

<Property name="Cancel">
<Description>
Determines, should the OnClick event for this button occur when the Escape key is pressed. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Default">
<Description>
Determines, should the OnClick event for this button occur when the Enter key is pressed and focus is not set on another button. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ModalResult">
<Description>
For modal forms, if the value of this property is not empty, clicking the button closes the form and sets the  ModalResult property of the parent form to this value.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="CancelGet">
<Description>
Method for getting 'Cancel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Cancel")
 q tmp
]]></Implementation>
</Method>

<Method name="CancelSet">
<Description>
Method for setting 'Cancel' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Cancel",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMButton"
]]></Implementation>
</Method>

<Method name="DefaultGet">
<Description>
Method for getting 'Default' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Default")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultSet">
<Description>
Method for setting 'Default' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Default",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModalResultGet">
<Description>
Method for getting 'ModalResult' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ModalResult")
 q tmp
]]></Implementation>
</Method>

<Method name="ModalResultSet">
<Description>
Method for setting 'ModalResult' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ModalResult",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMButtonGrid">
<Description>
Variation of %TMRxDrawGrid class with slightly reduced set of properties and added capabitily to assign objects to grid rows.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73314</TimeCreated>

<Property name="BorderStyle">
<Description><![CDATA[
Determines the appearance of the grid border. Possible values:<br>
"bsSingle" - single-line border (not resizeable).<br>
"bsNone" - no border (not resizeable).<br>
"bsDialog" - usual dialog box border (not resizeable).<br>
"bsSizeable" - usual resizeable border.<br>
"bsToolWindow" - 	single-line border, smaller caption (not resizeable).<br>
"bsSizeToolWin" - usual resizeable border, smaller caption.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of %TMCanvas object to be used to display owner-drawn items.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Col">
<Description>
Contains column number of currently selected cell or nonsense value if rows rather than cells are selectable.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColCount">
<Description>
Contains number of columns in the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColWidths">
<Description>
Contains Cache' list ($lb()) built from widths of columns (in pixels).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Columns">
<Description>
Contains oref of %TMGridColumns providing interface to the set of columns.
</Description>
<Type>%Library.TMGridColumns</Type>
</Property>

<Property name="DefaultColWidth">
<Description>
Contains default width (in pixels) of a column of the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultDrawing">
<Description>
If set to "False", the 'OnDrawCell" event will occur when a cell needs to be drawn. If set to "True", cells will be drawn in default manner.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultRowHeight">
<Description>
Contains default height (in pixels) of a row of the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Delimiter">
<Description>
Determines value of delimiter for separation string into cells values.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="EditorMode">
<Description>
Contains "True" if the grid is currently edited by user, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedButtons">
<Description>
If set to "True", fixed cells in the grid header can be clicked as buttons, if set to "False" - not.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedColor">
<Description>
Determines background color of the grid header (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedCols">
<Description>
Determines the number of "fixed" (i.e., non-scrollable, looking like a grid header, but arranged in the left hand side of grid) columns. Default value is 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedRows">
<Description>
Determines the number of "fixed" (i.e., non-scrollable, looking like a grid header) rows. Default value is 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridHeight">
<Description>
Represents the grid client area height (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridLineWidth">
<Description>
Determines the thickness of grid line (in pixels, default value is 1).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridWidth">
<Description>
Represents the grid client area width (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="InUpdate">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
</Property>

<Property name="LeftCol">
<Description>
Represents the number of the leftmost visible column of the grid. The columns numeration starts from 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnAcceptEditKey">
<Description>
Handler of event occuring when the character entered in a cell requires validation.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCancelEdit">
<Description>
Handler of event occuring when the user cancels cell editing.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChangeFocus">
<Description>
Handler of event occuring when the focus moves to another cell.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCheckButton">
<Description>
Handler of event occuring when 'Enable' status of a fixed cell is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClearGrid">
<Description>
Handler of event occuring when the 'ClearGrid' method is called.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnColumnMoved">
<Description>
Handler of event occuring when the user moved a grid column.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnColumnSized">
<Description>
Handler of event occuring when a column has been 1st time resized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawCell">
<Description>
Handler of event occuring when a cell needs to be drawn while 'DefaultDrawing' property is set to "False".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditButtonClick">
<Description>
Handler of event occuring when the ellipsis button in the ellipsis-style inplace editor is clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditChange">
<Description>
Handler for event occuring when the text in the edit region changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFixedCellClick">
<Description>
Handler of event occuring when the fixed cell is clicked and the 'FixedButtons' property is set to "True".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditAlign">
<Description>
Handler of event occuring when inplace editor alignment is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditLimit">
<Description>
Handler of event occuring when the maximum text length for inplace editor is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditMask">
<Description>
Handler of event occuring when the text pattern for inplace editor is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditStyle">
<Description><![CDATA[
Handler of event occuring when inplace editor style is retrieved. Possible styles are:<br>
"ieSimple" - simplest one-string editor;<br>
"ieEllipsis" -  simplest one-string editor with ellispsis button;<br>
"iePickList" -  drop-down list with an edit region for custom text input. Options of this
dropdown list can be assigned in the 'OnGetPicklist' event handler.
]]></Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditText">
<Description>
Handler of event occuring when user starts the cell text editing. Allows to prepare initial text for editing.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetPicklist">
<Description>
Handler of event occuring when options for inplace dropdown list are retrieved. The 'PickList' parameter must contain CRLF-delimited options.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRowMoved">
<Description>
Handler of event occuring when the user moved a grid row.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRowSized">
<Description>
Handler of event occuring when a row has been 1st time resized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectCell">
<Description>
Handler of event occuring when another cell has been selected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSetEditText">
<Description>
Handler of event occuring when user finishes the cell text editing.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShowEditor">
<Description>
Handler of event occuring when user tries to start inplace-editor.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnTopLeftChanged">
<Description>
Handler of event occuring when the grid has been scrolled.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Description><![CDATA[
Determines the grid appearance and capabilities. Possible value: Cache list ($lb()) where only necessary from the following strings are combined:<br>
"goFixedVertLine" - draw vertical lines between the fixed (non-scrolling) columns;<br>
"goFixedHorzLine" - draw horizontal lines between the fixed (non-scrolling) rows;<br>
"goVertLine" - draw vertical lines between usual (scrollable) columns;<br>
"goHorzLine" - draw horizontal lines between usual (scrollable) rows;<br>
"goRangeSelect" - allow to select ranges of cells (for read-only grids);<br>
"goDrawFocusSelected" - highlight cells with input focus;<br>
"goRowSizing" - allow to resize separate scrollable rows;<br>
"goColSizing" - allow to resize separate scrollable columns;<br>
"goRowMoving" - allow to move scrollable rows by the mouse;<br>
"goColMoving" - allow to move scrollable columns by the mouse;<br>
"goEditing" - allows to enter edit mode for the cells;<br>
"goTabs" - the 'Tab' and 'Shift-Tab' keys moves focus between the columns;<br>
"goRowSelect" - select entire row rather than single cell;<br>
"goAlwaysShowEditor" - the edit mode is always on;<br>
"goThumbTracking" - update the grid image while the scrollbar thumb is being dragged, do not wait for the thumb release.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(goFixedVertLine,goFixedHorzLine,goVertLine,goHorzLine,goRangeSelect,goDrawFocusSelected,goRowSizing,goColSizing,goRowMoving,goColMoving,goEditing,goTabs,goRowSelect,goAlwaysShowEditor,goThumbTracking)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Query">
<Description>
Contains oref of %TMQuery object used while the 'ExecuteQuery' method call.
</Description>
<Type>%Library.TMQuery</Type>
</Property>

<Property name="Row">
<Description>
Determines the index of row containing selected cell. Possible values: integers from 0 to RowCount-1.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RowCount">
<Description>
Represents the total number of the grid rows.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBars">
<Description>
Determines, what scrollbars should be shown if there are invisible rows or columns. Possible values: "ssNone", "ssHorizontal", "ssVertical" or "ssBoth".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssNone,ssHorizontal,ssVertical,ssBoth"/>
</Property>

<Property name="ShowHeader">
<Description>
"True" is equivalent to the 'FixedRows' value equal to 1.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TopRow">
<Description>
Represents index of the topmost visible scrollable row.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleColCount">
<Description>
Indicates the number of visible columns (excluding fixed columns).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleRowCount">
<Description>
Indicates the number of visible rows (excluding fixed rows).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE("#classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Columns.%Close()")
 $$$GENERATE(" s ..Columns=##class(%TMGridColumns).%New($lb(..Address,0,""Columns""))")
 $$$GENERATE(" s ..InUpdate=0")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="Add">
<Description>
Adds new row to the buttongrid. Parameter must be Cache list ($lb()) built from all cells values or delimiter-separated string if the 'Delimiter' property is not empty.
</Description>
<FormalSpec>String:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 i ..InUpdate d
 . s wait=$G(%ZoMRi(2153)) ; save nowait state
 . s %ZoMRi(2153)=1        ; set nowait state
 . s tmp=##this.RunMethod("AddObject",$lb(String,0))
 . s %ZoMRi(2153)=wait     ; restore nowait state
 e  d
 . s tmp=##this.RunMethod("AddObject",$lb(String,0))
 q:$Q tmp  q
]]></Implementation>
</Method>

<Method name="AddObject">
<Description>
Adds new row to the buttongrid. The 'String' parameter must be Cache list ($lb()) built from all cells valuesor delimiter-separated string if the 'Delimiter' property is not empty. The object oref will be stored in the additional invisible column.
</Description>
<FormalSpec>String:%String,Object:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 i ..InUpdate d
 . s wait=$G(%ZoMRi(2153)) ; save nowait state
 . s %ZoMRi(2153)=1        ; set nowait state
 . s tmp=##this.RunMethod("AddObject",$lb(String,Object))
 . s %ZoMRi(2153)=wait     ; restore nowait state
 e  d
 . s tmp=##this.RunMethod("AddObject",$lb(String,Object))
 q:$Q tmp  q
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
Postpones repainting the grid until the 'EndUpdate' method call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 s ..InUpdate=1
 q
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CellRect">
<Description>
Returns the screen coordinates of the specified cell (in format $lb(Left,Top,Right,Bottom)).
</Description>
<FormalSpec>ACol:%Integer,ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CellRect",$lb(ACol,ARow))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMButtonGrid"
]]></Implementation>
</Method>

<Method name="ClearColumns">
<Description>
Removes all columns from the grid. Rows data remain unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearColumns",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearGrid">
<Description>
Removes all rows from the grid.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearGrid",$lb())
 q
]]></Implementation>
</Method>

<Method name="ColCountGet">
<Description>
Method for getting 'ColCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="ColCountSet">
<Description>
Method for setting 'ColCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColGet">
<Description>
Method for getting 'Col' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Col")
 q tmp
]]></Implementation>
</Method>

<Method name="ColSet">
<Description>
Method for setting 'Col' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Col",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColWidthsGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ColWidths")
]]></Implementation>
</Method>

<Method name="ColWidthsSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ColWidths",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CopyToClipboard">
<Description>
Copy columns titles and cells data to clipboard in tab-separated format
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="DefaultColWidthGet">
<Description>
Method for getting 'DefaultColWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultColWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultColWidthSet">
<Description>
Method for setting 'DefaultColWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("DefaultColWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultDrawingGet">
<Description>
Method for getting 'DefaultDrawing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultDrawing")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultDrawingSet">
<Description>
Method for setting 'DefaultDrawing' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("DefaultDrawing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultRowHeightGet">
<Description>
Method for getting 'DefaultRowHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultRowHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultRowHeightSet">
<Description>
Method for setting 'DefaultRowHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("DefaultRowHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Deletes specified row from the grid.
</Description>
<FormalSpec>RowIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DeleteRow",$lb(RowIndex))
 q
]]></Implementation>
</Method>

<Method name="DelimiterGet">
<Description>
Method for getting 'Delimiter' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Delimiter")
 q tmp
]]></Implementation>
</Method>

<Method name="DelimiterSet">
<Description>
Method for setting 'Delimiter' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Delimiter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DrawMultiline">
<Description>
Draws multiline text on the grid canvas in the specified rectangle (format $lb(Left,Top,Right,Bottom)) with specified alignment.
</Description>
<FormalSpec>ARect:%String,S:%String,Align:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DrawMultiline",$lb(ARect,S,Align))
 q
]]></Implementation>
</Method>

<Method name="DrawStr">
<Description>
Draws text string on the grid canvas in the specified rectangle (format $lb(Left,Top,Right,Bottom)) with specified alignment.
</Description>
<FormalSpec>ARect:%String,S:%String,Align:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DrawStr",$lb(ARect,S,Align))
 q
]]></Implementation>
</Method>

<Method name="EditorModeGet">
<Description>
Method for getting 'EditorMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EditorMode")
 q tmp
]]></Implementation>
</Method>

<Method name="EditorModeSet">
<Description>
Method for setting 'EditorMode' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("EditorMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
Allows the changes postponed after the 'BeginUpdate' method call to be reflected on the screen.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 s ..InUpdate=0
 q
]]></Implementation>
</Method>

<Method name="ExecuteQuery">
<Description>
Executes query and loads information in grid. Query class, name and other information must be stored in Query property.
</Description>
<FormalSpec>p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n query,params,i,Delim,str
 s query=##class(%ResultSet).%New(..Query.QueryClass_"."_..Query.QueryName)
 q:query=$$$NULLOREF $$$ERROR("Invalid query name")
 d ..ClearGrid()
 d ..BeginUpdate()
 s Delim=..Delimiter
 s params=""
 f i=1:1:16  d
 . i $d(@("p"_i))  d
 . . i params="" s params="p"_i
 . . e  s params=params_",p"_i
 x "d query.Execute("_params_")"
 f  q:'query.Next()  d
 . s str=""
 . f i=1:1:$l(..Query.QueryFields,",")  d
 . . i str="" s str=$lb(query.GetDataByName($p(..Query.QueryFields,",",i)))
 . . e  s str=str_$lb(query.GetDataByName($p(..Query.QueryFields,",",i)))
 . . ; i str="" s str=query.GetDataByName($p(..Query.QueryFields,",",i))
 . . ; e  s str=str_Delim_query.GetDataByName($p(..Query.QueryFields,",",i))
 . d:..Query.IdField'="" ..AddObject(str,query.GetDataByName(..Query.IdField))
 . d:..Query.IdField="" ..Add(str)
 d ..EndUpdate()
 q $$$OK
]]></Implementation>
</Method>

<Method name="FindRow">
<Description>
For internal use.
</Description>
<FormalSpec>ID:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FindRow",$lb(ID))
 q tmp
]]></Implementation>
</Method>

<Method name="FixedButtonsGet">
<Description>
Method for getting 'FixedButtons' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedButtonsSet">
<Description>
Method for setting 'FixedButtons' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("FixedButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColorGet">
<Description>
Method for getting 'FixedColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedColor")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColorSet">
<Description>
Method for setting 'FixedColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("FixedColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColsGet">
<Description>
Method for getting 'FixedCols' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedCols")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColsSet">
<Description>
Method for setting 'FixedCols' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("FixedCols",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedRowsGet">
<Description>
Method for getting 'FixedRows' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedRows")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedRowsSet">
<Description>
Method for setting 'FixedRows' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("FixedRows",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Columns.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Columns,""Columns"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetCellColors">
<FormalSpec>ARow:%Integer,ACol:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetCellColors",$LB(ARow,ACol))
]]></Implementation>
</Method>

<Method name="GetCells">
<Description><![CDATA[
Returns the value of the specified cell. Columns and rows numbering starts from 1.<br>
Note that there is an invisible 0th column intended to store objects references, therefore, column numbers transmitted to events handlers as 'ACol' parameter or contained in 'Col' property need to be incremented before being used in this method.
]]></Description>
<FormalSpec>Col:%Integer,Row:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetCells",$lb(Col,Row))
 q tmp
]]></Implementation>
</Method>

<Method name="GetColColors">
<FormalSpec>ACol:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetColColors",$LB(ACol))
]]></Implementation>
</Method>

<Method name="GetObject">
<Description>
Returns oref of the object assigned to the specified row.  Rows numbering starts from 1.
</Description>
<FormalSpec>Row:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetCells(0,Row)
]]></Implementation>
</Method>

<Method name="GetRow">
<Description>
Returns all cells for specified row as $LB() of values. Rows numbering starts from 1.
</Description>
<FormalSpec>Row:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetRow",$LB(Row))
]]></Implementation>
</Method>

<Method name="GetRowColors">
<Description>
Method return foreground color and background color as $LB(ForeColor,BkColor) for specified row. For rows wich has not assigned colors, method return $$$clNone. This values used as default and threated by control as $$$clWindow and $$$clWindowText.
</Description>
<FormalSpec>ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetRowColors",$LB(ARow))
]]></Implementation>
</Method>

<Method name="GetSelection">
<Description>
Returns the value of the current selection range.
Returns range in $lb() format as $lb(Left,Top,Right,Bottom),
where left, Top, Right, Bottom show currently selected row and column range.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetSelection")
]]></Implementation>
</Method>

<Method name="GetSorted">
<Description>
Returns column number by which the grid has been sorted, or -1 if grid is not sorted.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetSorted",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GridHeightGet">
<Description>
Method for getting 'GridHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="GridHeightSet">
<Description>
Method for setting 'GridHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("GridHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridLineWidthGet">
<Description>
Method for getting 'GridLineWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridLineWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridLineWidthSet">
<Description>
Method for setting 'GridLineWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("GridLineWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridWidthGet">
<Description>
Method for getting 'GridWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridWidthSet">
<Description>
Method for setting 'GridWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("GridWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IndexOfObject">
<Description>
Returns index of the string containing the specified oref, or -1 if such string is not found. Search starts from the specified FirstRow.
</Description>
<FormalSpec>Object:%Integer,FirstRow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; Object:%Integer;FirstRow:%Integer
 s FirstRow=$G(FirstRow,0)
 q ##this.RunMethod("IndexOfObject",$lb(Object,FirstRow))
]]></Implementation>
</Method>

<Method name="IndexOfString">
<Description>
Returns index of the specified string, or -1 if such string is not found. Search starts from the specified FirstRow.
</Description>
<FormalSpec>String:%String,FirstRow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s FirstRow=$G(FirstRow,0)
 q ##this.RunMethod("IndexOfString",$lb(String,FirstRow))
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Insert new row to the specified position of the buttongrid. Parameter must be Cache list ($lb()) built from all cells values or delimiter-separated string if the 'Delimiter' property is not empty.
</Description>
<FormalSpec>Row:%Integer,String:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 i ..InUpdate d
 . s wait=$G(%ZoMRi(2153)) ; save nowait state
 . s %ZoMRi(2153)=1        ; set nowait state
 . s tmp=##this.RunMethod("InsertObject",$lb(Row,String,0))
 . s %ZoMRi(2153)=wait     ; restore nowait state
 e  d
 . s tmp=##this.RunMethod("InsertObject",$lb(Row,String,0))
 q
]]></Implementation>
</Method>

<Method name="InsertObject">
<Description>
Insert new row to the specified position of the buttongrid. Parameter must be Cache list ($lb()) built from all cells values or delimiter-separated string if the 'Delimiter' property is not empty. The object oref will be stored in the additional invisible column.
</Description>
<FormalSpec>Row:%Integer,String:%String,Object:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 i ..InUpdate d
 . s wait=$G(%ZoMRi(2153)) ; save nowait state
 . s %ZoMRi(2153)=1        ; set nowait state
 . s tmp=##this.RunMethod("InsertObject",$lb(Row,String,Object))
 . s %ZoMRi(2153)=wait     ; restore nowait state
 e  d
 . s tmp=##this.RunMethod("InsertObject",$lb(Row,String,Object))
 q
]]></Implementation>
</Method>

<Method name="InvalidateCell">
<Description>
Repaints the specified cell.
</Description>
<FormalSpec>ACol:%Integer,ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InvalidateCell",$lb(ACol,ARow))
 q
]]></Implementation>
</Method>

<Method name="InvalidateCol">
<Description>
Repaints the specified column.
</Description>
<FormalSpec>ACol:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InvalidateCol",$lb(ACol))
 q
]]></Implementation>
</Method>

<Method name="InvalidateRow">
<Description>
Repaints the specified row.
</Description>
<FormalSpec>ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InvalidateRow",$lb(ARow))
 q
]]></Implementation>
</Method>

<Method name="IsEmpty">
<Description>
Returns "True" if grid does not contain data, otherwise - "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("IsEmpty",$LB())
]]></Implementation>
</Method>

<Method name="LeftColGet">
<Description>
Method for getting 'LeftCol' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LeftCol")
 q tmp
]]></Implementation>
</Method>

<Method name="LeftColSet">
<Description>
Method for setting 'LeftCol' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("LeftCol",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LocateRow">
<Description>
Moves cursor to the string with the most fitting value in the specified column.
</Description>
<FormalSpec>ColIndex:%Integer,Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LocateRow",$lb(ColIndex,Text))
 q
]]></Implementation>
</Method>

<Method name="MouseCoord">
<Description>
Converts the specified screen coordinate into corresponding cell indices ($lb(Column,Row)).
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MouseCoord",$lb(X,Y))
 q tmp
]]></Implementation>
</Method>

<Method name="OnAcceptEditKeyGet">
<Description>
Method for getting 'OnAcceptEditKey' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAcceptEditKey
]]></Implementation>
</Method>

<Method name="OnAcceptEditKeySet">
<Description>
Method for setting 'OnAcceptEditKey' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAcceptEditKey=Value
 d ##this.SetEvent("OnAcceptEditKey",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCancelEditGet">
<Description>
Method for getting 'OnCancelEdit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCancelEdit
]]></Implementation>
</Method>

<Method name="OnCancelEditSet">
<Description>
Method for setting 'OnCancelEdit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCancelEdit=Value
 d ##this.SetEvent("OnCancelEdit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeFocusGet">
<Description>
Method for getting 'OnChangeFocus' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChangeFocus
]]></Implementation>
</Method>

<Method name="OnChangeFocusSet">
<Description>
Method for setting 'OnChangeFocus' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChangeFocus=Value
 d ##this.SetEvent("OnChangeFocus",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCheckButtonGet">
<Description>
Method for getting 'OnCheckButton' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCheckButton
]]></Implementation>
</Method>

<Method name="OnCheckButtonSet">
<Description>
Method for setting 'OnCheckButton' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCheckButton=Value
 d ##this.SetEvent("OnCheckButton",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClearGridGet">
<Description>
Method for getting 'OnClearGrid' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClearGrid
]]></Implementation>
</Method>

<Method name="OnClearGridSet">
<Description>
Method for setting 'OnClearGrid' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClearGrid=Value
 d ##this.SetEvent("OnClearGrid",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnColumnMovedGet">
<Description>
Method for getting 'OnColumnMoved' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnMoved
]]></Implementation>
</Method>

<Method name="OnColumnMovedSet">
<Description>
Method for setting 'OnColumnMoved' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnMoved=Value
 d ##this.SetEvent("OnColumnMoved",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnColumnSizedGet">
<Description>
Method for getting 'OnColumnSized' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnSized
]]></Implementation>
</Method>

<Method name="OnColumnSizedSet">
<Description>
Method for setting 'OnColumnSized' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnSized=Value
 d ##this.SetEvent("OnColumnSized",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawCellGet">
<Description>
Method for getting 'OnDrawCell' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawCell
]]></Implementation>
</Method>

<Method name="OnDrawCellSet">
<Description>
Method for setting 'OnDrawCell' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawCell=Value
 d ##this.SetEvent("OnDrawCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditButtonClickGet">
<Description>
Method for getting 'OnEditButtonClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditButtonClick
]]></Implementation>
</Method>

<Method name="OnEditButtonClickSet">
<Description>
Method for setting 'OnEditButtonClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditButtonClick=Value
 d ##this.SetEvent("OnEditButtonClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditChangeGet">
<Description>
Method for getting 'OnEditChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditChange
]]></Implementation>
</Method>

<Method name="OnEditChangeSet">
<Description>
Method for setting 'OnEditChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditChange=Value
 d ##this.SetEvent("OnEditChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFixedCellClickGet">
<Description>
Method for getting 'OnFixedCellClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFixedCellClick
]]></Implementation>
</Method>

<Method name="OnFixedCellClickSet">
<Description>
Method for setting 'OnFixedCellClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFixedCellClick=Value
 d ##this.SetEvent("OnFixedCellClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditAlignGet">
<Description>
Method for getting 'OnGetEditAlign' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditAlign
]]></Implementation>
</Method>

<Method name="OnGetEditAlignSet">
<Description>
Method for setting 'OnGetEditAlign' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditAlign=Value
 d ##this.SetEvent("OnGetEditAlign",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditLimitGet">
<Description>
Method for getting 'OnGetEditLimit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditLimit
]]></Implementation>
</Method>

<Method name="OnGetEditLimitSet">
<Description>
Method for setting 'OnGetEditLimit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditLimit=Value
 d ##this.SetEvent("OnGetEditLimit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditMaskGet">
<Description>
Method for getting 'OnGetEditMask' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditMask
]]></Implementation>
</Method>

<Method name="OnGetEditMaskSet">
<Description>
Method for setting 'OnGetEditMask' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditMask=Value
 d ##this.SetEvent("OnGetEditMask",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditStyleGet">
<Description>
Method for getting 'OnGetEditStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditStyle
]]></Implementation>
</Method>

<Method name="OnGetEditStyleSet">
<Description>
Method for setting 'OnGetEditStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditStyle=Value
 d ##this.SetEvent("OnGetEditStyle",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditTextGet">
<Description>
Method for getting 'OnGetEditText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditText
]]></Implementation>
</Method>

<Method name="OnGetEditTextSet">
<Description>
Method for setting 'OnGetEditText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditText=Value
 d ##this.SetEvent("OnGetEditText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetPicklistGet">
<Description>
Method for getting 'OnGetPicklist' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetPicklist
]]></Implementation>
</Method>

<Method name="OnGetPicklistSet">
<Description>
Method for setting 'OnGetPicklist' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetPicklist=Value
 d ##this.SetEvent("OnGetPicklist",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRowMovedGet">
<Description>
Method for getting 'OnRowMoved' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRowMoved
]]></Implementation>
</Method>

<Method name="OnRowMovedSet">
<Description>
Method for setting 'OnRowMoved' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRowMoved=Value
 d ##this.SetEvent("OnRowMoved",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRowSizedGet">
<Description>
Method for getting 'OnRowSized' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRowSized
]]></Implementation>
</Method>

<Method name="OnRowSizedSet">
<Description>
Method for setting 'OnRowSized' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRowSized=Value
 d ##this.SetEvent("OnRowSized",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectCellGet">
<Description>
Method for getting 'OnSelectCell' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectCell
]]></Implementation>
</Method>

<Method name="OnSelectCellSet">
<Description>
Method for setting 'OnSelectCell' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSelectCell=Value
 d ##this.SetEvent("OnSelectCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSetEditTextGet">
<Description>
Method for getting 'OnSetEditText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSetEditText
]]></Implementation>
</Method>

<Method name="OnSetEditTextSet">
<Description>
Method for setting 'OnSetEditText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSetEditText=Value
 d ##this.SetEvent("OnSetEditText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowEditorGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShowEditor
]]></Implementation>
</Method>

<Method name="OnShowEditorSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnShowEditor=Value
 d ##this.SetEvent("OnShowEditor",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTopLeftChangedGet">
<Description>
Method for getting 'OnTopLeftChanged' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTopLeftChanged
]]></Implementation>
</Method>

<Method name="OnTopLeftChangedSet">
<Description>
Method for setting 'OnTopLeftChanged' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTopLeftChanged=Value
 d ##this.SetEvent("OnTopLeftChanged",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowCountGet">
<Description>
Method for getting 'RowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="RowCountSet">
<Description>
Method for setting 'RowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("RowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowGet">
<Description>
Method for getting 'Row' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Row")
 q tmp
]]></Implementation>
</Method>

<Method name="RowSet">
<Description>
Method for setting 'Row' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Row",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarsGet">
<Description>
Method for getting 'ScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarsSet">
<Description>
Method for setting 'ScrollBars' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetCellColors">
<FormalSpec>ARow:%Integer,ACol:%Integer,ForeColor:%Integer,BkColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetCellColors",$LB(ARow,ACol,ForeColor,BkColor))
 q
]]></Implementation>
</Method>

<Method name="SetCells">
<Description><![CDATA[
Assigns the value for the specified cell. Columns and rows numbering starts from 1. Use the 'Columns' property to change columns headers.<br>
Note that there is an invisible 0th column intended to store objects references, therefore, column numbers transmitted to events handlers as 'ACol' parameter or contained in 'Col' property need to be incremented before being used in this method.
]]></Description>
<FormalSpec>Col:%Integer,Row:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 i ..InUpdate d
 . s wait=$G(%ZoMRi(2153)) ; save nowait state
 . s %ZoMRi(2153)=1        ; set nowait state
 . s tmp=##this.RunMethod("SetCells",$lb(Col,Row,Value))
 . s %ZoMRi(2153)=wait     ; restore nowait state
 e  d
 . s tmp=##this.RunMethod("SetCells",$lb(Col,Row,Value))
 q
]]></Implementation>
</Method>

<Method name="SetColColors">
<FormalSpec>ACol:%Integer,ForeColor:%Integer,BkColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetColColors",$LB(ACol,ForeColor,BkColor))
 q
]]></Implementation>
</Method>

<Method name="SetObject">
<Description>
Assigns the object oref for the specified row. Rows numbering starts from 1.
</Description>
<FormalSpec>Row:%Integer,AObject:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ d ##this.SetCells(0,Row,AObject)
]]></Implementation>
</Method>

<Method name="SetRow">
<Description>
Replace all cells in specified Row by values given in Line as $LB().  Rows numbering starts from 1.
</Description>
<FormalSpec>Row:%Integer,Line:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetRow",$lb(Row,Line))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetRowColors">
<Description>
Method sets specified colors for specified row. ForeColor used by control for text color and BkColor use for background color. Colors $$$clNone clears row settings and threated by control as $$$clWindowText and $$$clWindow.
</Description>
<FormalSpec>ARow:%Integer,ForeColor:%Integer,BkColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetRowColors",$LB(ARow,ForeColor,BkColor))
 q
]]></Implementation>
</Method>

<Method name="ShowHeaderGet">
<Description>
Method for getting 'ShowHeader' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowHeader")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowHeaderSet">
<Description>
Method for setting 'ShowHeader' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ShowHeader",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SortByColumn">
<FormalSpec>ColIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("SortByColumn",$lb(ColIndex))
 q
]]></Implementation>
</Method>

<Method name="TopRowGet">
<Description>
Method for getting 'TopRow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopRow")
 q tmp
]]></Implementation>
</Method>

<Method name="TopRowSet">
<Description>
Method for setting 'TopRow' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("TopRow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleColCountGet">
<Description>
Method for getting 'VisibleColCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleColCountSet">
<Description>
Method for setting 'VisibleColCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("VisibleColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleRowCountGet">
<Description>
Method for getting 'VisibleRowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleRowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleRowCountSet">
<Description>
Method for setting 'VisibleRowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("VisibleRowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Columns</Value>
</Value>
<Value name="39">
<Value>InUpdate</Value>
</Value>
<Value name="40">
<Value>OnAcceptEditKey</Value>
</Value>
<Value name="41">
<Value>OnCancelEdit</Value>
</Value>
<Value name="42">
<Value>OnChangeFocus</Value>
</Value>
<Value name="43">
<Value>OnCheckButton</Value>
</Value>
<Value name="44">
<Value>OnClearGrid</Value>
</Value>
<Value name="45">
<Value>OnColumnMoved</Value>
</Value>
<Value name="46">
<Value>OnColumnSized</Value>
</Value>
<Value name="47">
<Value>OnDrawCell</Value>
</Value>
<Value name="48">
<Value>OnEditButtonClick</Value>
</Value>
<Value name="49">
<Value>OnEditChange</Value>
</Value>
<Value name="50">
<Value>OnFixedCellClick</Value>
</Value>
<Value name="51">
<Value>OnGetEditAlign</Value>
</Value>
<Value name="52">
<Value>OnGetEditLimit</Value>
</Value>
<Value name="53">
<Value>OnGetEditMask</Value>
</Value>
<Value name="54">
<Value>OnGetEditStyle</Value>
</Value>
<Value name="55">
<Value>OnGetEditText</Value>
</Value>
<Value name="56">
<Value>OnGetPicklist</Value>
</Value>
<Value name="57">
<Value>OnRowMoved</Value>
</Value>
<Value name="58">
<Value>OnRowSized</Value>
</Value>
<Value name="59">
<Value>OnSelectCell</Value>
</Value>
<Value name="60">
<Value>OnSetEditText</Value>
</Value>
<Value name="61">
<Value>OnShowEditor</Value>
</Value>
<Value name="62">
<Value>OnTopLeftChanged</Value>
</Value>
<Value name="63">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMCanvas">
<Description>
Represents drawing surface and tools for controls working with graphic images.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73315</TimeCreated>

<Property name="Brush">
<Description>
Represents the color and pattern used when the background drawing and shapes filling. Look the %TMBrush description for details.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="CanvasOrientation">
<Description>
Read only property, indicating, is the canvas left-to-right or right-to-left oriented. Possible values: "coLefToRight" (default value) or "coRightToLeft".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",coLeftToRight,coRightToLeft"/>
</Property>

<Property name="CopyMode">
<Description><![CDATA[
Determines effects using when images copying with BrushCopy and CopyRect methods. Possible value: Cache' list ($lb) where only necessary from the following strings are combined, or $lb() if to effects are desired:<br>
"cmBlackness" - fill the destination area with black.<br>
"cmDstInvert" - invert the image in destination area, not using source.<br>
"cmMergeCopy" - combine source bitmap and destination image by AND function.<br>
"cmMergePaint" - combine destination image and inverted source bitmap by OR function.<br>
"cmNotSrcCopy" - invert source image.<br>
"cmNotSrcErase" -	combine source bitmap and destination image by OR operator and invert the result.<br>
"cmPatCopy" - copy source pattern.<br>
"cmPatInvert" - combine source pattern and destination image by XOR function.<br>
"cmPatPaint" - combine inverted source image, source pattern and source image by OR function.<br>
"cmSrcAnd" - combine the destination image and source bitmap by AND function.<br>
"cmSrcCopy" - copy the source bitmap.<br>
"cmSrcErase" - combine inverted destination image and source bitmap by AND function.<br>
"cmSrcInvert" - combines destination image and source bitmap by XOR function.<br>
"cmSrcPaint" - combine destination image and source bitmap by OR function.<br>
"cmWhiteness" - fill the destination area with white.
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Font">
<Description>
Specifies the font for TextOut and TextRect methods. See %TMFont description for details.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="Handle">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LockCount">
<Description>
Locks counter, used in Lock, TryLock and Unlock methods. If set to 0, the canvas is unlocked.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the image was changed by %TMCanvas drawing method.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChanging">
<Description>
Handler of event occuring just before a %TMCanvas drawing method changes the image.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Pen">
<Description>
Determines the parameters of pen using for drawing lines and outlining shapes. See %TMPen description for details.
</Description>
<Type>%Library.TMPen</Type>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this canvas.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TextFlags">
<Description><![CDATA[
Specifies effects when text writing by the TextOut and TextRect methods. The possible value: the sum of the necessary integer constants from the following table:<br>
$$$ETO_CLIPPED -  in TextRect is set automatically, in TextOut has no effect.<br>
$$$ETO_OPAQUE - draw the text with opaque background color.<br>
$$$ETO_RTLREADING - display text from right to left, requires Mideast version of Windows.<br>
$$$ETO_GLYPH_INDEX - displays character placement codes in TrueType fonts.<br>
$$$ETO_IGNORELANGUAGE - undocumented Microsoft flag.<br>
$$$ETO_NUMERICSLOCAL - undocumented Microsoft flag.<br>
$$$ETO_NUMERICSLATIN - undocumented Microsoft flag.
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" d ..Brush.%Close() s ..Brush=""""")
 $$$GENERATE(" d ..Font.%Close() s ..Font=""""")
 $$$GENERATE(" d ..Pen.%Close() s ..Pen=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Brush.%Close() s ..Brush=""""")
 $$$GENERATE(" s ..Brush=##class(%TMBrush).%New($lb(..Address,0,""Brush""))")
 $$$GENERATE(" d ..Font.%Close() s ..Font=""""")
 $$$GENERATE(" s ..Font=##class(%TMFont).%New($lb(..Address,0,""Font""))")
 $$$GENERATE(" d ..Pen.%Close() s ..Pen=""""")
 $$$GENERATE(" s ..Pen=##class(%TMPen).%New($lb(..Address,0,""Pen""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="Arc">
<Description>
Draws an arc of ellipse. The points (X1,Y1) and (X2,Y2) define rectangle, in which ellipse is inscribed. The starting and ending points are intersections of the ellipse and lines connecting the centre of ellipse with (X3,Y3) and (X4,Y4) points correspondingly. The arc is drawn counterclockwise from the starting to the ending point.
</Description>
<FormalSpec>X1:%Integer,Y1:%Integer,X2:%Integer,Y2:%Integer,X3:%Integer,Y3:%Integer,X4:%Integer,Y4:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Arc",$lb(X1,Y1,X2,Y2,X3,Y3,X4,Y4))
 q
]]></Implementation>
</Method>

<Method name="BrushCopy">
<Description>
Copies rectangular portion of the Bitmap defined by Dest parameter (in format $lb(Left,Top,Right,Bottom)) to the rectangular area of the canvas defined by the Source parameter (in the same format as Dest), replacing the specified Color by the Color of the Brush property.
</Description>
<FormalSpec>Dest:%String,Bitmap:%TMBitmap,Source:%String,Color:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BrushCopy",$lb(Dest,Bitmap.Address,Source,Color))
 q
]]></Implementation>
</Method>

<Method name="CanvasOrientationGet">
<Description>
Method for getting 'CanvasOrientation' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CanvasOrientation")
 q tmp
]]></Implementation>
</Method>

<Method name="CanvasOrientationSet">
<Description>
Method for setting 'CanvasOrientation' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("CanvasOrientation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Chord">
<Description>
Draws an ellipse segment confined by an ellipse arc and the straight line connecting ending and starting points of the arc. The points (X1,Y1) and (X2,Y2) define rectangle, in which ellipse is inscribed. The starting and ending points are intersections of the ellipse and line connecting  (X3,Y3) and (X4,Y4).points correspondingly. The perimeter of the segment is drawn using the value of Pen property, and the segment is filled using the value of Brush property.
</Description>
<FormalSpec>X1:%Integer,Y1:%Integer,X2:%Integer,Y2:%Integer,X3:%Integer,Y3:%Integer,X4:%Integer,Y4:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Chord",$lb(X1,Y1,X2,Y2,X3,Y3,X4,Y4))
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMCanvas"
]]></Implementation>
</Method>

<Method name="CopyModeGet">
<Description>
Method for getting 'CopyMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CopyMode")
 q tmp
]]></Implementation>
</Method>

<Method name="CopyModeSet">
<Description>
Method for setting 'CopyMode' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("CopyMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CopyRect">
<Description>
Copies the rectangular part (specified by Source parameter, in format $lb(Left,Top,Right,Bottom)) from another Canvas to the current canvas, to the rectangle specified by Dest parameter (in the same format as Source).
</Description>
<FormalSpec>Dest:%String,Canvas:%TMCanvas,Source:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyRect",$lb(Dest,Canvas.Address,Source))
 q
]]></Implementation>
</Method>

<Method name="Draw">
<Description>
Draws the bitmap image or the icon specified by the Graphic parameter into rectangle with the upper left angle at the (X,Y) point.
</Description>
<FormalSpec>X:%Integer,Y:%Integer,Graphic:%TMGraphic</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Draw",$lb(X,Y,Graphic.Address))
 q
]]></Implementation>
</Method>

<Method name="DrawFocusRect">
<Description><![CDATA[
Draws or removes (using XOR function) the rectangle defined by the Rect parameter (in format $lb(Left,Top,Right,Bottom)).<br>
Note: this rectangle can not be scrolled automatically.
]]></Description>
<FormalSpec>Rect:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DrawFocusRect",$lb(Rect))
 q
]]></Implementation>
</Method>

<Method name="DrawText">
<Description><![CDATA[
Draw text into canvas.
Parameters meaning:
Value - string for draw. String draws using currently selected font.
Rect - rectangle for clipping. Meaning as $LB(Left,Top,Right,Bottom)
Flags - formatting options. It can be summary of values:

DT_TOP = 0H; Top-justifies text (single line only).

DT_LEFT = 0H; Aligns text to the left.

DT_CENTER = 1H; Centers text horizontally in the rectangle.

DT_RIGHT = 2H; Aligns text to the right.

DT_VCENTER = 4H; Centers text vertically (single line only).

DT_BOTTOM = 8H; Justifies the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.

DT_WORDBREAK = 10H; Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the lpRect parameter. A carriage return-linefeed sequence also breaks the line.

DT_SINGLELINE = 20H; Displays text on a single line only. Carriage returns and linefeeds do not break the line.

DT_EXPANDTABS = 40H; Expands tab characters. The default number of characters per tab is eight.

DT_TABSTOP = 80H; Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the uFormat parameter specify the number of characters for each tab. The default number of characters per tab is eight.

DT_NOCLIP = 100H; Draws without clipping. DrawText is somewhat faster when DT_NOCLIP is used.

DT_EXTERNALLEADING = 200H; Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.

DT_CALCRECT = 400H; Determines the width and height of the rectangle. If there are multiple lines of text, DrawText uses the width of the rectangle pointed to by the lpRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, DrawText returns the height of the formatted text but does not draw the text.

DT_NOPREFIX = 800H; Turns off processing of prefix characters. Normally, DrawText interprets the mnemonic-prefix character & as a directive to underscore the character that follows, and the mnemonic-prefix characters && as a directive to print a single &. By specifying DT_NOPREFIX, this processing is turned off.

DT_EDITCONTROL = 2000H; Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.

DT_PATH_ELLIPSIS = 4000H or DT_END_ELLIPSIS = 8000H; Replaces part of the given string with ellipses, if necessary, so that the result fits in the specified  rectangle. The given string is not modified unless the DT_MODIFYSTRING flag is specified. You can specify DT_END_ELLIPSIS to replace characters at the end of the string, or DT_PATH_ELLIPSIS to replace characters in the middle of the string. If the string contains backslash (\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.

DT_MODIFYSTRING = 10000H; Modifies the given string to match the displayed text. This flag has no effect unless the DT_END_ELLIPSIS or DT_PATH_ELLIPSIS flag is specified.

DT_RTLREADING = 20000H; Layout in right to left reading order for bi-directional text when the font selected into the hdc is a Hebrew or Arabic font. The default reading order for all text is left to right.

DT_WORD_ELLIPSIS = $40000; Undocumented Microsoft option.

This flags are given from official Microsoft Win SDK. All values are given in hexadecimal format.
]]></Description>
<FormalSpec>Value:%String,Rect:%String,Flags:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("DrawText",$LB(Value,Rect,Flags))
]]></Implementation>
</Method>

<Method name="Ellipse">
<Description>
Draws an ellipse. The points (X1,Y1) and (X2,Y2) define rectangle, in which ellipse is inscribed.
The perimeter of ellipse is drawn using the value of the Pen property, and the ellipse is filled using the value of the Brush property.
</Description>
<FormalSpec>X1:%Integer,Y1:%Integer,X2:%Integer,Y2:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Ellipse",$lb(X1,Y1,X2,Y2))
 q
]]></Implementation>
</Method>

<Method name="FillRect">
<Description>
Fills the rectangle specified by the Rect parameter (in format $lb(Left,Top,Right,Bottom)) using the value of the Brush property. The left and bottom edges are not included into the region to be filled.
</Description>
<FormalSpec>Rect:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FillRect",$lb(Rect))
 q
]]></Implementation>
</Method>

<Method name="FloodFill">
<Description>
Fills the region including the (X,Y) point and confined by the boundary defined by the Color and FillStyle parameters, using the value of the Brush property. FillStyle equal to "fsBorder" meand that the boundary has the same color as specified in the Color parameter. FillStyle equal to "fsSurface" means that the boundary has another colors.
</Description>
<FormalSpec>X:%Integer,Y:%Integer,Color:%Integer,FillStyle:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FloodFill",$lb(X,Y,Color,FillStyle))
 q
]]></Implementation>
</Method>

<Method name="FrameRect">
<Description>
Draws the one-pixel-wide border around the rectangle specified by the Rect parameter(in format $lb(Left,Top,Right,Bottom)).
</Description>
<FormalSpec>Rect:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FrameRect",$lb(Rect))
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" s result=result_..Pen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pen,""Pen"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetClipRect">
<Description>
Returns the definition of rectangle (in format $lb(Left,Top,Right,Bottom)) which needs to be repainted. Any drawing is allowed inly within this rectangle. For use in OnPaint handlers.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetClipRect",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetPixel">
<Description>
Returns the color of the specified pixel, or -1 if the pixel is outside the clipping rectangle or device does not support this method.
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetPixel",$lb(X,Y))
 q tmp
]]></Implementation>
</Method>

<Method name="HandleGet">
<Description>
Method for getting 'Handle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Handle")
 q tmp
]]></Implementation>
</Method>

<Method name="HandleSet">
<Description>
Method for setting 'Handle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Handle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LineTo">
<Description>
Draws the a line (using the Pen value) from the current PenPos to the (X,Y) and sets the PenPos value to $lb(X,Y).
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LineTo",$lb(X,Y))
 q
]]></Implementation>
</Method>

<Method name="Lock">
<Description>
Sets an incremental lock, protecting the canvas from other threads of a multithreaded application.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Lock",$lb())
 q
]]></Implementation>
</Method>

<Method name="LockCountGet">
<Description>
Method for getting 'LockCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LockCount")
 q tmp
]]></Implementation>
</Method>

<Method name="LockCountSet">
<Description>
Method for setting 'LockCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("LockCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MoveTo">
<Description>
Sets the PenPos property to $lb(X,Y).
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MoveTo",$lb(X,Y))
 q
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangingGet">
<Description>
Method for getting 'OnChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChanging
]]></Implementation>
</Method>

<Method name="OnChangingSet">
<Description>
Method for setting 'OnChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChanging=Value
 d ##this.SetEvent("OnChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Pie">
<Description>
Draws the ellipse sector. The points (X1,Y1) and (X2,Y2) define rectangle, in which ellipse is inscribed. The sector is confined by this eppipse and the lines connecting the ellipse centre and the (X3, Y3) and (X4, Y4) points.
</Description>
<FormalSpec>X1:%Integer,Y1:%Integer,X2:%Integer,Y2:%Integer,X3:%Integer,Y3:%Integer,X4:%Integer,Y4:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Pie",$lb(X1,Y1,X2,Y2,X3,Y3,X4,Y4))
 q
]]></Implementation>
</Method>

<Method name="PolyBezier">
<Description>
Draws Bezier curves using the points specified by the Points parameter (in format $lb($lb(X1,Y1),$lb(X2,Y2),...,$lb(XN,YN))). The first curve starts at (X1,Y1), ends at (X4,Y4) and uses (X2,Y2) and (X3,Y3) as control points. The next curves start at the ending point of previous curve and use next 3 poins in the same manner.
</Description>
<FormalSpec>Points:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PolyBezier",$lb(Points))
 q
]]></Implementation>
</Method>

<Method name="PolyBezierTo">
<Description>
Draws cubic Bezier curves (see PolyBezier description) and sets the PenPos value to the last point.
</Description>
<FormalSpec>Points:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PolyBezierTo",$lb(Points))
 q
]]></Implementation>
</Method>

<Method name="Polygon">
<Description>
Draws the filled polygon with angles specified by the Points parameter (in format $lb($lb(X1,Y1),$lb(X2,Y2),...,$lb(XN,YN))).
</Description>
<FormalSpec>Points:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Polygon",$lb(Points))
 q
]]></Implementation>
</Method>

<Method name="Polyline">
<Description>
Draws polygonal line connecting poins specified by the Points parameter (in format $lb($lb(X1,Y1),$lb(X2,Y2),...,$lb(XN,YN))). Does not change the value of PenPos property.
</Description>
<FormalSpec>Points:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Polyline",$lb(Points))
 q
]]></Implementation>
</Method>

<Method name="Rectangle">
<Description>
Draws the filled rectangle.
</Description>
<FormalSpec>X1:%Integer,Y1:%Integer,X2:%Integer,Y2:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Rectangle",$lb(X1,Y1,X2,Y2))
 q
]]></Implementation>
</Method>

<Method name="Refresh">
<Description>
For internal use..
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Refresh",$lb())
 q
]]></Implementation>
</Method>

<Method name="RoundRect">
<Description>
Draws the rounded filled rectangle.
</Description>
<FormalSpec>X1:%Integer,Y1:%Integer,X2:%Integer,Y2:%Integer,X3:%Integer,Y3:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("RoundRect",$lb(X1,Y1,X2,Y2,X3,Y3))
 q
]]></Implementation>
</Method>

<Method name="SetPixel">
<Description>
Changes the color of specified pixel.
</Description>
<FormalSpec>X:%Integer,Y:%Integer,Color:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetPixel",$lb(X,Y,Color))
 q
]]></Implementation>
</Method>

<Method name="StretchDraw">
<Description>
Draws the bitmap image or the icon specified by the Graphic parameter into rectangle specified by the Rect parameter (in format $lb(Left,Top,Right,Bottom)), stretching the image to fit in the rectangle.
</Description>
<FormalSpec>Rect:%String,Graphic:%TMGraphic</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("StretchDraw",$lb(Rect,Graphic.Address))
 q
]]></Implementation>
</Method>

<Method name="TextExtent">
<Description>
Returns $lb(Width,Height) of the rectangular area required to display the Text string.
</Description>
<FormalSpec>Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TextExtent",$lb(Text))
 q tmp
]]></Implementation>
</Method>

<Method name="TextFlagsGet">
<Description>
Method for getting 'TextFlags' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TextFlags")
 q tmp
]]></Implementation>
</Method>

<Method name="TextFlagsSet">
<Description>
Method for setting 'TextFlags' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("TextFlags",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextHeight">
<Description>
Returns height of the rectangular area required to display the Text string.
</Description>
<FormalSpec>Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TextHeight",$lb(Text))
 q tmp
]]></Implementation>
</Method>

<Method name="TextOut">
<Description>
Wtites the Text string onto the canvas, using the current value of Font property.
</Description>
<FormalSpec>X:%Integer,Y:%Integer,Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TextOut",$lb(X,Y,Text))
 q
]]></Implementation>
</Method>

<Method name="TextRect">
<Description>
Writes the Text string within a rectangular clipping region specified by the Rect parameter. The coordinates of the upper left corner of the text are (X, Y).
</Description>
<FormalSpec>Rect:%String,X:%Integer,Y:%Integer,Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TextRect",$lb(Rect,X,Y,Text))
 q
]]></Implementation>
</Method>

<Method name="TextWidth">
<Description>
Returns width of the rectangular area required to display the Text string.
</Description>
<FormalSpec>Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TextWidth",$lb(Text))
 q tmp
]]></Implementation>
</Method>

<Method name="TryLock">
<Description>
Tries to set non-incremental lock, protecting the canvas from other threads of a multithreaded application. Returns "True" if lock is set, or "False" if the canvas is already locked by another thread.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TryLock",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Unlock">
<Description>
Removes lock previously set by Lock or TryLock method.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Unlock",$lb())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Brush</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnChange</Value>
</Value>
<Value name="11">
<Value>OnChanging</Value>
</Value>
<Value name="12">
<Value>Pen</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChart">
<Description>
Provides an exhaustive set of tools for charts drawing.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73315</TimeCreated>

<Property name="AllowPanning">
<Description><![CDATA[
Determines the direction of allowed scrolling. Possible values:<br>
"pmNone" - scrolling is impossible;<br>
"pmHorizontal" - only horizontal scrolling is allowed;<br>
"pmVertical" - only vertical scrolling is allowed;<br>
"pmBoth" - complete scrolling is allowed.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",pmNone,pmHorizontal,pmVertical,pmBoth"/>
</Property>

<Property name="AllowZoom">
<Description>
Determines, can the chart be zoomed using mouse with Ctrl-key pressed (if set to "True") or not.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AnimatedZoom">
<Description>
If set to "False", the zoom function is instant, if set to "True", the zooming consists of the sequence of steps, number of which is detemined by the 'AnimatedZoomSteps' property.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AnimatedZoomSteps">
<Description>
Determines the number of steps for animated zooming.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutoSize">
<Description>
If set to "True", the chart image should be resized to fit the control area, if set to "False" - the image remains unchanged.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AxisVisible">
<Description>
Setting this property displayes (if set to "True") or hides (if set to "False") all axes simultaneously.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BackColor">
<Description>
Determines background color for the area between the chart axes (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BackImage">
<Description>
Contains oref of %TMBitmap object with the background image for the the area between the chart axes.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="BackImageInside">
<Description>
If set to "True", the background image will be clipped in the the area between the chart axes.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BackImageMode">
<Description>
Determines, should the background image be stretched (if set to "pbmStretch"), tiled (if set to "pbmTile") or centered (if set to "pbmCenter").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",pbmStretch,pbmTile,pbmCenter"/>
</Property>

<Property name="BackWall">
<Description>
Contains oref of %TMChartWall object determining attributes of the chart backwall.
</Description>
<Type>%Library.TMChartWall</Type>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines, will the control have a border around the client area. Possible values:<br>
"bsSingle" - single-line border<br>
"bsNone" - no border.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="BottomAxis">
<Description>
Contains oref of the %TMChartAxis object determining attributes of the bottom axis of the chart.
</Description>
<Type>%Library.TMChartAxis</Type>
</Property>

<Property name="BottomWall">
<Description>
Contains oref of %TMChartWall object determining attributes of the bottom wall of the chart.
</Description>
<Type>%Library.TMChartWall</Type>
</Property>

<Property name="Chart3DPercent">
<Description>
Determines the depth of the chart (in percents of the chart dimensions).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ClipPoints">
<Description>
Determines, should the series points be clipped within the corresponding chart region (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Foot">
<Description>
Contains oref of %TMChartTitle object determining the text and format of the chart footer.
</Description>
<Type>%Library.TMChartTitle</Type>
</Property>

<Property name="Frame">
<Description>
Contains oref of %TMChartPen object determining attributes of pen to draw area around the chart axes.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Gradient">
<Description>
Contains oref of %TMChartGradient object determining colors for filling the chart background.
</Description>
<Type>%Library.TMChartGradient</Type>
</Property>

<Property name="LeftAxis">
<Description>
Contains oref of the %TMChartAxis object determining attributes of the left axis of the chart.
</Description>
<Type>%Library.TMChartAxis</Type>
</Property>

<Property name="LeftWall">
<Description>
Contains oref of %TMChartWall object determining attributes of the left wall of the chart.
</Description>
<Type>%Library.TMChartWall</Type>
</Property>

<Property name="Legend">
<Description>
Contains oref of %TMChartLegend object describing representation of the chart series.
</Description>
<Type>%Library.TMChartLegend</Type>
</Property>

<Property name="MarginBottom">
<Description>
Determines the width (in pixels) of the bottom margin of the chart (default value is 8).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MarginLeft">
<Description>
Determines the width (in pixels) of the left margin of the chart (default value is 12).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MarginRight">
<Description>
Determines the width (in pixels) of the right margin of the chart (default value is 12).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MarginTop">
<Description>
Determines the width (in pixels) of the upper margin of the chart (default value is 8).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxPointsPerPage">
<Description>
If set to positive value, divides the chart into pages. Default value is 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Monochrome">
<Description>
If set to "True", forces the chart to be drawn in black and while colors.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnAfterDraw">
<Description>
Handler of event occuring immedately after a series has been drawn.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnAllowScroll">
<Description>
Handler of event occuring immediately after scrolling is allowed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClickAxis">
<Description>
Handler of event occuring when user clicks on a chart axis.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClickBackground">
<Description>
Handler of event occuring when user clicks on the chart background.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClickLegend">
<Description>
Handler of event occuring when user clicks on the rectangle with the chart legend.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClickSeries">
<Description>
Handler of event occuring when user clicks on a series point.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetAxisLabel">
<Description>
Handler of event occuring when user clicks on a chart axis label.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetLegendPos">
<Description>
Handler of event occuring when a legend item is near to be displayed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetLegendRect">
<Description>
Handler of event occuring when the chart legend is near to be displayed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetLegendText">
<Description>
Handler of event occuring when a legend text is near to be displayed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetNextAxisLabel">
<Description>
Handler of event occuring when an axis label is to be drawn.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPageChange">
<Description>
Handler of event occuring when the new part of series is near to be drawn.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnScroll">
<Description>
Handler of event occuring when the user drags the right mouse button to scroll the chart contents.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnUndoZoom">
<Description>
Handler of event occuring when the chart axes are reset to fit all series points.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnZoom">
<Description>
Handler of event occuring when the chart contents is zoomed by mouse dragging or by the 'ZoomRect' or 'ZoomPercent' methods call.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Page">
<Description>
Represents the number of current page.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RightAxis">
<Description>
Contains oref of the %TMChartAxis object determining attributes of the left axis of the chart.
</Description>
<Type>%Library.TMChartAxis</Type>
</Property>

<Property name="ScaleLastPage">
<Description>
If set to "True", the last page has the same width as the other pages. If set to "False", the width of the last page depends on the number of points on it.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Title">
<Description>
Contains oref of %TMChartTitle object determining the text and format of the chart header.
</Description>
<Type>%Library.TMChartTitle</Type>
</Property>

<Property name="TopAxis">
<Description>
Contains oref of the %TMChartAxis object determining attributes of the top axis of the chart.
</Description>
<Type>%Library.TMChartAxis</Type>
</Property>

<Property name="View3DOptions">
<Description>
Contains oref of %TMView3DOptions allowing to zoom, rotate and scroll the chart.
</Description>
<Type>%Library.TMView3DOptions</Type>
</Property>

<Property name="View3d">
<Description>
Determines, should the 3D effects be simulated (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="View3dWalls">
<Description>
Determines, should the left and bottom walls to be displayed (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.BackImage.%Close()")
 $$$GENERATE(" s ##this.BackImage=##class(%TMBitmap).%New($lb(##this.Address,0,""BackImage""))")
 $$$GENERATE(" d ##this.BottomAxis.%Close()")
 $$$GENERATE(" s ##this.BottomAxis=##class(%TMChartAxis).%New($lb(##this.Address,0,""BottomAxis""))")
 $$$GENERATE(" d ##this.Foot.%Close()")
 $$$GENERATE(" s ##this.Foot=##class(%TMChartTitle).%New($lb(##this.Address,0,""Foot""))")
 $$$GENERATE(" d ##this.Frame.%Close()")
 $$$GENERATE(" s ##this.Frame=##class(%TMChartPen).%New($lb(##this.Address,0,""Frame""))")
 $$$GENERATE(" d ##this.Gradient.%Close()")
 $$$GENERATE(" s ##this.Gradient=##class(%TMChartGradient).%New($lb(##this.Address,0,""Gradient""))")
 $$$GENERATE(" d ##this.LeftAxis.%Close()")
 $$$GENERATE(" s ##this.LeftAxis=##class(%TMChartAxis).%New($lb(##this.Address,0,""LeftAxis""))")
 $$$GENERATE(" d ##this.Legend.%Close()")
 $$$GENERATE(" s ##this.Legend=##class(%TMChartLegend).%New($lb(##this.Address,0,""Legend""))")
 $$$GENERATE(" d ##this.RightAxis.%Close()")
 $$$GENERATE(" s ##this.RightAxis=##class(%TMChartAxis).%New($lb(##this.Address,0,""RightAxis""))")
 $$$GENERATE(" d ##this.Title.%Close()")
 $$$GENERATE(" s ##this.Title=##class(%TMChartTitle).%New($lb(##this.Address,0,""Title""))")
 $$$GENERATE(" d ##this.TopAxis.%Close()")
 $$$GENERATE(" s ##this.TopAxis=##class(%TMChartAxis).%New($lb(##this.Address,0,""TopAxis""))")
 $$$GENERATE(" d ##this.View3DOptions.%Close()")
 $$$GENERATE(" s ##this.View3DOptions=##class(%TMView3DOptions).%New($lb(##this.Address,0,""View3DOptions""))")
 $$$GENERATE(" d ##this.BackWall.%Close()")
 $$$GENERATE(" s ##this.BackWall=##class(%TMChartWall).%New($lb(##this.Address,0,""BackWall""))")
 $$$GENERATE(" d ##this.BottomWall.%Close()")
 $$$GENERATE(" s ##this.BottomWall=##class(%TMChartWall).%New($lb(##this.Address,0,""BottomWall""))")
 $$$GENERATE(" d ##this.LeftWall.%Close()")
 $$$GENERATE(" s ##this.LeftWall=##class(%TMChartWall).%New($lb(##this.Address,0,""LeftWall""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveSeriesLegend">
<Description>
Returns oref of the active series specified by its index.
</Description>
<FormalSpec>SeriesIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("ActiveSeriesLegend",$lb(SeriesIndex)))
 q tmp
]]></Implementation>
</Method>

<Method name="AddSeries">
<Description>
Adds %TMChartSeries object specified by its oref to the chart.
</Description>
<FormalSpec>ASeries:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddSeries",$lb(ASeries.Address))
 q
]]></Implementation>
</Method>

<Method name="AllowPanningGet">
<Description>
Method for getting 'AllowPanning' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowPanning")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowPanningSet">
<Description>
Method for setting 'AllowPanning' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AllowPanning",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowZoomGet">
<Description>
Method for getting 'AllowZoom' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowZoom")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowZoomSet">
<Description>
Method for setting 'AllowZoom' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AllowZoom",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AnimatedZoomGet">
<Description>
Method for getting 'AnimatedZoom' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AnimatedZoom")
 q tmp
]]></Implementation>
</Method>

<Method name="AnimatedZoomSet">
<Description>
Method for setting 'AnimatedZoom' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AnimatedZoom",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AnimatedZoomStepsGet">
<Description>
Method for getting 'AnimatedZoomSteps' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AnimatedZoomSteps")
 q tmp
]]></Implementation>
</Method>

<Method name="AnimatedZoomStepsSet">
<Description>
Method for setting 'AnimatedZoomSteps' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AnimatedZoomSteps",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoSizeGet">
<Description>
Method for getting 'AutoSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSize")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSizeSet">
<Description>
Method for setting 'AutoSize' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AutoSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AxisVisibleGet">
<Description>
Method for getting 'AxisVisible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AxisVisible")
 q tmp
]]></Implementation>
</Method>

<Method name="AxisVisibleSet">
<Description>
Method for setting 'AxisVisible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("AxisVisible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackColorGet">
<Description>
Method for getting 'BackColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackColor")
 q tmp
]]></Implementation>
</Method>

<Method name="BackColorSet">
<Description>
Method for setting 'BackColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("BackColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackImageInsideGet">
<Description>
Method for getting 'BackImageInside' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackImageInside")
 q tmp
]]></Implementation>
</Method>

<Method name="BackImageInsideSet">
<Description>
Method for setting 'BackImageInside' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("BackImageInside",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackImageModeGet">
<Description>
Method for getting 'BackImageMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackImageMode")
 q tmp
]]></Implementation>
</Method>

<Method name="BackImageModeSet">
<Description>
Method for setting 'BackImageMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("BackImageMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Chart3DPercentGet">
<Description>
Method for getting 'Chart3DPercent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Chart3DPercent")
 q tmp
]]></Implementation>
</Method>

<Method name="Chart3DPercentSet">
<Description>
Method for setting 'Chart3DPercent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("Chart3DPercent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ChartPrintRect">
<Description>
Returns coordinates of the printer rectangle (in format $lb(Left,Top,Right,Bottom), in printer pixels).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ChartPrintRect",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ChartXCenter">
<Description>
Returns horizontal coordinate of the chart center (without margins. etc.).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ChartXCenter",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ChartYCenter">
<Description>
Returns vertical coordinate of the chart center (without margins. etc.).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ChartYCenter",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="CheckDataSource">
<Description>
Refreshes all series points data.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CheckDataSource",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChart"
]]></Implementation>
</Method>

<Method name="ClipPointsGet">
<Description>
Method for getting 'ClipPoints' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClipPoints")
 q tmp
]]></Implementation>
</Method>

<Method name="ClipPointsSet">
<Description>
Method for setting 'ClipPoints' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 d ##this.SetProperty("ClipPoints",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CopyToClipboardBitmap">
<Description>
Copies the chart contents to the clipboard as a bitmap.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyToClipboardBitmap",$lb())
 q
]]></Implementation>
</Method>

<Method name="CopyToClipboardMetafile">
<Description>
Copies the chart contents to the clipboard as a Windows (if the 'Enhanced' parameter set to "False") or Enhanced  (if set to "True") metafile.
</Description>
<FormalSpec>Enhanced:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyToClipboardMetafile",$lb(Enhanced))
 q
]]></Implementation>
</Method>

<Method name="ExchangeSeries">
<Description>
Exchanges positions of specified series.
</Description>
<FormalSpec>Series1:%Integer,Series2:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ExchangeSeries",$lb(Series1,Series2))
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..BackImage.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..BackImage,""BackImage"","""")_result")
 $$$GENERATE(" s result=result_..BackWall.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..BackWall,""BackWall"","""")_result")
 $$$GENERATE(" s result=result_..BottomAxis.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..BottomAxis,""BottomAxis"","""")_result")
 $$$GENERATE(" s result=result_..BottomWall.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..BottomWall,""BottomWall"","""")_result")
 $$$GENERATE(" s result=result_..Foot.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Foot,""Foot"","""")_result")
 $$$GENERATE(" s result=result_..Frame.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Frame,""Frame"","""")_result")
 $$$GENERATE(" s result=result_..Gradient.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Gradient,""Gradient"","""")_result")
 $$$GENERATE(" s result=result_..LeftAxis.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..LeftAxis,""LeftAxis"","""")_result")
 $$$GENERATE(" s result=result_..LeftWall.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..LeftWall,""LeftWall"","""")_result")
 $$$GENERATE(" s result=result_..Legend.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Legend,""Legend"","""")_result")
 $$$GENERATE(" s result=result_..RightAxis.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..RightAxis,""RightAxis"","""")_result")
 $$$GENERATE(" s result=result_..Title.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Title,""Title"","""")_result")
 $$$GENERATE(" s result=result_..TopAxis.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..TopAxis,""TopAxis"","""")_result")
 $$$GENERATE(" s result=result_..View3DOptions.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..View3DOptions,""View3DOptions"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetSeries">
<Description>
Returns oref of the series specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMChartSeries</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetSeries",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="IsFreeSeriesColor">
<Description>
Returns "True" if the specified color is not used by any series and (if the 'CheckBackground' parameter set to "True") the chart background, otherwise - "False".
</Description>
<FormalSpec>AColor:%Integer,CheckBackground:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IsFreeSeriesColor",$lb(AColor,CheckBackground))
 q tmp
]]></Implementation>
</Method>

<Method name="IsScreenHighColor">
<Description>
Returns "True" if the current videomode supports more than 256 colors, otherwise - "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IsScreenHighColor",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="MarginBottomGet">
<Description>
Method for getting 'MarginBottom' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MarginBottom")
 q tmp
]]></Implementation>
</Method>

<Method name="MarginBottomSet">
<Description>
Method for setting 'MarginBottom' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MarginBottom",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MarginLeftGet">
<Description>
Method for getting 'MarginLeft' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MarginLeft")
 q tmp
]]></Implementation>
</Method>

<Method name="MarginLeftSet">
<Description>
Method for setting 'MarginLeft' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MarginLeft",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MarginRightGet">
<Description>
Method for getting 'MarginRight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MarginRight")
 q tmp
]]></Implementation>
</Method>

<Method name="MarginRightSet">
<Description>
Method for setting 'MarginRight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MarginRight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MarginTopGet">
<Description>
Method for getting 'MarginTop' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MarginTop")
 q tmp
]]></Implementation>
</Method>

<Method name="MarginTopSet">
<Description>
Method for setting 'MarginTop' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MarginTop",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxPointsPerPageGet">
<Description>
Method for getting 'MaxPointsPerPage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxPointsPerPage")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxPointsPerPageSet">
<Description>
Method for setting 'MaxPointsPerPage' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxPointsPerPage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MonochromeGet">
<Description>
Method for getting 'Monochrome' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Monochrome")
 q tmp
]]></Implementation>
</Method>

<Method name="MonochromeSet">
<Description>
Method for setting 'Monochrome' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Monochrome",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NextPage">
<Description>
Increments the 'Page' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("NextPage",$lb())
 q
]]></Implementation>
</Method>

<Method name="NumPages">
<Description>
Returns the total number of pages into which the series points are divided.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("NumPages",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="OnAfterDrawGet">
<Description>
Method for getting 'OnAfterDraw' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAfterDraw
]]></Implementation>
</Method>

<Method name="OnAfterDrawSet">
<Description>
Method for setting 'OnAfterDraw' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAfterDraw=Value
 d ##this.SetEvent("OnAfterDraw",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnAllowScrollGet">
<Description>
Method for getting 'OnAllowScroll' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAllowScroll
]]></Implementation>
</Method>

<Method name="OnAllowScrollSet">
<Description>
Method for setting 'OnAllowScroll' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAllowScroll=Value
 d ##this.SetEvent("OnAllowScroll",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickAxisGet">
<Description>
Method for getting 'OnClickAxis' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClickAxis
]]></Implementation>
</Method>

<Method name="OnClickAxisSet">
<Description>
Method for setting 'OnClickAxis' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClickAxis=Value
 d ##this.SetEvent("OnClickAxis",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickBackgroundGet">
<Description>
Method for getting 'OnClickBackground' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClickBackground
]]></Implementation>
</Method>

<Method name="OnClickBackgroundSet">
<Description>
Method for setting 'OnClickBackground' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClickBackground=Value
 d ##this.SetEvent("OnClickBackground",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickLegendGet">
<Description>
Method for getting 'OnClickLegend' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClickLegend
]]></Implementation>
</Method>

<Method name="OnClickLegendSet">
<Description>
Method for setting 'OnClickLegend' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClickLegend=Value
 d ##this.SetEvent("OnClickLegend",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickSeriesGet">
<Description>
Method for getting 'OnClickSeries' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClickSeries
]]></Implementation>
</Method>

<Method name="OnClickSeriesSet">
<Description>
Method for setting 'OnClickSeries' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClickSeries=Value
 d ##this.SetEvent("OnClickSeries",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetAxisLabelGet">
<Description>
Method for getting 'OnGetAxisLabel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetAxisLabel
]]></Implementation>
</Method>

<Method name="OnGetAxisLabelSet">
<Description>
Method for setting 'OnGetAxisLabel' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetAxisLabel=Value
 d ##this.SetEvent("OnGetAxisLabel",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetLegendPosGet">
<Description>
Method for getting 'OnGetLegendPos' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetLegendPos
]]></Implementation>
</Method>

<Method name="OnGetLegendPosSet">
<Description>
Method for setting 'OnGetLegendPos' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetLegendPos=Value
 d ##this.SetEvent("OnGetLegendPos",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetLegendRectGet">
<Description>
Method for getting 'OnGetLegendRect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetLegendRect
]]></Implementation>
</Method>

<Method name="OnGetLegendRectSet">
<Description>
Method for setting 'OnGetLegendRect' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetLegendRect=Value
 d ##this.SetEvent("OnGetLegendRect",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetLegendTextGet">
<Description>
Method for getting 'OnGetLegendText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetLegendText
]]></Implementation>
</Method>

<Method name="OnGetLegendTextSet">
<Description>
Method for setting 'OnGetLegendText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetLegendText=Value
 d ##this.SetEvent("OnGetLegendText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetNextAxisLabelGet">
<Description>
Method for getting 'OnGetNextAxisLabel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetNextAxisLabel
]]></Implementation>
</Method>

<Method name="OnGetNextAxisLabelSet">
<Description>
Method for setting 'OnGetNextAxisLabel' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetNextAxisLabel=Value
 d ##this.SetEvent("OnGetNextAxisLabel",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPageChangeGet">
<Description>
Method for getting 'OnPageChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPageChange
]]></Implementation>
</Method>

<Method name="OnPageChangeSet">
<Description>
Method for setting 'OnPageChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPageChange=Value
 d ##this.SetEvent("OnPageChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnScrollGet">
<Description>
Method for getting 'OnScroll' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnScroll
]]></Implementation>
</Method>

<Method name="OnScrollSet">
<Description>
Method for setting 'OnScroll' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnScroll=Value
 d ##this.SetEvent("OnScroll",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnUndoZoomGet">
<Description>
Method for getting 'OnUndoZoom' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnUndoZoom
]]></Implementation>
</Method>

<Method name="OnUndoZoomSet">
<Description>
Method for setting 'OnUndoZoom' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnUndoZoom=Value
 d ##this.SetEvent("OnUndoZoom",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnZoomGet">
<Description>
Method for getting 'OnZoom' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnZoom
]]></Implementation>
</Method>

<Method name="OnZoomSet">
<Description>
Method for setting 'OnZoom' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnZoom=Value
 d ##this.SetEvent("OnZoom",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageGet">
<Description>
Method for getting 'Page' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Page")
 q tmp
]]></Implementation>
</Method>

<Method name="PageSet">
<Description>
Method for setting 'Page' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Page",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PreviousPage">
<Description>
Decrements the 'Page' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PreviousPage",$lb())
 q
]]></Implementation>
</Method>

<Method name="Print">
<Description>
Prints the chart contents to the selected printer.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Print",$lb())
 q
]]></Implementation>
</Method>

<Method name="PrintPartial">
<Description>
Prints the chart contents to the selected printer, scaling the image into the specified rectangle (in format $lb(Left,Top,Right,Bottom)).
</Description>
<FormalSpec>R:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PrintPartial",$lb(R))
 q
]]></Implementation>
</Method>

<Method name="PrintRect">
<Description>
Prints the chart contents to the selected printer, scaling the image into the specified rectangle (in format $lb(Left,Top,Right,Bottom)).
</Description>
<FormalSpec>R:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PrintRect",$lb(R))
 q
]]></Implementation>
</Method>

<Method name="RemoveAllSeries">
<Description>
Deletes all series from the chart.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("RemoveAllSeries",$lb())
 q
]]></Implementation>
</Method>

<Method name="RemoveSeries">
<Description>
Deletes series specified by its index from the chart.
</Description>
<FormalSpec>ASeries:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("RemoveSeries",$lb(ASeries.Address))
 q
]]></Implementation>
</Method>

<Method name="ScaleLastPageGet">
<Description>
Method for getting 'ScaleLastPage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScaleLastPage")
 q tmp
]]></Implementation>
</Method>

<Method name="ScaleLastPageSet">
<Description>
Method for setting 'ScaleLastPage' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScaleLastPage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SeriesCount">
<Description>
Returns the total number of series in the chart.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SeriesCount",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="SeriesDown">
<Description>
Moves to back the series specified by its index.
</Description>
<FormalSpec>ASeries:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SeriesDown",$lb(ASeries.Address))
 q
]]></Implementation>
</Method>

<Method name="SeriesUp">
<Description>
Moves to top the series specified by its index.
</Description>
<FormalSpec>ASeries:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SeriesUp",$lb(ASeries.Address))
 q
]]></Implementation>
</Method>

<Method name="UndoZoom">
<Description>
Resets the chart axes to fit all series points.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("UndoZoom",$lb())
 q
]]></Implementation>
</Method>

<Method name="View3dGet">
<Description>
Method for getting 'View3d' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("View3d")
 q tmp
]]></Implementation>
</Method>

<Method name="View3dSet">
<Description>
Method for setting 'View3d' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("View3d",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="View3dWallsGet">
<Description>
Method for getting 'View3dWalls' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("View3dWalls")
 q tmp
]]></Implementation>
</Method>

<Method name="View3dWallsSet">
<Description>
Method for setting 'View3dWalls' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("View3dWalls",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ZoomPercent">
<Description><![CDATA[
Performs specified zoom (Percent>100 means zoom in, <100 - zoom out).
]]></Description>
<FormalSpec>Percent:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ZoomPercent",$lb(Percent))
 q
]]></Implementation>
</Method>

<Method name="ZoomRect">
<Description>
Performs zoom, resizing the specified rectangle (in format $lb(Left,Top,Right,Bottom)) to the chart dimensions.
</Description>
<FormalSpec>Rect:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ZoomRect",$lb(Rect))
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>BackImage</Value>
</Value>
<Value name="38">
<Value>BackWall</Value>
</Value>
<Value name="39">
<Value>BottomAxis</Value>
</Value>
<Value name="40">
<Value>BottomWall</Value>
</Value>
<Value name="41">
<Value>Foot</Value>
</Value>
<Value name="42">
<Value>Frame</Value>
</Value>
<Value name="43">
<Value>Gradient</Value>
</Value>
<Value name="44">
<Value>LeftAxis</Value>
</Value>
<Value name="45">
<Value>LeftWall</Value>
</Value>
<Value name="46">
<Value>Legend</Value>
</Value>
<Value name="47">
<Value>OnAfterDraw</Value>
</Value>
<Value name="48">
<Value>OnAllowScroll</Value>
</Value>
<Value name="49">
<Value>OnClickAxis</Value>
</Value>
<Value name="50">
<Value>OnClickBackground</Value>
</Value>
<Value name="51">
<Value>OnClickLegend</Value>
</Value>
<Value name="52">
<Value>OnClickSeries</Value>
</Value>
<Value name="53">
<Value>OnGetAxisLabel</Value>
</Value>
<Value name="54">
<Value>OnGetLegendPos</Value>
</Value>
<Value name="55">
<Value>OnGetLegendRect</Value>
</Value>
<Value name="56">
<Value>OnGetLegendText</Value>
</Value>
<Value name="57">
<Value>OnGetNextAxisLabel</Value>
</Value>
<Value name="58">
<Value>OnPageChange</Value>
</Value>
<Value name="59">
<Value>OnScroll</Value>
</Value>
<Value name="60">
<Value>OnUndoZoom</Value>
</Value>
<Value name="61">
<Value>OnZoom</Value>
</Value>
<Value name="62">
<Value>RightAxis</Value>
</Value>
<Value name="63">
<Value>Title</Value>
</Value>
<Value name="64">
<Value>TopAxis</Value>
</Value>
<Value name="65">
<Value>View3DOptions</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartAxis">
<Description>
Describes axis attributes for a %TMChart object.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73316</TimeCreated>

<Property name="Automatic">
<Description>
Determines, should axis limits be calculated automatically for all series (if set to "True") or not (if set to "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutomaticMaximum">
<Description>
Determines, should the axis maximum be calculated automatically according to the maximum values of series (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutomaticMinimum">
<Description>
Determines, should the axis minimum be calculated automatically according to the minimum values of series (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Axis">
<Description>
Contains oref of %TMChartPen object determining drawing mode for axis lines.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="AxisValuesFormat">
<Description>
Contains pattern string for axis values formatting. Default value: "'#,##0.###". '#' means that corresponding digit should be printed if it is not nonsignificant zero. '0' means that nonsignificant zero should be printed too. Pattern for exponential format may look like "0.###E+00".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DateTimeFormat">
<Description>
Contains pattern for date and time formatting. May look like: "dd/mm/yyyy". For details see the '%TMStatusPanel.DateFormat' and '%TMStatusPanel.TimeFormat' descriptions.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ExactDateTime">
<Description>
If set to "True", the time steps be adjusted to exact time units. Default value is "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Grid">
<Description>
Contains oref of %TMChartPen object determining drawing mode for grid lines.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Increment">
<Description><![CDATA[
Determines minimal step between sequential axis labels. For numeric axes must be a positive value. For date/time axes the following values may be used:<br>
"dtOneSecond", "dtFiveSeconds", "dtTenSeconds", "dtFifteenSeconds", "dtThirtySeconds",
"dtOneMinute", "dtFiveMinutes", "dtTenMinutes", "dtFifteenMinutes", "dtThirtyMinutes",
"dtOneHour", "dtTwoHours", "dtSixHours", "dtTwelveHours",
"dtOneDay", "dtTwoDays", "dtThreeDays", "dtOneWeek", "dtHalfMonth",
"dtOneMonth", "dtTwoMonths", "dtSixMonths" or "dtOneYear".
]]></Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Inverted">
<Description>
If set to "True", the minimum and maximum will be swapped. Default value is "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LabelStyle">
<Description><![CDATA[
Determines the axis labeling mode. Possible values:<br>
"talAuto" - automatic mode;<br>
"talNone" - no labeling;<br>
"talValue" - labeling according to the values of 'Minimum' and 'Maximum' properties.<br>
"talMark" - use labels from the '%TMChartSeries.SeriesMarks' property.<br>
"talText" - use labels from the '%TMChartSeries.XLabels' property.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",talAuto,talNone,talValue,talMark,talText"/>
</Property>

<Property name="Labels">
<Description>
Determines, should the axis labels (if set to "True"), or only tics and grid lines (if set to "False") be shown.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LabelsAngle">
<Description>
Specifies how the axis label must be turned. Possible values: 0, 90, 180 or 270 (degrees).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LabelsFont">
<Description>
Contains oref og %TMFont object used for labes drawing.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="LabelsOnAxis">
<Description>
Determines, should be labels on minimum and maximum positions be shown (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LabelsSeparation">
<Description>
Determines minimal interval between sequential axis labels (in percents) to prevent labels overlapping. Default value is 10.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LabelsSize">
<Description>
Determines the distance between the axis and the chart boundary. Default value is 0, that means automatic calculation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Logarithmic">
<Description>
Determines, should the axis be linear (if set to "False") or logarithmic (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Maximum">
<Description>
Determines maximum value on the axis. Applicable only if the 'Automatic' property set to "False".
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Minimum">
<Description>
Determines minimum value on the axis. Applicable only if the 'Automatic' property set to "False".
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinorTickCount">
<Description>
Determines number of sub-ticks between the axis labels. Default value is 3.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinorTickLength">
<Description>
Determines sub-ticks length (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinorTicks">
<Description>
Contains oref of %TMChartPen object determining drawing mode for sub-ticks.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="RoundFirstLabel">
<Description>
Determines, should the axis labeling start from the 'Minimum' value (if set to "False") or the labels should be rounded values (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TickInnerLength">
<Description>
Determines the length (in pixels) of ticks drawn inside the chart boundaries. Default value is 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TickLength">
<Description>
Determines the length (in pixels) of main ticks. Default value is 4.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TickOnLabelsOnly">
<Description>
Determines, should the ticks and grid lines be drawn at labels positions only (if set to "True", default value), or at all axis increment positions (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Ticks">
<Description>
Contains oref of %TMChartPen object determining drawing mode for main ticks.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="TicksInner">
<Description>
Contains oref of %TMChartPen object determining drawing mode for inner ticks.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Title">
<Description>
Contains oref of %TMChartAxisTitle determining attributes of the axis title.
</Description>
<Type>%Library.TMChartAxisTitle</Type>
</Property>

<Property name="TitleSize">
<Description>
Determines the distance between the axis and the chart boundary. Default value is 0, that means automatic calculation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines, should the axis (with labels, ticks, grid lines and title) be visible (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Axis.%Close()")
 $$$GENERATE(" s ##this.Axis=##class(%TMChartPen).%New($lb(##this.Address,0,""Axis""))")
 $$$GENERATE(" d ##this.Grid.%Close()")
 $$$GENERATE(" s ##this.Grid=##class(%TMChartPen).%New($lb(##this.Address,0,""Grid""))")
 $$$GENERATE(" d ##this.LabelsFont.%Close()")
 $$$GENERATE(" s ##this.LabelsFont=##class(%TMFont).%New($lb(##this.Address,0,""LabelsFont""))")
 $$$GENERATE(" d ##this.MinorTicks.%Close()")
 $$$GENERATE(" s ##this.MinorTicks=##class(%TMChartPen).%New($lb(##this.Address,0,""MinorTicks""))")
 $$$GENERATE(" d ##this.Ticks.%Close()")
 $$$GENERATE(" s ##this.Ticks=##class(%TMChartPen).%New($lb(##this.Address,0,""Ticks""))")
 $$$GENERATE(" d ##this.TicksInner.%Close()")
 $$$GENERATE(" s ##this.TicksInner=##class(%TMChartPen).%New($lb(##this.Address,0,""TicksInner""))")
 $$$GENERATE(" d ##this.Title.%Close()")
 $$$GENERATE(" s ##this.Title=##class(%TMChartAxisTitle).%New($lb(##this.Address,0,""Title""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AdjustMaxMin">
<Description>
Assigns 'Minimum' and 'Maximum' properties automatically according to the values of the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AdjustMaxMin",$lb())
 q
]]></Implementation>
</Method>

<Method name="AutomaticGet">
<Description>
Method for getting 'Automatic' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Automatic")
 q tmp
]]></Implementation>
</Method>

<Method name="AutomaticMaximumGet">
<Description>
Method for getting 'AutomaticMaximum' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutomaticMaximum")
 q tmp
]]></Implementation>
</Method>

<Method name="AutomaticMaximumSet">
<Description>
Method for setting 'AutomaticMaximum' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutomaticMaximum",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutomaticMinimumGet">
<Description>
Method for getting 'AutomaticMinimum' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutomaticMinimum")
 q tmp
]]></Implementation>
</Method>

<Method name="AutomaticMinimumSet">
<Description>
Method for setting 'AutomaticMinimum' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutomaticMinimum",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutomaticSet">
<Description>
Method for setting 'Automatic' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Automatic",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AxisValuesFormatGet">
<Description>
Method for getting 'AxisValuesFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AxisValuesFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="AxisValuesFormatSet">
<Description>
Method for setting 'AxisValuesFormat' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AxisValuesFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CalcLabelStyle">
<Description>
If the 'LabelStyle' property is set to "talAuto", returns the recommended value for this property, otherwise returns the value of this property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcLabelStyle",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="CalcPosPoint">
<Description>
Returns the corresponding value for the specified screen position.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcPosPoint",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcRect">
<Description>
Returns the rectangle (in format $lb(Left,Top,Right,Bottom) necessary to display this axis.
</Description>
<FormalSpec>Rect:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcRect",$lb(Rect))
 q
]]></Implementation>
</Method>

<Method name="CalcXPosValue">
<Description>
Returns the corresponding horizontal coordinate (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcXPosValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcXSizeValue">
<Description>
Returns the corresponding horizontal size (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcXSizeValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcXYIncrement">
<Description>
Returns the value increment corresponding to the distance between axis labels.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcXYIncrement",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="CalcYPosValue">
<Description>
Returns the corresponding vertical coordinate (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcYPosValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcYSizeValue">
<Description>
Returns the corresponding vertical size (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcYSizeValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartAxis"
]]></Implementation>
</Method>

<Method name="Clicked">
<Description>
Returns "True" if specified screen position belongs to the axis area, otherwise - "False".
</Description>
<FormalSpec>x:%Integer,y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clicked",$lb(x,y))
 q tmp
]]></Implementation>
</Method>

<Method name="DateTimeFormatGet">
<Description>
Method for getting 'DateTimeFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DateTimeFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="DateTimeFormatSet">
<Description>
Method for setting 'DateTimeFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DateTimeFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExactDateTimeGet">
<Description>
Method for getting 'ExactDateTime' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ExactDateTime")
 q tmp
]]></Implementation>
</Method>

<Method name="ExactDateTimeSet">
<Description>
Method for setting 'ExactDateTime' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ExactDateTime",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Axis.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Axis,""Axis"","""")_result")
 $$$GENERATE(" s result=result_..Grid.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Grid,""Grid"","""")_result")
 $$$GENERATE(" s result=result_..LabelsFont.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..LabelsFont,""LabelsFont"","""")_result")
 $$$GENERATE(" s result=result_..MinorTicks.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..MinorTicks,""MinorTicks"","""")_result")
 $$$GENERATE(" s result=result_..Ticks.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Ticks,""Ticks"","""")_result")
 $$$GENERATE(" s result=result_..TicksInner.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..TicksInner,""TicksInner"","""")_result")
 $$$GENERATE(" s result=result_..Title.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Title,""Title"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="Horizontal">
<Description>
Returns "True" if the axis is horizontal, otherwise - "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Horizontal",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="IncrementGet">
<Description>
Method for getting 'Increment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Increment")
 q tmp
]]></Implementation>
</Method>

<Method name="IncrementSet">
<Description>
Method for setting 'Increment' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Increment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InvertedGet">
<Description>
Method for getting 'Inverted' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Inverted")
 q tmp
]]></Implementation>
</Method>

<Method name="InvertedSet">
<Description>
Method for setting 'Inverted' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Inverted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IsDateTime">
<Description>
Returns "True" if values corresponding to this axis are date/time, otherwise - "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IsDateTime",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="LabelHeight">
<Description>
Calculates the height (in pixels) of label for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LabelHeight",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="LabelStyleGet">
<Description>
Method for getting 'LabelStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LabelStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="LabelStyleSet">
<Description>
Method for setting 'LabelStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LabelStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LabelValue">
<Description>
Returns character representation of the specified value according to the value of the 'AxisValueFormat' or 'DateTimeFormat' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LabelValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="LabelWidth">
<Description>
Calculates the width (in pixels) of label for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LabelWidth",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="LabelsAngleGet">
<Description>
Method for getting 'LabelsAngle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LabelsAngle")
 q tmp
]]></Implementation>
</Method>

<Method name="LabelsAngleSet">
<Description>
Method for setting 'LabelsAngle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LabelsAngle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LabelsGet">
<Description>
Method for getting 'Labels' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Labels")
 q tmp
]]></Implementation>
</Method>

<Method name="LabelsOnAxisGet">
<Description>
Method for getting 'LabelsOnAxis' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LabelsOnAxis")
 q tmp
]]></Implementation>
</Method>

<Method name="LabelsOnAxisSet">
<Description>
Method for setting 'LabelsOnAxis' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LabelsOnAxis",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LabelsSeparationGet">
<Description>
Method for getting 'LabelsSeparation' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LabelsSeparation")
 q tmp
]]></Implementation>
</Method>

<Method name="LabelsSeparationSet">
<Description>
Method for setting 'LabelsSeparation' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LabelsSeparation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LabelsSet">
<Description>
Method for setting 'Labels' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Labels",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LabelsSizeGet">
<Description>
Method for getting 'LabelsSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LabelsSize")
 q tmp
]]></Implementation>
</Method>

<Method name="LabelsSizeSet">
<Description>
Method for setting 'LabelsSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LabelsSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LogarithmicGet">
<Description>
Method for getting 'Logarithmic' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Logarithmic")
 q tmp
]]></Implementation>
</Method>

<Method name="LogarithmicSet">
<Description>
Method for setting 'Logarithmic' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Logarithmic",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLabelsWidth">
<Description>
Calculates the maximal width (in pixels) of all labels.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MaxLabelsWidth",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="MaximumGet">
<Description>
Method for getting 'Maximum' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Maximum")
 q tmp
]]></Implementation>
</Method>

<Method name="MaximumSet">
<Description>
Method for setting 'Maximum' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Maximum",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinimumGet">
<Description>
Method for getting 'Minimum' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Minimum")
 q tmp
]]></Implementation>
</Method>

<Method name="MinimumSet">
<Description>
Method for setting 'Minimum' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Minimum",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinorTickCountGet">
<Description>
Method for getting 'MinorTickCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinorTickCount")
 q tmp
]]></Implementation>
</Method>

<Method name="MinorTickCountSet">
<Description>
Method for setting 'MinorTickCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinorTickCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinorTickLengthGet">
<Description>
Method for getting 'MinorTickLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinorTickLength")
 q tmp
]]></Implementation>
</Method>

<Method name="MinorTickLengthSet">
<Description>
Method for setting 'MinorTickLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinorTickLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OtherSide">
<Description>
Returns "True" for top and right axes and "False" for left and bottom axes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("OtherSide",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="RoundFirstLabelGet">
<Description>
Method for getting 'RoundFirstLabel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RoundFirstLabel")
 q tmp
]]></Implementation>
</Method>

<Method name="RoundFirstLabelSet">
<Description>
Method for setting 'RoundFirstLabel' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RoundFirstLabel",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Scroll">
<Description>
Increments 'Minimum' and 'Maximum' properties by the specified offset to scroll the axis. If the 'InsideLimits' parameter is set to "True", the axis can not be scrolled outside of the series limits.
</Description>
<FormalSpec>Offset:%Float,InsideLimits:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Scroll",$lb(Offset,InsideLimits))
 q
]]></Implementation>
</Method>

<Method name="SetMinMax">
<Description>
Assigns specified values to the 'Minimum' and 'Maximum' properties and sets the 'Automatic' property to "False".
</Description>
<FormalSpec>AMin:%Float,AMax:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetMinMax",$lb(AMin,AMax))
 q
]]></Implementation>
</Method>

<Method name="TickInnerLengthGet">
<Description>
Method for getting 'TickInnerLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TickInnerLength")
 q tmp
]]></Implementation>
</Method>

<Method name="TickInnerLengthSet">
<Description>
Method for setting 'TickInnerLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TickInnerLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TickLengthGet">
<Description>
Method for getting 'TickLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TickLength")
 q tmp
]]></Implementation>
</Method>

<Method name="TickLengthSet">
<Description>
Method for setting 'TickLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TickLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TickOnLabelsOnlyGet">
<Description>
Method for getting 'TickOnLabelsOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TickOnLabelsOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="TickOnLabelsOnlySet">
<Description>
Method for setting 'TickOnLabelsOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TickOnLabelsOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleSizeGet">
<Description>
Method for getting 'TitleSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TitleSize")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSizeSet">
<Description>
Method for setting 'TitleSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TitleSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Axis</Value>
</Value>
<Value name="9">
<Value>Grid</Value>
</Value>
<Value name="10">
<Value>LabelsFont</Value>
</Value>
<Value name="11">
<Value>MinorTicks</Value>
</Value>
<Value name="12">
<Value>Ticks</Value>
</Value>
<Value name="13">
<Value>TicksInner</Value>
</Value>
<Value name="14">
<Value>Title</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartAxisTitle">
<Description>
Determines the text and format of an axis title.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73317</TimeCreated>

<Property name="Angle">
<Description>
Specifies how the axis title must be turned. Possible values: 0, 90, 180 or 270 (degrees). Default values: 0 - for horizontal axes, 90 - for left axis, 270 - for right axis.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Caption">
<Description>
Contains the text string to be displayed near the axes.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Font">
<Description>
Contains oref of %TMFont object determining font attributes for the axis title.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Font.%Close()")
 $$$GENERATE(" s ##this.Font=##class(%TMFont).%New($lb(##this.Address,0,""Font""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AngleGet">
<Description>
Method for getting 'Angle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Angle")
 q tmp
]]></Implementation>
</Method>

<Method name="AngleSet">
<Description>
Method for setting 'Angle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Angle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartAxisTitle"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Font</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartGradient">
<Description>
Determines colors for filling a chart background.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73317</TimeCreated>

<Property name="Direction">
<Description>
Determines the gradient fill direction. Possible values:
"gdTopBottom", "gdBottomTop", "gdLeftRight" and "gdRightLeft".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",gdTopBottom,gdBottomTop,gdLeftRight,gdRightLeft,gdFromCenter,gdFromTopLeft,gdFromBottomLeft"/>
</Property>

<Property name="EndColor">
<Description>
Specifies 2nd of 2 colors (in hexadecimal RGB format) from which the gradient fill should be composed.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StartColor">
<Description>
Specifies 1st of 2 colors (in hexadecimal RGB format) from which the gradient fill should be composed.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines, should the chart background be filled with this gradient (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartGradient"
]]></Implementation>
</Method>

<Method name="DirectionGet">
<Description>
Method for getting 'Direction' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Direction")
 q tmp
]]></Implementation>
</Method>

<Method name="DirectionSet">
<Description>
Method for setting 'Direction' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Direction",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndColorGet">
<Description>
Method for getting 'EndColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EndColor")
 q tmp
]]></Implementation>
</Method>

<Method name="EndColorSet">
<Description>
Method for setting 'EndColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("EndColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StartColorGet">
<Description>
Method for getting 'StartColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StartColor")
 q tmp
]]></Implementation>
</Method>

<Method name="StartColorSet">
<Description>
Method for setting 'StartColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StartColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMChartLegend">
<Description>
Represents a chart legend object with properties and methods allowing to display and control rectangle containing brief information about chart series.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73317</TimeCreated>

<Property name="Alignment">
<Description>
Determines the legend layout on the chart. Possible values: "laLeft", "laRight", "laTop", "laBottom".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",laLeft,laRight,laTop,laBottom"/>
</Property>

<Property name="Color">
<Description>
Determines the color of legend background (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColorWidth">
<Description>
Determines the width of the color mark (in percents of the total width of the legend).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DividingLines">
<Description>
Contains oref of %TMChartPen object used for drawing legend items dividing lines.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="FirstValue">
<Description>
Determines number of the first displayed series, or number of the first displayed point, depending on the 'LegendStyle' property value.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Font">
<Description>
Contains oref of %TMFont object determining font attributes for the legend texts.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="Frame">
<Description>
Contains oref of %TMChartPen object determining drawing mode for the legend border.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="HorizMargin">
<Description>
Determines the distance (in pixels) between the right- or left-aligned legend rectangle and the chart boundary. Default value: 0, means automatic calculation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Inverted">
<Description>
Specifies direction of the legend items drawing. If set to "False", items are drawn from top to bottom and from left to right, if set to "True" - in the inverted direction.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LegendStyle">
<Description><![CDATA[
Determines items to be shown in the legend. Possible values:<br>
"lsSeries" - show titles of the series;<br>
"lsValues" - show values of the first active series;<br>
"lsLastValues" - show the last values for all active series;<br>
"lsAuto" - acts as "lsValues" if there is only 1 active series, otherwise - as "lsValues".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",lsAuto,lsSeries,lsValues,lsLastValues"/>
</Property>

<Property name="RectLegend">
<Description>
Readonly, contains the legend coordinates (in format $lb(Left,Top,Right,Bottom)).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ResizeChart">
<Description>
Determines, may the chart rectangle may be reduced automatically to aviod overlapping with the legend (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShadowColor">
<Description>
Determines color of the legend shadow (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShadowSize">
<Description>
Determines the width (in pixels) of the legend shadow.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TextStyle">
<Description><![CDATA[
Determines the text items contents. Possible values:<br>
"ltsPlain" - display the point label;<br>
"ltsLeftValue" -  display the point value followed by the label;<br>
"ltsRightValue" - display the point label followed by the value;<br>
"ltsLeftPercent" - display the percent of the point represents followed by the label;<br>
"ltsRightPercent" - display the label followed by the percent of the points represent;<br>
"ltsXValue" - display the horizontal value.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ltsPlain,ltsLeftValue,ltsRightValue,ltsLeftPercent,ltsRightPercent,ltsXValue"/>
</Property>

<Property name="TopPos">
<Description>
Determines the height of the horizontal legend top (in percents of the legend total height).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VertMargin">
<Description>
Determines the distance (in pixels) between the top- or bottom-aligned legend rectangle and the chart boundary. Default value: 0, means automatic calculation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines, should the legend be shown (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.DividingLines.%Close()")
 $$$GENERATE(" s ##this.DividingLines=##class(%TMChartPen).%New($lb(##this.Address,0,""DividingLines""))")
 $$$GENERATE(" d ##this.Font.%Close()")
 $$$GENERATE(" s ##this.Font=##class(%TMFont).%New($lb(##this.Address,0,""Font""))")
 $$$GENERATE(" d ##this.Frame.%Close()")
 $$$GENERATE(" s ##this.Frame=##class(%TMChartPen).%New($lb(##this.Address,0,""Frame""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartLegend"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColorWidthGet">
<Description>
Method for getting 'ColorWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColorWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorWidthSet">
<Description>
Method for setting 'ColorWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColorWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FirstValueGet">
<Description>
Method for getting 'FirstValue' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FirstValue")
 q tmp
]]></Implementation>
</Method>

<Method name="FirstValueSet">
<Description>
Method for setting 'FirstValue' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FirstValue",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FormattedLegend">
<Description>
Returns the text for the specified position in the legend.
</Description>
<FormalSpec>SeriesOrValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FormattedLegend",$lb(SeriesOrValueIndex))
 q tmp
]]></Implementation>
</Method>

<Method name="FormattedValue">
<Description>
Returns the text for the specified series value in the legend.
</Description>
<FormalSpec>ASeries:%String,ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FormattedValue",$lb(ASeries.Address,ValueIndex))
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..DividingLines.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..DividingLines,""DividingLines"","""")_result")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" s result=result_..Frame.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Frame,""Frame"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetColorRect">
<Description>
Returns coordinates of rectangle (in format $lb(Left,Top,Right,Bottom)) necessary for displaying color marks.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetColorRect",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="HorizMarginGet">
<Description>
Method for getting 'HorizMargin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HorizMargin")
 q tmp
]]></Implementation>
</Method>

<Method name="HorizMarginSet">
<Description>
Method for setting 'HorizMargin' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HorizMargin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InvertedGet">
<Description>
Method for getting 'Inverted' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Inverted")
 q tmp
]]></Implementation>
</Method>

<Method name="InvertedSet">
<Description>
Method for setting 'Inverted' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Inverted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LegendStyleGet">
<Description>
Method for getting 'LegendStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LegendStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="LegendStyleSet">
<Description>
Method for setting 'LegendStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LegendStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLegendWidth">
<Description>
Returns the width (in pixels) of the longest text string in the legend.
</Description>
<FormalSpec>NumLegendValues:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MaxLegendWidth",$lb(NumLegendValues))
 q tmp
]]></Implementation>
</Method>

<Method name="RectLegendGet">
<Description>
Method for getting 'RectLegend' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RectLegend")
 q tmp
]]></Implementation>
</Method>

<Method name="RectLegendSet">
<Description>
Method for setting 'RectLegend' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RectLegend",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ResizeChartGet">
<Description>
Method for getting 'ResizeChart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ResizeChart")
 q tmp
]]></Implementation>
</Method>

<Method name="ResizeChartSet">
<Description>
Method for setting 'ResizeChart' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ResizeChart",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShadowColorGet">
<Description>
Method for getting 'ShadowColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShadowColor")
 q tmp
]]></Implementation>
</Method>

<Method name="ShadowColorSet">
<Description>
Method for setting 'ShadowColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShadowColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShadowSizeGet">
<Description>
Method for getting 'ShadowSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShadowSize")
 q tmp
]]></Implementation>
</Method>

<Method name="ShadowSizeSet">
<Description>
Method for setting 'ShadowSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShadowSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextStyleGet">
<Description>
Method for getting 'TextStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TextStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="TextStyleSet">
<Description>
Method for setting 'TextStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TextStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TopPosGet">
<Description>
Method for getting 'TopPos' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopPos")
 q tmp
]]></Implementation>
</Method>

<Method name="TopPosSet">
<Description>
Method for setting 'TopPos' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopPos",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VertMarginGet">
<Description>
Method for getting 'VertMargin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VertMargin")
 q tmp
]]></Implementation>
</Method>

<Method name="VertMarginSet">
<Description>
Method for setting 'VertMargin' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VertMargin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>DividingLines</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>Frame</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartPen">
<Description>
This class is inherited from %TMPen and contains additional properties necesssary for charts.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPen</Super>
<TimeCreated>64314,73317</TimeCreated>

<Property name="Visible">
<Description>
If set to "True", the lines drawn by this pen are visible, if set to "False" - hidden.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartPen"
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMChartSeries">
<Description>
Base class for different kinds of chart series.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73317</TimeCreated>

<Property name="Active">
<Description>
Determines, should the series be shown (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AfterDrawValues">
<Description>
Handler of event occuring immediately after the series points painting.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BeforeDrawValues">
<Description>
Handler of event occuring immediately before the series points painting.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ColorEachPoint">
<Description>
Determines, should all the points have the same color specified in the 'SeriesColor' property (if set to "False"), or use different colors accessible via 'GetValueColor' and 'SetValueColor' methods (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColorSource">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Cursor">
<Description>
Determines type of cursor used on mouse moves over a series point. For possible values see the '%Const.INC' routime. Default value is $$$crDefault.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DataSource">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Identifier">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Marks">
<Description>
Contains oref of %TMSeriesMarks object determining properies of marks near the series points.
</Description>
<Type>%Library.TMSeriesMarks</Type>
</Property>

<Property name="OnAfterAdd">
<Description>
Handler of event occuring when a new point has been included into the series.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeforeAdd">
<Description>
Handler of event occuring when a new point is near to be included into the series.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClearValues">
<Description>
Handler of event occuring when all points has been excluded from the series.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClick">
<Description>
Handler of event occuring when user clicks on a series point.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDblClick">
<Description>
Handler of event occuring when user double-clicks on a series point.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetMarkText">
<Description>
Handler of event occuring when a MarkText string is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ParentChart">
<Description>
Contains oref of the chart to which this series is attached.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PercentFormat">
<Description>
Contains pattern for formatting percent-style marks. For possible values see the '%TMChartAxis.AxisValuesFormat' description.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SeriesColor">
<Description>
Determines color (in hexadecimal RGB format) used for points painting when the 'ColorEachPoint' property is set to "False".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowInLegend">
<Description>
Determines, should the series title be included into the chart legend (if set to "True") or not (if set to "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(tssIsTemplate,tssDenyChangeType,tssDenyDelete,tssDenyClone,tssIsPersistent,tssHideDataSource)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this series.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Title">
<Description>
Determines the text string to be displayed in the chart legend.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ValueFormat">
<Description>
Contains pattern for formatting marks values. For possible values see the '%TMChartAxis.AxisValuesFormat' description.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="VertAxis">
<Description>
Determines, left or right axis should be used for the vertical scaling. Possible values: "aLeftAxis" or "aRightAxis".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="XLabelsSource">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="XValues">
<Description>
Contains oref of %TMChartValueList with the horizontal values of the series points.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="XYValues">
<Description>
For internal use.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="YValues">
<Description>
Contains oref of %TMChartValueList with the vertical values of the series points.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Marks.%Close()")
 $$$GENERATE(" s ##this.Marks=##class(%TMSeriesMarks).%New($lb(##this.Address,0,""Marks""))")
 $$$GENERATE(" d ##this.XYValues.%Close()")
 $$$GENERATE(" s ##this.XYValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""XYValues""))")
 $$$GENERATE(" d ##this.XValues.%Close()")
 $$$GENERATE(" s ##this.XValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""XValues""))")
 $$$GENERATE(" d ##this.YValues.%Close()")
 $$$GENERATE(" s ##this.YValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""YValues""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveGet">
<Description>
Method for getting 'Active' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Active")
 q tmp
]]></Implementation>
</Method>

<Method name="ActiveSet">
<Description>
Method for setting 'Active' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Active",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Add">
<Description>
Adds a point with the specified vertical value to the series. Horizontal value will be calculated automatically. Returns the index of added point in the %TMChartValueList object.
</Description>
<FormalSpec>AValue:%Float,ALabel:%String,AColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Add",$lb(AValue,ALabel,AColor))
 q tmp
]]></Implementation>
</Method>

<Method name="AddNull">
<Description>
Adds empty point to the series. Such point breaks the line connecting sequential points. Returns index of the added point in the %TMChartValueList object.
</Description>
<FormalSpec>ALabel:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddNull",$lb(ALabel))
 q tmp
]]></Implementation>
</Method>

<Method name="AddValue">
<Description>
For internal use.
</Description>
<FormalSpec>ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddValue",$lb(ValueIndex))
 q
]]></Implementation>
</Method>

<Method name="AddXY">
<Description>
Adds a point with the specified horizontal and vertical value to the series. Returns index of the added point in the %TMChartValueList object.
</Description>
<FormalSpec>AXValue:%Float,AYValue:%Float,AXLabel:%String,AColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddXY",$lb(AXValue,AYValue,AXLabel,AColor))
 q tmp
]]></Implementation>
</Method>

<Method name="AddY">
<Description>
Adds a point with the specified vertical value to the series. Horizontal value will be calculated automatically. Returns the index of added point in the %TMChartValueList object.
</Description>
<FormalSpec>AYValue:%Float,AXLabel:%String,AColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddY",$lb(AYValue,AXLabel,AColor))
 q tmp
]]></Implementation>
</Method>

<Method name="AfterDrawValuesGet">
<Description>
Method for getting 'AfterDrawValues' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%AfterDrawValues
]]></Implementation>
</Method>

<Method name="AfterDrawValuesSet">
<Description>
Method for setting 'AfterDrawValues' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%AfterDrawValues=Value
 d ##this.SetEvent("AfterDrawValues",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeforeDrawValuesGet">
<Description>
Method for getting 'BeforeDrawValues' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%BeforeDrawValues
]]></Implementation>
</Method>

<Method name="BeforeDrawValuesSet">
<Description>
Method for setting 'BeforeDrawValues' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%BeforeDrawValues=Value
 d ##this.SetEvent("BeforeDrawValues",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="CalcXPos">
<Description>
Returns the corresponding horizontal coordinate (in pixels) for the point specified by its index.
</Description>
<FormalSpec>ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcXPos",$lb(ValueIndex))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcXPosValue">
<Description>
Returns the corresponding horizontal coordinate (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcXPosValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcXSizeValue">
<Description>
Returns the corresponding horizontal size (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcXSizeValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcYPos">
<Description>
Returns the corresponding vertical coordinate (in pixels) for the point specified by its index.
</Description>
<FormalSpec>ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcYPos",$lb(ValueIndex))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcYPosValue">
<Description>
Returns the corresponding vertical coordinate (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcYPosValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CalcYSizeValue">
<Description>
Returns the corresponding vertical size (in pixels) for the specified value.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CalcYSizeValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="CheckDataSource">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CheckDataSource",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartSeries"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all points from the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="Clicked">
<Description>
Returns index of clicked series point or -1 if specified screen position does not belong to any series point.
</Description>
<FormalSpec>x:%Integer,y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clicked",$lb(x,y))
 q tmp
]]></Implementation>
</Method>

<Method name="ColorEachPointGet">
<Description>
Method for getting 'ColorEachPoint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColorEachPoint")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorEachPointSet">
<Description>
Method for setting 'ColorEachPoint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColorEachPoint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColorRange">
<Description>
Sets specified color (in hexadecimal RGB format) to the points specified by their %TMChartValueList oref and the range of indices.
</Description>
<FormalSpec>AValueList:%Integer,FromValue:%Float,ToValue:%Float,AColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ColorRange",$lb(AValueList.Address,FromValue,ToValue,AColor))
 q
]]></Implementation>
</Method>

<Method name="ColorSourceGet">
<Description>
Method for getting 'ColorSource' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColorSource")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSourceSet">
<Description>
Method for setting 'ColorSource' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColorSource",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Count">
<Description>
Returns total number of points in the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Count",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="CursorGet">
<Description>
Method for getting 'Cursor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Cursor")
 q tmp
]]></Implementation>
</Method>

<Method name="CursorSet">
<Description>
Method for setting 'Cursor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Cursor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Description>
Method for getting 'DataSource' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DataSource")
 q tmp
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<Description>
Method for setting 'DataSource' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DataSource",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Removes the point specified by its index from the series.
</Description>
<FormalSpec>ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb(ValueIndex))
 q
]]></Implementation>
</Method>

<Method name="FillSampleValues">
<Description>
Populates the series with specified number of points.
</Description>
<FormalSpec>NumValues:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FillSampleValues",$lb(NumValues))
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Marks.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Marks,""Marks"","""")_result")
 $$$GENERATE(" s result=result_..XValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..XValues,""XValues"","""")_result")
 $$$GENERATE(" s result=result_..XYValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..XYValues,""XYValues"","""")_result")
 $$$GENERATE(" s result=result_..YValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..YValues,""YValues"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetCursorValueIndex">
<Description>
Returns index of the point nearest to the mouse cursor, or -1 if all points are far from it.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetCursorValueIndex",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetHorizAxis">
<Description>
Determines, what horizontal axis is associated with this series - "TopAxis" or "BottomAxis".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetHorizAxis",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetMarkValue">
<Description>
Returns the value to be shown at the specified mark (usually YValue, for some exclusions like '%TMHorizBarSeries' - XValue).
</Description>
<FormalSpec>ValueIndex:Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetMarkValue",$lb(ValueIndex))
 q tmp
]]></Implementation>
</Method>

<Method name="GetValueColor">
<Description>
Returns the color (in hexadecimal RGB format) for displaying the specified series point when 'ColorEachPoint' property is set to "True".
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValueColor",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetValueMarkText">
<Description>
Returns the text for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValueMarkText",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetXLabel">
<Description>
Returns the horizontal label for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetXLabel",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetXValue">
<Description>
Returns the horizontal value for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetXValue",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetYValue">
<Description>
Returns the vertical value for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetYValue",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="IdentifierGet">
<Description>
Method for getting 'Identifier' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Identifier")
 q tmp
]]></Implementation>
</Method>

<Method name="IdentifierSet">
<Description>
Method for setting 'Identifier' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Identifier",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MandatoryValueList">
<Description>
Returns oref of %TMChartValueList object containing most significant values (usually YValue, for some exclusions like '%TMHorizBarSeries' - XValue) for the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMChartValueList</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("MandatoryValueList",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="MarkPercent">
<Description>
Returns text representation of the specified value for displaying precent-style mark. If the 'AddTotal' parameter is "True", the percent value will be separated from the main text by " of " string.
</Description>
<FormalSpec>ValueIndex:%Integer,AddTotal:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MarkPercent",$lb(ValueIndex,AddTotal))
 q tmp
]]></Implementation>
</Method>

<Method name="MaxMarkWidth">
<Description>
Returns maximal width (in pixels) of all marks in the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MaxMarkWidth",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="MaxXValue">
<Description>
Returns the maximal horizontal value of all marks in the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MaxXValue",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="MaxYValue">
<Description>
Returns the maximal horizontal value of all marks in the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MaxYValue",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="MinXValue">
<Description>
Returns the minimal horizontal value of all marks in the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MinXValue",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="MinYValue">
<Description>
Returns the minimal vertical value of all marks in the series.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MinYValue",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="NumSampleValues">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("NumSampleValues",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="OnAfterAddGet">
<Description>
Method for getting 'OnAfterAdd' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAfterAdd
]]></Implementation>
</Method>

<Method name="OnAfterAddSet">
<Description>
Method for setting 'OnAfterAdd' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnAfterAdd=Value
 d ##this.SetEvent("OnAfterAdd",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeAddGet">
<Description>
Method for getting 'OnBeforeAdd' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeforeAdd
]]></Implementation>
</Method>

<Method name="OnBeforeAddSet">
<Description>
Method for setting 'OnBeforeAdd' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnBeforeAdd=Value
 d ##this.SetEvent("OnBeforeAdd",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClearValuesGet">
<Description>
Method for getting 'OnClearValues' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClearValues
]]></Implementation>
</Method>

<Method name="OnClearValuesSet">
<Description>
Method for setting 'OnClearValues' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnClearValues=Value
 d ##this.SetEvent("OnClearValues",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickGet">
<Description>
Method for getting 'OnClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClick
]]></Implementation>
</Method>

<Method name="OnClickSet">
<Description>
Method for setting 'OnClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClick=Value
 d ##this.SetEvent("OnClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDblClickGet">
<Description>
Method for getting 'OnDblClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDblClick
]]></Implementation>
</Method>

<Method name="OnDblClickSet">
<Description>
Method for setting 'OnDblClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDblClick=Value
 d ##this.SetEvent("OnDblClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetMarkTextGet">
<Description>
Method for getting 'OnGetMarkText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetMarkText
]]></Implementation>
</Method>

<Method name="OnGetMarkTextSet">
<Description>
Method for setting 'OnGetMarkText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetMarkText=Value
 d ##this.SetEvent("OnGetMarkText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentChartGet">
<Description>
Method for getting 'ParentChart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("ParentChart"))
 q tmp
]]></Implementation>
</Method>

<Method name="ParentChartSet">
<Description>
Method for setting 'ParentChart' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ParentChart",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PercentFormatGet">
<Description>
Method for getting 'PercentFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PercentFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="PercentFormatSet">
<Description>
Method for setting 'PercentFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PercentFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PointOrigin">
<Description>
Calculates summed values returned by the 'GetMarkValue' methods. Applicable to '%TMAreaSeries', '%TMBarSeries' and '%TMHorizBarSeries'.
</Description>
<FormalSpec>ValueIndex:%Integer,SumAll:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PointOrigin",$lb(ValueIndex,SumAll))
 q tmp
]]></Implementation>
</Method>

<Method name="SeriesColorGet">
<Description>
Method for getting 'SeriesColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("SeriesColor")
]]></Implementation>
</Method>

<Method name="SeriesColorSet">
<Description>
Method for setting 'SeriesColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("SeriesColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetValueColor">
<Description>
Assigns the color (in hexadecimal RGB format) for displaying the specified series point when 'ColorEachPoint' property is set to "True".
</Description>
<FormalSpec>Index:%Integer,Color:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetValueColor",$lb(Index,Color))
 q
]]></Implementation>
</Method>

<Method name="SetValueMarkText">
<Description>
Assigns the text for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetValueMarkText",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetXLabel">
<Description>
Assigns the horizontal label for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetXLabel",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetXValue">
<Description>
Assigns the horizontal value for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer,Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetXValue",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetYValue">
<Description>
Assigns the vertical value for displaying the specified series point.
</Description>
<FormalSpec>Index:%Integer,Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetYValue",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="ShowInLegendGet">
<Description>
Method for getting 'ShowInLegend' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowInLegend")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowInLegendSet">
<Description>
Method for setting 'ShowInLegend' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowInLegend",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SwapValueIndex">
<Description>
Swaps 2 points (specified by their indices) in the series.
</Description>
<FormalSpec>a:%Integer,b:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SwapValueIndex",$lb(a,b))
 q
]]></Implementation>
</Method>

<Method name="TitleGet">
<Description>
Method for getting 'Title' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Title")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSet">
<Description>
Method for setting 'Title' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Title",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ValueFormatGet">
<Description>
Method for getting 'ValueFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ValueFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="ValueFormatSet">
<Description>
Method for setting 'ValueFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ValueFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VertAxisGet">
<Description>
Method for getting 'VertAxis' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VertAxis")
 q tmp
]]></Implementation>
</Method>

<Method name="VertAxisSet">
<Description>
Method for setting 'VertAxis' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VertAxis",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleCount">
<Description>
Returns number of points with XValues from the range between the minimum and maximum of the horizontal axis.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("VisibleCount",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="XLabelsSourceGet">
<Description>
Method for getting 'XLabelsSource' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XLabelsSource")
 q tmp
]]></Implementation>
</Method>

<Method name="XLabelsSourceSet">
<Description>
Method for setting 'XLabelsSource' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XLabelsSource",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XScreenToValue">
<Description>
Converts horizontal screen coordinate to the corresponding value.
</Description>
<FormalSpec>ScreenPos:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("XScreenToValue",$lb(ScreenPos))
 q tmp
]]></Implementation>
</Method>

<Method name="XValueToText">
<Description>
Returns the text representation of the specified value.
</Description>
<FormalSpec>AValue:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("XValueToText",$lb(AValue))
 q tmp
]]></Implementation>
</Method>

<Method name="YScreenToValue">
<Description>
Converts vertical screen coordinate to the corresponding value.
</Description>
<FormalSpec>ScreenPos:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("YScreenToValue",$lb(ScreenPos))
 q tmp
]]></Implementation>
</Method>

<Method name="YValueToText">
<Description>
Returns the text representation of the specified value.
</Description>
<FormalSpec>AValue:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("YValueToText",$lb(AValue))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartShape">
<Description>
This class is derived from %TMChartSeries and allows to draw shapes in the corresponding
places of the chart. The shape type is determined by the 'Style' property, possible values are:
"chasRectangle", "chasCircle", "chasVertLine", "chasHorizLine", "chasTriangle",
"chasInvertTriangle", "chasLine" or "chasDiamond".
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMChartSeries</Super>
<TimeCreated>64314,73318</TimeCreated>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside the target rectangle. Possible values: "taLeftJustify", "taRightJustify" or "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="Bounds">
<Description>
Determines the bounding rectangle (in format $lb(Left,Top,Right,Bottom), in axes rather than screen coordinates) for the shape.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Brush">
<Description>
Contains oref of %TMBrush object determining the color and pattern used when the shapes background filling.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="Font">
<Description>
Contains oref of %TMFont object determining the font attributes for displaying the 'Text' property.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="Pen">
<Description>
Contains oref of %TMChartPen object determining attributes of the pen for the shapes drawing.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="RoundRectangle">
<Description>
Determines, should the rectangles be drawn with rounded corners (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Text">
<Description>
Contains oref of %TMStrings object with collection of strings to be displayed inside the shapes.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="Transparent">
<Description>
Determines, should the shapes interior be filled (if set to "False", default value) or remain unchanged (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="X0">
<Description>
Determines the axis coordinate of the left edge of the bounding rectangle.
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="X1">
<Description>
Determines the axis coordinate of the right edge of the bounding rectangle.
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="XYStyle">
<Description>
Possible values: "xysPixels", "xysAxis"," xysAxisOrigin"
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",xysPixels,xysAxis,xysAxisOrigin"/>
</Property>

<Property name="Y0">
<Description>
Determines the axis coordinate of the top edge of the bounding rectangle.
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Y1">
<Description>
Determines the axis coordinate of the bottom edge of the bounding rectangle.
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Brush.%Close()")
 $$$GENERATE(" s ##this.Brush=##class(%TMBrush).%New($lb(##this.Address,0,""Brush""))")
 $$$GENERATE(" d ##this.Font.%Close()")
 $$$GENERATE(" s ##this.Font=##class(%TMFont).%New($lb(##this.Address,0,""Font""))")
 $$$GENERATE(" d ##this.Pen.%Close()")
 $$$GENERATE(" s ##this.Pen=##class(%TMChartPen).%New($lb(##this.Address,0,""Pen""))")
 $$$GENERATE(" d ##this.Text.%Close()")
 $$$GENERATE(" s ##this.Text=##class(%TMStrings).%New($lb(##this.Address,0,""Text""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BoundsGet">
<Description>
Method for getting 'Bounds' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Bounds")
 q tmp
]]></Implementation>
</Method>

<Method name="BoundsSet">
<Description>
Method for setting 'Bounds' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Bounds",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartShape"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" s result=##class(=%TMChartSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" s result=result_..Pen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pen,""Pen"","""")_result")
 $$$GENERATE(" s result=result_..Text.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Text,""Text"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="RoundRectangleGet">
<Description>
Method for getting 'RoundRectangle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RoundRectangle")
 q tmp
]]></Implementation>
</Method>

<Method name="RoundRectangleSet">
<Description>
Method for setting 'RoundRectangle' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RoundRectangle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentGet">
<Description>
Method for getting 'Transparent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Transparent")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentSet">
<Description>
Method for setting 'Transparent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Transparent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="X0Get">
<Description>
Method for getting 'X0' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("X0")
 q tmp
]]></Implementation>
</Method>

<Method name="X0Set">
<Description>
Method for setting 'X0' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("X0",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="X1Get">
<Description>
Method for getting 'X1' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("X1")
 q tmp
]]></Implementation>
</Method>

<Method name="X1Set">
<Description>
Method for setting 'X1' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("X1",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XYStyleGet">
<Description>
Method for getting 'XYStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XYStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="XYStyleSet">
<Description>
Method for setting 'XYStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XYStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Y0Get">
<Description>
Method for getting 'Y0' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Y0")
 q tmp
]]></Implementation>
</Method>

<Method name="Y0Set">
<Description>
Method for setting 'Y0' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Y0",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Y1Get">
<Description>
Method for getting 'Y1' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Y1")
 q tmp
]]></Implementation>
</Method>

<Method name="Y1Set">
<Description>
Method for setting 'Y1' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Y1",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>Brush</Value>
</Value>
<Value name="24">
<Value>Font</Value>
</Value>
<Value name="25">
<Value>Pen</Value>
</Value>
<Value name="26">
<Value>Text</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartTitle">
<Description>
Allows to display a chart title or footer (depending on corresponding %TMChart properties).
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73318</TimeCreated>

<Property name="AdjustFrame">
<Description>
Determines, should the title and the footer be resized to the chart size (if set to "True", default value) or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside the target rectangle. Possible values: "taLeftJustify", "taRightJustify" or "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="Brush">
<Description>
Contains oref of %TMBrush object determining the color and pattern used when the title and footer background filling.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="Font">
<Description>
Contains oref of %TMFont object determining the font attributes for displaying the 'Text' property.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="Frame">
<Description>
Contains oref of %TMChartPen object determining attributes of the pen for drawing frame around the chart axis.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Text">
<Description>
Contains oref of %TMStrings object with collection of strings to be displayed as the chart title or footer.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="TitleRect">
<Description>
Determines the bounding rectangle for title or footer (in format $lb(Left,Top,Right,Bottom).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Visible">
<Description>
Determines, should the title or footer be shown (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Brush.%Close()")
 $$$GENERATE(" s ##this.Brush=##class(%TMBrush).%New($lb(##this.Address,0,""Brush""))")
 $$$GENERATE(" d ##this.Font.%Close()")
 $$$GENERATE(" s ##this.Font=##class(%TMFont).%New($lb(##this.Address,0,""Font""))")
 $$$GENERATE(" d ##this.Frame.%Close()")
 $$$GENERATE(" s ##this.Frame=##class(%TMChartPen).%New($lb(##this.Address,0,""Frame""))")
 $$$GENERATE(" d ##this.Text.%Close()")
 $$$GENERATE(" s ##this.Text=##class(%TMStrings).%New($lb(##this.Address,0,""Text""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AdjustFrameGet">
<Description>
Method for getting 'AdjustFrame' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AdjustFrame")
 q tmp
]]></Implementation>
</Method>

<Method name="AdjustFrameSet">
<Description>
Method for setting 'AdjustFrame' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AdjustFrame",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartTitle"
]]></Implementation>
</Method>

<Method name="Clicked">
<Description>
Returns "True" if specified screen position belongs to this title or footer area, otherwise - "False".
</Description>
<FormalSpec>x:%Integer,y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clicked",$lb(x,y))
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" s result=result_..Frame.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Frame,""Frame"","""")_result")
 $$$GENERATE(" s result=result_..Text.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Text,""Text"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleRectGet">
<Description>
Method for getting 'TitleRect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TitleRect")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleRectSet">
<Description>
Method for setting 'TitleRect' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TitleRect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Brush</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>Frame</Value>
</Value>
<Value name="11">
<Value>Text</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMChartValueList">
<Description>
Represents collection of values of series points.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73318</TimeCreated>

<Property name="DateTime">
<Description>
Determines, have values numeric (if set to "False") or datetime (if set to "True") format.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Multiplier">
<Description>
Comtains the multiplier for conversion points values.
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Name">
<Description>
Identifies the value list. Necessary if a series has more than one value list.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Order">
<Description>
Determines the points sorting mode by the XValues. Possible values: "loAscending", "loDescending" or "loNone".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",loNone,loAscending,loDescending"/>
</Property>

<Property name="ValueSource">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="AddChartValue">
<Description>
For internal use.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddChartValue",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartValueList"
]]></Implementation>
</Method>

<Method name="ClearList">
<Description>
Deletes all point values from the list.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearList",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearValues">
<Description>
Deletes all point values from the list.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearValues",$lb())
 q
]]></Implementation>
</Method>

<Method name="Count">
<Description>
Returns the number of points values in the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Count",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="DateTimeGet">
<Description>
Method for getting 'DateTime' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DateTime")
 q tmp
]]></Implementation>
</Method>

<Method name="DateTimeSet">
<Description>
Method for setting 'DateTime' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DateTime",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Deletes value specified by its index from the collection.
</Description>
<FormalSpec>ValueIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb(ValueIndex))
 q
]]></Implementation>
</Method>

<Method name="First">
<Description>
Returns the value of the first point in the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("First",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetValue">
<Description>
Returns the value specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValue",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="InsertChartValue">
<Description>
For internal use.
</Description>
<FormalSpec>ValueIndex:%Integer,Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InsertChartValue",$lb(ValueIndex,Value))
 q
]]></Implementation>
</Method>

<Method name="Last">
<Description>
Returns the value of the last point in the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Last",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Locate">
<Description>
Returns index of the specified value or -1 if there is no such value in the collection.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Locate",$lb(Value))
 q tmp
]]></Implementation>
</Method>

<Method name="ModifyValue">
<Description>
Changes the value of point specified by its index without raising any events.
</Description>
<FormalSpec>ValueIndex:%Integer,AValue:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ModifyValue",$lb(ValueIndex,AValue))
 q
]]></Implementation>
</Method>

<Method name="MultiplierGet">
<Description>
Method for getting 'Multiplier' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Multiplier")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiplierSet">
<Description>
Method for setting 'Multiplier' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Multiplier",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NameGet">
<Description>
Method for getting 'Name' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Name")
]]></Implementation>
</Method>

<Method name="NameSet">
<Description>
Method for setting 'Name' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("Name",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OrderGet">
<Description>
Method for getting 'Order' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Order")
 q tmp
]]></Implementation>
</Method>

<Method name="OrderSet">
<Description>
Method for setting 'Order' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Order",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RecalcMinMax">
<Description>
Recalculated minimum and maximum values for the corresponding axis.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("RecalcMinMax",$lb())
 q
]]></Implementation>
</Method>

<Method name="Scroll">
<Description>
Performs left cyclic shift of the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Scroll",$lb())
 q
]]></Implementation>
</Method>

<Method name="SetValue">
<Description>
Assigns the value of point specified by its index.
</Description>
<FormalSpec>Index:%Integer,Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetValue",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="Sort">
<Description>
Reorders the points in the collection according to the 'Order' property value.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Sort",$lb())
 q
]]></Implementation>
</Method>

<Method name="ValueSourceGet">
<Description>
Method for getting 'ValueSource' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ValueSource")
 q tmp
]]></Implementation>
</Method>

<Method name="ValueSourceSet">
<Description>
Method for setting 'ValueSource' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ValueSource",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMChartWall">
<Description>
This class contains properties allowing to control the left and bottom chart walls painting.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73319</TimeCreated>

<Property name="Brush">
<Description>
Contains oref of %TMBrush object determining the color and pattern used when the wall background filling.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="Color">
<Description>
Determines color (in hexadecimal RGB format) for the wall background filling.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Pen">
<Description>
Contains oref of %TMChartPen object determining attributes of the pen for the wall frame drawing.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Size">
<Description>
Determines the wall thickness (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Brush.%Close()")
 $$$GENERATE(" s ##this.Brush=##class(%TMBrush).%New($lb(##this.Address,0,""Brush""))")
 $$$GENERATE(" d ##this.Pen.%Close()")
 $$$GENERATE(" s ##this.Pen=##class(%TMChartPen).%New($lb(##this.Address,0,""Pen""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMChartWall"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" s result=result_..Pen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pen,""Pen"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGet">
<Description>
Method for getting 'Size' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Size")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeSet">
<Description>
Method for setting 'Size' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Brush</Value>
</Value>
<Value name="9">
<Value>Pen</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMCheckBox">
<Description>
This class represents the server-side image of a windows check box . It's methods and properties allow to control state (checked/unchecked/grayed) of check boxes.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73319</TimeCreated>

<Property name="Alignment">
<Description>
Determines the check box caption alignment.
Possible values: "taLeftJustify" or "taRightJustify", default is "taLeftJustify".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify"/>
</Property>

<Property name="AllowGrayed">
<Description>
Determines, is a "grayed" state allowed for the check box.
If set to "True", the check box can be checked, unchecked or grayed. If set to "False", only two states are possible: checked or unchecked.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Checked">
<Description>
Represents the presence of a check mark in the check box. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="State">
<Description>
Represents state of the check box. Possible values: "cbUnchecked", "cbChecked" or "cbGrayed".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",cbUnchecked,cbChecked,cbGrayed"/>
</Property>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowGrayedGet">
<Description>
Method for getting 'AllowGrayed' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowGrayed")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowGrayedSet">
<Description>
Method for setting 'AllowGrayed' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllowGrayed",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckedGet">
<Description>
Method for getting 'Checked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Checked")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckedSet">
<Description>
Method for setting 'Checked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Checked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMCheckBox"
]]></Implementation>
</Method>

<Method name="StateGet">
<Description>
Method for getting 'State' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("State")
 q tmp
]]></Implementation>
</Method>

<Method name="StateSet">
<Description>
Method for setting 'State' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("State",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMCheckListBox">
<Description>
Represents the server-side image of a standard Windows control showing the list of items that can be selected, scrolled, added, deleted or checked.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73319</TimeCreated>

<Property name="AllowGrayed">
<Description>
Determines, is a "grayed" state allowed for the check box.
If set to "True", the check box can be checked, unchecked or grayed. If set to "False", only two states are possible: checked or unchecked.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutoComplete">
<Description>
Determines whether the user can give focus to items by typing in the list..
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderStyle">
<Description>
If set to "bsSingle", the list view will have a single-line border. "bsNone" means no border.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas which may be used for drawing on the listbox control from the OnDrawItem events handler.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Columns">
<Description>
For multicolumn listboxes, represents the number of columns visible without scrolling.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Flat">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HeaderBackgroundColor">
<Description>
Specifies the background color for a header item in the listbox.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HeaderColor">
<Description>
Specifies the font color for a header item in the list box.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="IntegralHeight">
<Description>
If this property is set to "True" and the listbox style is "lsOwnerDrawFixed", only integer number of items can be visible, otherwise, some items can be shown partially.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemHeight">
<Description>
Specifies the height of the listbox items (in pixels). Has sense only for "lsOwnerDrawFixed" and "lsOwnerDrawVariable" values of the Style property. Can be overriden by the value set in OnMeasureItem event handler.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemIndex">
<Description>
Represents the number of the selected listbox item (numbering starts from 0). Equals to -1 if no items selected.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Items">
<Description>
Collection of the checklistbox items. Use %TMString methods (Add, Insert, Move, Delete, IndexOf) to operate with separate items.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="OnClickCheck">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawItem">
<Description>
Contains handler for event occuring when an item in an owner-draw checklistbox is to be displayed. Handler may use %TMCanvas methods to add graphic elements to the item or to replace the item text by an image.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMeasureItem">
<Description>
Contains handler for event occuring when an item in a owner-draw-variable checklistbox is to be redisplayed. The handler should specify the height (in pixels), necessary to draw an item.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SelCount">
<Description>
Read only, contains the number of selected items if multiselect is allowed.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Sorted">
<Description>
Determines, should the checklistbox items be sorted in alphabetic order (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the style of the checklistbox. The possible values:
"lbStandard" - all items have the same height.<br>
"lbOwnerDrawFixed" - owner-draw listbox, with the OnDrawItem event occuring when an item is to be drawn; all items height is determined by the ItemHeight property.<br>
"lbOwnerDrawVariable" - owner-draw listbox,  with the OnDrawItem and OnMeasureItem events occuring when an item is to be drawn; items can have different heights.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",lbStandard,lbOwnerDrawFixed,lbOwnerDrawVariable"/>
</Property>

<Property name="TabWidth">
<Description>
Determines the tabs size for this checklistbox. If set to 0, the default Windows setting is used.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TopIndex">
<Description>
Represents the index of the topmost visible item in the checklistbox.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" d ##this.Items.%Close()")
 $$$GENERATE(" s ##this.Items=##class(%TMStrings).%New($lb(##this.Address,0,""Items""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowGrayedGet">
<Description>
Method for getting 'AllowGrayed' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowGrayed")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowGrayedSet">
<Description>
Method for setting 'AllowGrayed' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllowGrayed",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoCompleteGet">
<Description>
Method for getting 'AutoComplete' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoComplete")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoCompleteSet">
<Description>
Method for setting 'AutoComplete' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoComplete",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property..
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMCheckListBox"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all items from the listbox.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="ColumnsGet">
<Description>
Method for getting 'Columns' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Columns")
 q tmp
]]></Implementation>
</Method>

<Method name="ColumnsSet">
<Description>
Method for setting 'Columns' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Columns",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FlatGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Flat")
]]></Implementation>
</Method>

<Method name="FlatSet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("Flat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetChecked">
<Description>
Returns "True" if the item with specified Index is checked, otherwise - "False".
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetChecked",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetSelected">
<Description>
Returns "True" if the item with specified Index is selected, otherwise - "False".
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetSelected",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetState">
<Description><![CDATA[
Returns state of listbox item specified by its Index. Possible values:<br>
"cbUnchecked", "cbChecked" or "cbGrayed".
]]></Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetState",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="HeaderBackgroundColorGet">
<Description>
Method for getting 'HeaderBackgroundColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HeaderBackgroundColor")
 q tmp
]]></Implementation>
</Method>

<Method name="HeaderBackgroundColorSet">
<Description>
Method for setting 'HeaderBackgroundColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HeaderBackgroundColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HeaderColorGet">
<Description>
Method for getting 'HeaderColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HeaderColor")
 q tmp
]]></Implementation>
</Method>

<Method name="HeaderColorSet">
<Description>
Method for setting 'HeaderColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HeaderColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IntegralHeightGet">
<Description>
Method for getting 'IntegralHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("IntegralHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="IntegralHeightSet">
<Description>
Method for setting 'IntegralHeight' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("IntegralHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemAtPos">
<Description>
Returns the index of the listbox item at the specified position of the control. The Pos parameter should contain $lb(X,Y), the Existing parameter determines, will the method return -1 (if set to "True") or last item index+1 (if set to "False") when no item found at the specified position.
</Description>
<FormalSpec>Pos:%String,Existing:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ItemAtPos",$lb(Pos,Existing))
 q tmp
]]></Implementation>
</Method>

<Method name="ItemHeightGet">
<Description>
Method for getting 'ItemHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemHeightSet">
<Description>
Method for setting 'ItemHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemIndexGet">
<Description>
Method for getting 'ItemIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemIndexSet">
<Description>
Method for setting 'ItemIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemRect">
<Description>
Returns  the coordinates ($lb(Left,Top,Right,Bottom)) of the item specified by the Item parameter.
</Description>
<FormalSpec>Item:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ItemRect",$lb(Item))
 q tmp
]]></Implementation>
</Method>

<Method name="OnClickCheckGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClickCheck
]]></Implementation>
</Method>

<Method name="OnClickCheckSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnClickCheck=Value
 d ##this.SetEvent("OnClickCheck",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawItemGet">
<Description>
Method for getting 'OnDrawItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawItem
]]></Implementation>
</Method>

<Method name="OnDrawItemSet">
<Description>
Method for setting 'OnDrawItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawItem=Value
 d ##this.SetEvent("OnDrawItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMeasureItemGet">
<Description>
Method for getting 'OnMeasureItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMeasureItem
]]></Implementation>
</Method>

<Method name="OnMeasureItemSet">
<Description>
Method for setting 'OnMeasureItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMeasureItem=Value
 d ##this.SetEvent("OnMeasureItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelCountGet">
<Description>
Method for getting 'SelCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelCount")
 q tmp
]]></Implementation>
</Method>

<Method name="SelCountSet">
<Description>
Method for setting 'SelCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetChecked">
<Description>
Checks (if Value is "True") or unchecks (if Value is "False") the item specified by the Index.
</Description>
<FormalSpec>Index:%Integer,Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetChecked",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetSelected">
<Description>
Selects (if Value is "True") or deselects (if Value is "False") the item specified by the Index.
</Description>
<FormalSpec>Index:%Integer,Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetSelected",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetState">
<Description><![CDATA[
Sets state of listbox item specified by its Index. Possible values of Value:<br>
"cbUnchecked", "cbChecked" or "cbGrayed".
]]></Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetState",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SortedGet">
<Description>
Method for getting 'Sorted' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Sorted")
 q tmp
]]></Implementation>
</Method>

<Method name="SortedSet">
<Description>
Method for setting 'Sorted' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Sorted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabWidthGet">
<Description>
Method for getting 'TabWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="TabWidthSet">
<Description>
Method for setting 'TabWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TopIndexGet">
<Description>
Method for getting 'TopIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="TopIndexSet">
<Description>
Method for setting 'TopIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Items</Value>
</Value>
<Value name="39">
<Value>OnClickCheck</Value>
</Value>
<Value name="40">
<Value>OnDrawItem</Value>
</Value>
<Value name="41">
<Value>OnMeasureItem</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMClientDataSet">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73319</TimeCreated>

<Property name="Active">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FieldDefs">
<Type>%Library.TMFieldDefs</Type>
</Property>

<Property name="LogicalName">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MasterFields">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MasterSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnOpen">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..FieldDefs.%Close()")
 $$$GENERATE(" s ..FieldDefs=##class(%TMFieldDefs).%New($lb(..Address,0,""FieldDefs""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveGet">
<Description>
Method for getting 'Active' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Active")
 q tmp
]]></Implementation>
</Method>

<Method name="ActiveSet">
<Description>
Method for setting 'Active' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Active",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddRow">
<Description>
Adds new row into dataset. Value is $LB() of corresponded columns.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("AddRow",$LB(Value))
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMClientDataSet"
]]></Implementation>
</Method>

<Method name="Clear">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Clear",$LB())
 q
]]></Implementation>
</Method>

<Method name="Close">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Close",$LB())
 q
]]></Implementation>
</Method>

<Method name="First">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ d ..RunMethod("First",$LB())
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..FieldDefs.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..FieldDefs,""FieldDefs"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetValue">
<Description>
Returns Value at specified column number in current record.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValue",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetValues">
<Description>
Returns list of all fields in current record in order, specified in
field's definition.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValues",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Last">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ d ..RunMethod("Last",$LB())
]]></Implementation>
</Method>

<Method name="LogicalNameGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("LogicalName")
]]></Implementation>
</Method>

<Method name="LogicalNameSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("LogicalName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MasterFieldsGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("MasterFields")
]]></Implementation>
</Method>

<Method name="MasterFieldsSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("MasterFields",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MasterSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("MasterSource"))
]]></Implementation>
</Method>

<Method name="MasterSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value=0 s tmp=""
 e  s tmp=Value.Address
 d ..SetProperty("MasterSource",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Next">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ d ..RunMethod("Next",$LB())
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnOpenGet">
<Description>
Method for getting 'OnOpen' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnOpen
]]></Implementation>
</Method>

<Method name="OnOpenSet">
<Description>
Method for setting 'OnOpen' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnOpen=Value
 d ##this.SetEvent("OnOpen",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Open">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Open",$LB())
 q
]]></Implementation>
</Method>

<Method name="Prior">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ d ..RunMethod("Prior",$LB())
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>FieldDefs</Value>
</Value>
<Value name="9">
<Value>MasterSource</Value>
</Value>
<Value name="10">
<Value>OnClose</Value>
</Value>
<Value name="11">
<Value>OnOpen</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMColorDialog">
<Description><![CDATA[
This class enables color selecting modal dialog. The <i>Execute</i> method activates dialog, after the dialog completed, the <i>Color</i> property contains selected color.
]]></Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73319</TimeCreated>

<Property name="Color">
<Description>
Contains the value of color selected in the dialog box (in hexadecimal RGB format) or determines default color when dialog box opens. Macros from %Const.INC may be used here.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Ctl3D">
<Description>
Determines, should the control look three-dimensional (if set to "True") or flat (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CustomColors">
<Description>
Contains oref of the %TMString object with values of custom colors available in the dialog.
Each string should be in the format "Color(A-P)=hexadecimal RGB".
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this dialog.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnClose">
<Description>
Handler of event occuring when the dialog is about to be closed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Description><![CDATA[
Handler of event occuring when the form is shown as a result of <i>Execute<i>method.
]]></Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Description><![CDATA[
Determines the diaolg options. Possible value: Cache' list ($lb) where only necessary from the following strings are combined:<br>
"cdFullOpen" - enable custom color options;<br>
"cdPreventFullOpen" - disable the "Define Custom Colors" button;<br>
"cdShowHelp" - enable "Help" button;<br>
"cdSolidColor" - use the nearest solid color to the selected one;<br>
"cdAnyColor" - enables dithered colors selection.<br>
Default value: $lb().
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(cdFullOpen,cdPreventFullOpen,cdShowHelp,cdSolidColor,cdAnyColor)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..CustomColors.%Close()")
 $$$GENERATE(" s ..CustomColors=##class(%TMStrings).%New($lb(..Address,0,""CustomColors""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMColorDialog"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Execute">
<Description><![CDATA[
Activates dialog. Returns "True" if color is selected, or "False" if dialog was canceled. If successful, selected color is avaliable via <i>Color</i> property.
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Execute",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..CustomColors.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..CustomColors,""CustomColors"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>CustomColors</Value>
</Value>
<Value name="9">
<Value>OnClose</Value>
</Value>
<Value name="10">
<Value>OnShow</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMComBuffer">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73320</TimeCreated>

<Property name="InputSize">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OutputSize">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMComBuffer"
]]></Implementation>
</Method>

<Method name="InputSizeGet">
<Description>
Method for getting 'InputSize' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("InputSize")
 q tmp
]]></Implementation>
</Method>

<Method name="InputSizeSet">
<Description>
Method for setting 'InputSize' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("InputSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OutputSizeGet">
<Description>
Method for getting 'OutputSize' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OutputSize")
 q tmp
]]></Implementation>
</Method>

<Method name="OutputSizeSet">
<Description>
Method for setting 'OutputSize' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OutputSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMComFlowControl">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73320</TimeCreated>

<Property name="ControlDTR">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dtrDisable,dtrEnable,dtrHandshake"/>
</Property>

<Property name="ControlRTS">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",rtsDisable,rtsEnable,rtsHandshake,rtsToggle"/>
</Property>

<Property name="DSRSensitivity">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FlowControl">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fcHardware,fcSoftware,fcNone,fcCustom"/>
</Property>

<Property name="OutCTSFlow">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OutDSRFlow">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TxContinueOnXoff">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="XoffChar">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="XonChar">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="XonXoffIn">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="XonXoffOut">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMComFlowControl"
]]></Implementation>
</Method>

<Method name="ControlDTRGet">
<Description>
Method for getting 'ControlDTR' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ControlDTR")
 q tmp
]]></Implementation>
</Method>

<Method name="ControlDTRSet">
<Description>
Method for setting 'ControlDTR' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ControlDTR",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ControlRTSGet">
<Description>
Method for getting 'ControlRTS' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ControlRTS")
 q tmp
]]></Implementation>
</Method>

<Method name="ControlRTSSet">
<Description>
Method for setting 'ControlRTS' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ControlRTS",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DSRSensitivityGet">
<Description>
Method for getting 'DSRSensitivity' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DSRSensitivity")
 q tmp
]]></Implementation>
</Method>

<Method name="DSRSensitivitySet">
<Description>
Method for setting 'DSRSensitivity' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DSRSensitivity",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FlowControlGet">
<Description>
Method for getting 'FlowControl' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("FlowControl"))
 q tmp
]]></Implementation>
</Method>

<Method name="FlowControlSet">
<Description>
Method for setting 'FlowControl' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FlowControl",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OutCTSFlowGet">
<Description>
Method for getting 'OutCTSFlow' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OutCTSFlow")
 q tmp
]]></Implementation>
</Method>

<Method name="OutCTSFlowSet">
<Description>
Method for setting 'OutCTSFlow' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OutCTSFlow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OutDSRFlowGet">
<Description>
Method for getting 'OutDSRFlow' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OutDSRFlow")
 q tmp
]]></Implementation>
</Method>

<Method name="OutDSRFlowSet">
<Description>
Method for setting 'OutDSRFlow' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OutDSRFlow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TxContinueOnXoffGet">
<Description>
Method for getting 'TxContinueOnXoff' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TxContinueOnXoff")
 q tmp
]]></Implementation>
</Method>

<Method name="TxContinueOnXoffSet">
<Description>
Method for setting 'TxContinueOnXoff' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TxContinueOnXoff",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XoffCharGet">
<Description>
Method for getting 'XoffChar' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XoffChar")
 q tmp
]]></Implementation>
</Method>

<Method name="XoffCharSet">
<Description>
Method for setting 'XoffChar' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XoffChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XonCharGet">
<Description>
Method for getting 'XonChar' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XonChar")
 q tmp
]]></Implementation>
</Method>

<Method name="XonCharSet">
<Description>
Method for setting 'XonChar' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XonChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XonXoffInGet">
<Description>
Method for getting 'XonXoffIn' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XonXoffIn")
 q tmp
]]></Implementation>
</Method>

<Method name="XonXoffInSet">
<Description>
Method for setting 'XonXoffIn' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XonXoffIn",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XonXoffOutGet">
<Description>
Method for getting 'XonXoffOut' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XonXoffOut")
 q tmp
]]></Implementation>
</Method>

<Method name="XonXoffOutSet">
<Description>
Method for setting 'XonXoffOut' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XonXoffOut",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMComParity">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73320</TimeCreated>

<Property name="Bits">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",prNone,prOdd,prEven,prMark,prSpace"/>
</Property>

<Property name="Check">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Replace">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ReplaceChar">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="BitsGet">
<Description>
Method for getting 'Bits' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Bits")
 q tmp
]]></Implementation>
</Method>

<Method name="BitsSet">
<Description>
Method for setting 'Bits' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Bits",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckGet">
<Description>
Method for getting 'Check' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Check")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckSet">
<Description>
Method for setting 'Check' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Check",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMComParity"
]]></Implementation>
</Method>

<Method name="ReplaceCharGet">
<Description>
Method for getting 'ReplaceChar' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReplaceChar")
 q tmp
]]></Implementation>
</Method>

<Method name="ReplaceCharSet">
<Description>
Method for setting 'ReplaceChar' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReplaceChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReplaceGet">
<Description>
Method for getting 'Replace' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Replace")
 q tmp
]]></Implementation>
</Method>

<Method name="ReplaceSet">
<Description>
Method for setting 'Replace' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Replace",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMComPort">
<Description>
This class provides methods and properties enabling access to COM-ports on a client's computer.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73320</TimeCreated>

<Property name="BaudRate">
<Description><![CDATA[
Represents baud rate for the COM-port connection. Possible values:<br>
"br110", "br300", "br600", "br1200", "br2400", "br4800", "br9600", "br14400", "br19200",
"br38400", "br56000", "br57600", "br115200".<br>
Note that both sides of the connection must have equal baud rates.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",brCustom,br110,br300,br600,br1200,br2400,br4800,br9600,br14400,br19200,br38400,br56000,br57600,br115200,br128000,br256000"/>
</Property>

<Property name="Buffer">
<Description>
Contains oref of %TMComBuffer object associated with the COM-port buffer.
</Description>
<Type>%Library.TMComBuffer</Type>
</Property>

<Property name="Connected">
<Description>
Contains "True" if the COM-port is opened successfully, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DataBits">
<Description><![CDATA[
Determines number of data bits. Possible values:<br>
"dbFive", "dbSix", "dbSeven", "dbEight".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dbFive,dbSix,dbSeven,dbEight"/>
</Property>

<Property name="DiscardNull">
<Description>
Determines, should null bytes be discarded (if set to "True") or accepted (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EventChar">
<Description>
Specifies ASCII-code of byte, receiving of which raises "OnRxFlag" event.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Events">
<Description><![CDATA[
Contains Cache' list ($lb()) of strings determining which events should be monitored. Possible values of these strings:<br>
"evRxChar", "evTxEmpty", "evRxFlag", "evRing", "evBreak", "evCTS", "evDSR", "evError",
"evRLSD", "evRx80Full".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(evRxChar,evTxEmpty,evRxFlag,evRing,evBreak,evCTS,evDSR,evError,evRLSD,evRx80Full)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FlowControl">
<Description>
Contains oref of %TMComFlowControl object associated with this COM-port.
</Description>
<Type>%Library.TMComFlowControl</Type>
</Property>

<Property name="Name">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnAfterClose">
<Description>
Handler of event occuring when the COM-port has been successfully disconnected (by 'Close' method call or by setting 'Connected' property to "False").
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnAfterOpen">
<Description>
Handler of event occuring when the COM-port has been successfully connected (by 'Open' method call or by setting 'Connected' property to "True").
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeforeClose">
<Description>
Handler of event occuring when the COM-port is near to be disconnected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeforeOpen">
<Description>
Handler of event occuring when the COM-port is near to be connected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBreak">
<Description>
Handler of event occuring when break of input has been detected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCTSChange">
<Description>
Handler of event occuring when the Clear-To-Send signal is changed (if 'OnOff' parameter is "True" - from low to high, otherwise - from high to low).
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDSRChange">
<Description>
Handler of event occuring when the Data-Send-Ready signal is changed (if 'OnOff' parameter is "True" - from low to high, otherwise - from high to low).
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnError">
<Description>
Handler of event occuring when data status error has been detected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRLSDChange">
<Description>
Handler of event occuring when the Receive-Line-Signal-Detected signal is changed (if 'OnOff' parameter is "True" - from low to high, otherwise - from high to low).
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRing">
<Description>
Handler of event occuring when ring indicator has been detected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRx80Full">
<Description>
Handler of event occuring when input buffer 80%-full.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRxBuf">
<Description>
Handler of event occuring when input data have been read by some other component, such data are available via the 'Buffer' parameter.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRxChar">
<Description>
Handler of event occuring when input byte(s) has been arrived.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRxFlag">
<Description>
Handler of event occuring when the byte specified in 'EventChar' property has been arrived.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnTxEmpty">
<Description>
Handler of event occuring when all data from the output buffer have been sent.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Parity">
<Description>
Contains oref of %TMComParity object associated with this COM-port.
</Description>
<Type>%Library.TMComParity</Type>
</Property>

<Property name="Port">
<Description>
Specifies the name of used COM-port. Possible values: "COM1", "COM2", etc.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="StopBits">
<Description><![CDATA[
Determines number of stop bits. Possible values:<br>
"sbOneStopBit", "sbOne5StopBits", "sbTwoStopBits".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",sbOneStopBit,sbOne5StopBits,sbTwoStopBits"/>
</Property>

<Property name="SyncMethod">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",smThreadSync,smWindowSync,smNone"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary value associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Timeouts">
<Description>
Contains oref of %TMComportTimeouts object associated with this COM-port.
</Description>
<Type>%Library.TMComTimeouts</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Buffer.%Close()")
 $$$GENERATE(" s ##this.Buffer=##class(%TMComBuffer).%New($lb(##this.Address,0,""Buffer""))")
 $$$GENERATE(" d ##this.FlowControl.%Close()")
 $$$GENERATE(" s ##this.FlowControl=##class(%TMComFlowControl).%New($lb(##this.Address,0,""FlowControl""))")
 $$$GENERATE(" d ##this.Parity.%Close()")
 $$$GENERATE(" s ##this.Parity=##class(%TMComParity).%New($lb(##this.Address,0,""Parity""))")
 $$$GENERATE(" d ##this.Timeouts.%Close()")
 $$$GENERATE(" s ##this.Timeouts=##class(%TMComTimeouts).%New($lb(##this.Address,0,""Timeouts""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AbortAllAsync">
<Description>
Cancels all incomplete asynchronous operations.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AbortAllAsync",$lb())
 q
]]></Implementation>
</Method>

<Method name="BaudRateGet">
<Description>
Method for getting 'BaudRate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BaudRate")
 q tmp
]]></Implementation>
</Method>

<Method name="BaudRateSet">
<Description>
Method for setting 'BaudRate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BaudRate",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
Postpones changes of port settings until 'EndUpdate' method will be called.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMComPort"
]]></Implementation>
</Method>

<Method name="ClearBuffer">
<Description>
Clears input and/or output buffer(s), as specified by 'Input' and 'Output' parameters.
</Description>
<FormalSpec>Input:%Boolean,Output:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearBuffer",$lb(Input,Output))
 q
]]></Implementation>
</Method>

<Method name="Close">
<Description>
Disconnects from the COM-port.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Close",$lb())
 q
]]></Implementation>
</Method>

<Method name="ConnectedGet">
<Description>
Method for getting 'Connected' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Connected")
 q tmp
]]></Implementation>
</Method>

<Method name="ConnectedSet">
<Description>
Method for setting 'Connected' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Connected",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataBitsGet">
<Description>
Method for getting 'DataBits' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DataBits")
 q tmp
]]></Implementation>
</Method>

<Method name="DataBitsSet">
<Description>
Method for setting 'DataBits' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DataBits",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DiscardNullGet">
<Description>
Method for getting 'DiscardNull' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DiscardNull")
 q tmp
]]></Implementation>
</Method>

<Method name="DiscardNullSet">
<Description>
Method for setting 'DiscardNull' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DiscardNull",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
Applies port settings postponed after 'BeginUpdate' method call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="EventCharGet">
<Description>
Method for getting 'EventChar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EventChar")
 q tmp
]]></Implementation>
</Method>

<Method name="EventCharSet">
<Description>
Method for setting 'EventChar' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("EventChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EventsGet">
<Description>
Method for getting 'Events' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Events")
 q tmp
]]></Implementation>
</Method>

<Method name="EventsSet">
<Description>
Method for setting 'Events' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Events",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Buffer.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Buffer,""Buffer"","""")_result")
 $$$GENERATE(" s result=result_..FlowControl.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..FlowControl,""FlowControl"","""")_result")
 $$$GENERATE(" s result=result_..Parity.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Parity,""Parity"","""")_result")
 $$$GENERATE(" s result=result_..Timeouts.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Timeouts,""Timeouts"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="InputCount">
<Description>
Returns number of bytes in the input buffer.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InputCount",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="IsAsyncCompleted">
<Description>
Contains "False" while asynchronous operations are in progress or "True" if all these operations have been completed.
</Description>
<FormalSpec>AsyncPtr:%TMAsync</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IsAsyncCompleted",$lb(AsyncPtr))
 q tmp
]]></Implementation>
</Method>

<Method name="LastErrors">
<Description><![CDATA[
Returns Cache' list ($lb()) of error codes occured since previous call of this method.
Possible error codes:<br>
"ceFrame" - framing error;<br>
"ceRxParity" - parity error;<br>
"ceOverrun" - character buffer overrun, last byte has been lost;<br>
"ceBreak" - break detected;<br>
"ceIO" - communication error;<br>
"ceMode" - unsupported mode;<br>
"ceRxOver" - input buffer overflow;<br>
"ceTxFull" - output buffer overflow.
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LastErrors",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="NameGet">
<Description>
Method for getting 'Name' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Name")
 q tmp
]]></Implementation>
</Method>

<Method name="NameSet">
<Description>
Method for setting 'Name' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Name",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCloseGet">
<Description>
Method for getting 'OnAfterClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAfterClose
]]></Implementation>
</Method>

<Method name="OnAfterCloseSet">
<Description>
Method for setting 'OnAfterClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAfterClose=Value
 d ##this.SetEvent("OnAfterClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterOpenGet">
<Description>
Method for getting 'OnAfterOpen' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAfterOpen
]]></Implementation>
</Method>

<Method name="OnAfterOpenSet">
<Description>
Method for setting 'OnAfterOpen' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAfterOpen=Value
 d ##this.SetEvent("OnAfterOpen",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeCloseGet">
<Description>
Method for getting 'OnBeforeClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeforeClose
]]></Implementation>
</Method>

<Method name="OnBeforeCloseSet">
<Description>
Method for setting 'OnBeforeClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeforeClose=Value
 d ##this.SetEvent("OnBeforeClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeOpenGet">
<Description>
Method for getting 'OnBeforeOpen' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeforeOpen
]]></Implementation>
</Method>

<Method name="OnBeforeOpenSet">
<Description>
Method for setting 'OnBeforeOpen' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeforeOpen=Value
 d ##this.SetEvent("OnBeforeOpen",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBreakGet">
<Description>
Method for getting 'OnBreak' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBreak
]]></Implementation>
</Method>

<Method name="OnBreakSet">
<Description>
Method for setting 'OnBreak' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBreak=Value
 d ##this.SetEvent("OnBreak",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCTSChangeGet">
<Description>
Method for getting 'OnCTSChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCTSChange
]]></Implementation>
</Method>

<Method name="OnCTSChangeSet">
<Description>
Method for setting 'OnCTSChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCTSChange=Value
 d ##this.SetEvent("OnCTSChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDSRChangeGet">
<Description>
Method for getting 'OnDSRChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDSRChange
]]></Implementation>
</Method>

<Method name="OnDSRChangeSet">
<Description>
Method for setting 'OnDSRChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDSRChange=Value
 d ##this.SetEvent("OnDSRChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnErrorGet">
<Description>
Method for getting 'OnError' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnError
]]></Implementation>
</Method>

<Method name="OnErrorSet">
<Description>
Method for setting 'OnError' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnError=Value
 d ##this.SetEvent("OnError",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRLSDChangeGet">
<Description>
Method for getting 'OnRLSDChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRLSDChange
]]></Implementation>
</Method>

<Method name="OnRLSDChangeSet">
<Description>
Method for setting 'OnRLSDChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRLSDChange=Value
 d ##this.SetEvent("OnRLSDChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRingGet">
<Description>
Method for getting 'OnRing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRing
]]></Implementation>
</Method>

<Method name="OnRingSet">
<Description>
Method for setting 'OnRing' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRing=Value
 d ##this.SetEvent("OnRing",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRx80FullGet">
<Description>
Method for getting 'OnRx80Full' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRx80Full
]]></Implementation>
</Method>

<Method name="OnRx80FullSet">
<Description>
Method for setting 'OnRx80Full' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRx80Full=Value
 d ##this.SetEvent("OnRx80Full",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRxBufGet">
<Description>
Method for getting 'OnRxBuf' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRxBuf
]]></Implementation>
</Method>

<Method name="OnRxBufSet">
<Description>
Method for setting 'OnRxBuf' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRxBuf=Value
 d ##this.SetEvent("OnRxBuf",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRxCharGet">
<Description>
Method for getting 'OnRxChar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRxChar
]]></Implementation>
</Method>

<Method name="OnRxCharSet">
<Description>
Method for setting 'OnRxChar' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRxChar=Value
 d ##this.SetEvent("OnRxChar",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRxFlagGet">
<Description>
Method for getting 'OnRxFlag' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRxFlag
]]></Implementation>
</Method>

<Method name="OnRxFlagSet">
<Description>
Method for setting 'OnRxFlag' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRxFlag=Value
 d ##this.SetEvent("OnRxFlag",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTxEmptyGet">
<Description>
Method for getting 'OnTxEmpty' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTxEmpty
]]></Implementation>
</Method>

<Method name="OnTxEmptySet">
<Description>
Method for setting 'OnTxEmpty' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTxEmpty=Value
 d ##this.SetEvent("OnTxEmpty",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Open">
<Description>
Connects to the COM-port.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Open",$lb())
 q
]]></Implementation>
</Method>

<Method name="OutputCount">
<Description>
Returns number of bytes in the output buffer.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("OutputCount",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="PortGet">
<Description>
Method for getting 'Port' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Port")
 q tmp
]]></Implementation>
</Method>

<Method name="PortSet">
<Description>
Method for setting 'Port' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Port",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadStr">
<Description>
Reads specified number of bytes from the buffer and returns string. If the buffer does not contain required number of bytes, waits for them until timeout elapses.
</Description>
<FormalSpec>Count:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReadStr",$lb(Count))
 q tmp
]]></Implementation>
</Method>

<Method name="ReadStrAsync">
<Description>
Reads specified number of bytes from the buffer and returns read string.
</Description>
<FormalSpec>Count:%Integer,AsyncPtr:%TMAsync</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReadStrAsync",$lb(Count,AsyncPtr))
 q tmp
]]></Implementation>
</Method>

<Method name="SetBreak">
<Description>
Sets (if 'OnOff' parameter is "True") or unsets (if 'OnOff' parameter is "True") break state.
</Description>
<FormalSpec>OnOff:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetBreak",$lb(OnOff))
 q
]]></Implementation>
</Method>

<Method name="SetDTR">
<Description>
Enables (if 'OnOff' parameter is "True") or disables (if 'OnOff' parameter is "True") Data-Terminal-Ready signal.
</Description>
<FormalSpec>OnOff:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetDTR",$lb(OnOff))
 q
]]></Implementation>
</Method>

<Method name="SetRTS">
<Description>
Enables (if 'OnOff' parameter is "True") or disables (if 'OnOff' parameter is "True") Request-To-Send signal.
</Description>
<FormalSpec>OnOff:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetRTS",$lb(OnOff))
 q
]]></Implementation>
</Method>

<Method name="SetXonXoff">
<Description>
Simulates Xon (if 'OnOff' parameter is "True") or Xoff (if 'OnOff' parameter is "True") character arrival.
</Description>
<FormalSpec>OnOff:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetXonXoff",$lb(OnOff))
 q
]]></Implementation>
</Method>

<Method name="Signals">
<Description><![CDATA[
Returns Cache' list ($lb()) of strings describing what signals are in the high state.
Possible values of these strings:<br>
"csCTS", "csDSR", "csRing" and "csRLSD".
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Signals",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="StateFlags">
<Description><![CDATA[
Returns Cache' list ($lb()) of strings corresponding to set COM-port state flags.
Possible values of these strings:<br>
"fCtlHold" - if set, transmission is waiting for the CTS signal;<br>
"fDsrHold" - if set, transmission is waiting for the DSR signal;<br>
"fRlsHold" - if set, transmission is waiting for the RLSD signal;<br>
"fXoffHold" - if set, transmission is waiting due to XOff character received;<br>
"fXoffSent" - if set, transmission is waiting due to XOff character transmitted;<br>
"fEof" - if set, the EOF character has been received;<br>
"fTxim" - if set, some character is queued to be transmitted by 'TransmitChar' method before other output buffer.
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("StateFlags",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="StopBitsGet">
<Description>
Method for getting 'StopBits' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StopBits")
 q tmp
]]></Implementation>
</Method>

<Method name="StopBitsSet">
<Description>
Method for setting 'StopBits' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StopBits",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SyncMethodGet">
<Description>
Method for getting 'SyncMethod' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SyncMethod")
 q tmp
]]></Implementation>
</Method>

<Method name="SyncMethodSet">
<Description>
Method for setting 'SyncMethod' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SyncMethod",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransmitChar">
<Description>
Transmits specified character before characters (if any) pending in output buffer.
</Description>
<FormalSpec>Ch:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("TransmitChar",$lb(Ch))
 q
]]></Implementation>
</Method>

<Method name="WaitForAsync">
<Description>
Returns when specified asynchonous operation is completed.
</Description>
<FormalSpec>AsyncPtr:%TMAsync</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("WaitForAsync",$lb(AsyncPtr))
 q tmp
]]></Implementation>
</Method>

<Method name="WriteStr">
<Description>
Places specified string into output buffer, waits for transmission completion or timeout elapse.
</Description>
<FormalSpec>Str:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("WriteStr",$lb(Str))
 q tmp
]]></Implementation>
</Method>

<Method name="WriteStrAsync">
<Description>
Places specified string into output buffer without waiting.
</Description>
<FormalSpec>Str:%String,AsyncPtr:%TMAsync</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("WriteStrAsync",$lb(Str,AsyncPtr))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Buffer</Value>
</Value>
<Value name="9">
<Value>FlowControl</Value>
</Value>
<Value name="10">
<Value>Name</Value>
</Value>
<Value name="11">
<Value>OnAfterClose</Value>
</Value>
<Value name="12">
<Value>OnAfterOpen</Value>
</Value>
<Value name="13">
<Value>OnBeforeClose</Value>
</Value>
<Value name="14">
<Value>OnBeforeOpen</Value>
</Value>
<Value name="15">
<Value>OnBreak</Value>
</Value>
<Value name="16">
<Value>OnCTSChange</Value>
</Value>
<Value name="17">
<Value>OnDSRChange</Value>
</Value>
<Value name="18">
<Value>OnError</Value>
</Value>
<Value name="19">
<Value>OnRLSDChange</Value>
</Value>
<Value name="20">
<Value>OnRing</Value>
</Value>
<Value name="21">
<Value>OnRx80Full</Value>
</Value>
<Value name="22">
<Value>OnRxBuf</Value>
</Value>
<Value name="23">
<Value>OnRxChar</Value>
</Value>
<Value name="24">
<Value>OnRxFlag</Value>
</Value>
<Value name="25">
<Value>OnTxEmpty</Value>
</Value>
<Value name="26">
<Value>Parity</Value>
</Value>
<Value name="27">
<Value>Timeouts</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMComTimeouts">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73321</TimeCreated>

<Property name="ReadInterval">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ReadTotalConstant">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ReadTotalMultiplier">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WriteTotalConstant">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WriteTotalMultiplier">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMComTimeouts"
]]></Implementation>
</Method>

<Method name="ReadIntervalGet">
<Description>
Method for getting 'ReadInterval' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadInterval")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadIntervalSet">
<Description>
Method for setting 'ReadInterval' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadInterval",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadTotalConstantGet">
<Description>
Method for getting 'ReadTotalConstant' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadTotalConstant")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadTotalConstantSet">
<Description>
Method for setting 'ReadTotalConstant' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadTotalConstant",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadTotalMultiplierGet">
<Description>
Method for getting 'ReadTotalMultiplier' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadTotalMultiplier")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadTotalMultiplierSet">
<Description>
Method for setting 'ReadTotalMultiplier' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadTotalMultiplier",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WriteTotalConstantGet">
<Description>
Method for getting 'WriteTotalConstant' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WriteTotalConstant")
 q tmp
]]></Implementation>
</Method>

<Method name="WriteTotalConstantSet">
<Description>
Method for setting 'WriteTotalConstant' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WriteTotalConstant",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WriteTotalMultiplierGet">
<Description>
Method for getting 'WriteTotalMultiplier' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WriteTotalMultiplier")
 q tmp
]]></Implementation>
</Method>

<Method name="WriteTotalMultiplierSet">
<Description>
Method for setting 'WriteTotalMultiplier' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WriteTotalMultiplier",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMComboBox">
<Description>
This class represents the server-side image of a windows dropdown list (combobox) . Its methods and properties allow to fill dropdown lists and get information about selected options.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73320</TimeCreated>

<Property name="Canvas">
<Description>
OREF of %TMCanvas to be used to display owner-drawn items.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="CharCase">
<Description>
Determines the case conversion of the text in dropdown list. Possible values: "ecNormal" (no conversion), "ecUpperCase" and "ecLowerCase". Note that case conversion affects on the actual text, not only on it's appearance.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ecNormal,ecUpperCase,ecLowerCase"/>
</Property>

<Property name="DropDownCount">
<Description>
Determines the maximum number of items which can be displayed without scrolling. Default value is 8.
Has no sense if Style is "csSimple".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DroppedDown">
<Description>
Represents the state of combobox, is it dropped down (1) or closed up (0).
Has no sense if Style is "csSimple".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemHeight">
<Description>
Specifies the height of the dropdown list items (in pixels). Has sense only for "csOwnerDrawFixed" and "csOwnerDrawVariable" values of Style. Can be overriden by the value set in OnMeasureItem event handler.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemIndex">
<Description>
Represents the number of the selected drop-down list item (numbering starts from 0). Equals to -1 if no items selected.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Items">
<Description>
Collection of the drop-down list options. Use %TMString methods (Add, Insert, Move, Delete, IndexOf) to operate with separate items.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="MaxLength">
<Description>
Limits the length of string the user can input in the edit portion of the drop-down list. 0 means no limitation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Contains handler for event occuring when the text the edit region changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawItem">
<Description>
Contains handler for event occuring when an item in an owner-draw drop-down list is to be displayed. Handler may use %TMCanvas methods to add graphic elements to the item or to replace the item text by an image.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDropDown">
<Description>
Contains handler for event occuring when the user activates the drop-down list.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMeasureItem">
<Description>
Contains handler for event occuring when an item in a owner-draw-variable drop-down list is to be redisplayed. The handler should specify the height (in pixels), necessary to draw an item.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Query">
<Description>
Contains oref of the %TMQuery object used in the ExecuteQuery method. See %TMQuery description for details.
</Description>
<Type>%Library.TMQuery</Type>
</Property>

<Property name="SelLength">
<Description>
Represents the length of the selected text in the edit region of the drop-down list.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelStart">
<Description>
Represent the number of first symbol of selected part of text in the edit region of the drop-down list (numbering starts from 0).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelText">
<Description>
Represents the selected text in the edit region of the drop-down list. Change of this property replaces the  selected text with new value, or inserts it at the cursor if no text is selected.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Sorted">
<Description>
Determines, should the drop-down list items be sorted in alphabetic order (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the style of the drop-down list. The possible values:
"csDropDown" - drop-down list with an edit region for custom text input.<br>
"csSimple" list box with an edit region for custom text input.<br>
"csDropDownList" - drop-down list with read-only edit region.<br>
"csOwnerDrawFixed" - owner-draw drop-down list with an edit region for custom text input, with the OnDrawItem event occuring when an item is to be drawn; all items height is determined by the ItemHeight property.<br>
"csOwnerDrawVariable" - owner-draw drop-down list with an edit region for custom text input, with the OnDrawItem and OnMeasureItem events occuring when an item is to be drawn; items can have different heights.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",csDropDown,csSimple,csDropDownList,csOwnerDrawFixed,csOwnerDrawVariable"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMStrings).%New($lb(..Address,0,""Items""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="CharCaseGet">
<Description>
Method for getting 'CharCase' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CharCase")
 q tmp
]]></Implementation>
</Method>

<Method name="CharCaseSet">
<Description>
Method for setting 'CharCase' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CharCase",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMComboBox"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all items from the dropdown list.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="DropDownCountGet">
<Description>
Method for getting 'DropDownCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DropDownCount")
 q tmp
]]></Implementation>
</Method>

<Method name="DropDownCountSet">
<Description>
Method for setting 'DropDownCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropDownCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DroppedDownGet">
<Description>
Method for getting 'DroppedDown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DroppedDown")
 q tmp
]]></Implementation>
</Method>

<Method name="DroppedDownSet">
<Description>
Method for setting 'DroppedDown' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DroppedDown",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExecuteQuery">
<Description>
Executes query and loads information in combobox. Query class, name and other information must be stored in Query property.
</Description>
<FormalSpec>p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n query,params,i
 s query=##class(%ResultSet).%New(..Query.QueryClass_"."_..Query.QueryName)
 q:query=$$$NULLOREF $$$ERROR("Invalid query name")
 d ..Items.Clear()
 s params=""
 f i=1:1:16 d:$d(@("p"_i))
 . i params="" s params="p"_i
 . e  s params=params_",p"_i
 x "d query.Execute("_params_")"
 f  q:'query.Next()  d
 . d:..Query.IdField'="" ..Items.AddObject(query.GetDataByName($p(..Query.QueryFields,",")),query.GetDataByName(..Query.IdField))
 . d:..Query.IdField="" ..Items.Add(query.GetDataByName($p(..Query.QueryFields,",")))
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemHeightGet">
<Description>
Method for getting 'ItemHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemHeightSet">
<Description>
Method for setting 'ItemHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemIndexGet">
<Description>
Method for getting 'ItemIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemIndexSet">
<Description>
Method for setting 'ItemIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLengthGet">
<Description>
Method for getting 'MaxLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxLength")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxLengthSet">
<Description>
Method for setting 'MaxLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawItemGet">
<Description>
Method for getting 'OnDrawItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawItem
]]></Implementation>
</Method>

<Method name="OnDrawItemSet">
<Description>
Method for setting 'OnDrawItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawItem=Value
 d ##this.SetEvent("OnDrawItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDropDownGet">
<Description>
Method for getting 'OnDropDown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDropDown
]]></Implementation>
</Method>

<Method name="OnDropDownSet">
<Description>
Method for setting 'OnDropDown' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDropDown=Value
 d ##this.SetEvent("OnDropDown",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMeasureItemGet">
<Description>
Method for getting 'OnMeasureItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMeasureItem
]]></Implementation>
</Method>

<Method name="OnMeasureItemSet">
<Description>
Method for setting 'OnMeasureItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMeasureItem=Value
 d ##this.SetEvent("OnMeasureItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelLengthGet">
<Description>
Method for getting 'SelLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelLength")
 q tmp
]]></Implementation>
</Method>

<Method name="SelLengthSet">
<Description>
Method for setting 'SelLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelStartGet">
<Description>
Method for getting 'SelStart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelStart")
 q tmp
]]></Implementation>
</Method>

<Method name="SelStartSet">
<Description>
Method for setting 'SelStart' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelStart",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelTextGet">
<Description>
Method for getting 'SelText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelText")
 q tmp
]]></Implementation>
</Method>

<Method name="SelTextSet">
<Description>
Method for setting 'SelText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectAll">
<Description>
Marks all the text in the edit box as selected. Use the SelStart and SelLength properties to select  text fragment.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SelectAll",$lb())
 q
]]></Implementation>
</Method>

<Method name="SortedGet">
<Description>
Method for getting 'Sorted' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Sorted")
 q tmp
]]></Implementation>
</Method>

<Method name="SortedSet">
<Description>
Method for setting 'Sorted' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Sorted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Items</Value>
</Value>
<Value name="39">
<Value>OnChange</Value>
</Value>
<Value name="40">
<Value>OnDrawItem</Value>
</Value>
<Value name="41">
<Value>OnDropDown</Value>
</Value>
<Value name="42">
<Value>OnMeasureItem</Value>
</Value>
<Value name="43">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMCompositeReport">
<Description>
This component holds references to other report components. For report constructing component use references.
For example,
d ..CompositeReport1.ClearReportList()
d ..CompositeReport1.AddReport(..Report1)
d ..CompositeReport1.AddReport(..Report2)
d ..CompositeReport1.AddReport(..Report3)
d ..CompositeReport1.ShowReport()
this code creates new report from reports ..Report1, ..Report2, ..Report3.
If added reports have property "Print on prev page" turned on, report prints on last page of previous report.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMFReport</Super>
<TimeCreated>64314,73321</TimeCreated>

<Method name="AddReport">
<Description>
Adds available report component to internal report list.
</Description>
<FormalSpec>Report:%TMFReport</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("AddReport",$LB(Report.Address))
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMCompositeReport"
]]></Implementation>
</Method>

<Method name="ClearReportList">
<Description>
This method clears internal reports list.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("ClearReportList",$LB())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMControl">
<Description>
The base class for visual controls, containing methods and properties common for all of them.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73321</TimeCreated>

<Property name="Align">
<Description><![CDATA[
Determines the control alignment inside it's parent form or panel. Possible values:<br>
"alLeft" - align control to the left side;<br>
"alRight" -  align control to the right side;<br>
"alTop" - align control to the top;<br>
"alBottom" - align control to the bottom;<br>
"alNone" - remain control where it was positioned.<br>
Values can not be combined. To bind control to the form angles rahther than to edges, use Anchors method.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",alNone,alTop,alBottom,alLeft,alRight,alClient"/>
</Property>

<Property name="Anchors">
<Description><![CDATA[
Determines how the control is anchored to it's parent form or panel. Possible values: Cache' list ($lb) where only necessary from the following strings are combined:<br>
"akLeft", "akRight", "akTop", "akBottom";<br>
or $lb() to cancel anchoring.<br>
Note that controls anchored simultaneously to the opposite sides of the parent from or panel will be stretched when parent resizing.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(akLeft,akTop,akRight,akBottom)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AutoSize">
<Description>
Determines, may the control size itself automatically. Default value is "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BiDiMode">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Caption">
<Description>
Specifies a text string associated with this control. The character marked with ampersand can be used as accelerator key.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ClientHeight">
<Description>
Determines the height (in pixels) of the client area.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ClientWidth">
<Description>
Determines the width (in pixels) of the client area.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Color">
<Description>
Determines the background color. Available predefined values are listed in %Const.INC. If changed, the ParentColor propery is automaticlly set to "False".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Constraints">
<Description>
Determines the minimal and maximal height and width of the control. Look %TMSizeConstraints description for details.
</Description>
<Type>%Library.TMSizeConstraints</Type>
</Property>

<Property name="Cursor">
<Description>
Determines the mouse cursor shape when the mouse moves over the current control. Default is $$$crDefault, available values are listed in %Const.INC.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DockOrientation">
<Description><![CDATA[
Determines the docked zones orientation. Possible values:<br>
"doHorizontal: -  from left to right,<br>
"doVertical" - from top to bottom,<br>
"doNoOrient" - default value.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",doNoOrient,doHorizontal,doVertical"/>
</Property>

<Property name="DragCursor">
<Description>
Determines the mouse cursor shape when the current control is being dragged.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DragKind">
<Description>
Determines, is the control being dragged as usual ("dkDrag") or for docking ("dkDock").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dkDrag,dkDock"/>
</Property>

<Property name="DragMode">
<Description><![CDATA[
Determines the possibilty to be drag-and-dropped for the control. Possible values:<br>
"dmAutomatic" - control can be drag-and-dropped,<br>
"dmManual" - control will be drag-and-dropable only after the BeginDrag method call.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dmManual,dmAutomatic"/>
</Property>

<Property name="Enabled">
<Description>
Determines, is the control available for user. "True" (default value) makes the control available for user, enabling handling of mouse, keyboard and timer events. If the property is set to "False", the control ignores events.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Font">
<Description>
Determines the appearance of the text written in the control. Look %TMFont description for details.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="Height">
<Description>
Determines the total vertical size (in pixels) of the control.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Hint">
<Description>
Determines the text string appearing when the mouse cursor moves over the control and the ShowHint property is set to "True".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Left">
<Description>
Determines the horizontal shift (in pixels) of the control left edge relative to the form (or the parent panel) left edge.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnCanResize">
<Description>
Handler of event occuring when the control is resized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClick">
<Description>
Handler of event occuring when the control is clicked, or accelerator key for the control is pressed. Space  bar is considered as an accelerator key for the active control, Enter - for default button, Esc - for cancel button.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnConstrainedResize">
<Description>
Handler of event occuring when the control resizes itself in accordance with the value of it's Constraints property.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDblClick">
<Description>
Handler of event occuring when the control is double-clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDragDrop">
<Description>
Handler of event occuring when the dragged control is dropped.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDragOver">
<Description>
Handler of event occuring when some object is being dragged over the control.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEndDock">
<Description>
Handler of event occuring when the control has been docked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEndDrag">
<Description>
Handler of event occuring when the control dragging stops.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseDown">
<Description>
Handler of event occuring when the a mouse button is pressed and the mouse cursor is positioned within the control.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseMove">
<Description>
Handler of event occuring when the mouse cursor moves within the control.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseUp">
<Description>
Handler of event occuring when the mouse button previously pressed with the mouse cursor was positioned within the control, is released.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnResize">
<Description>
Handler of event occuring when the control is resized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnStartDock">
<Description>
Handler of event occuring when the control is about to be docked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnStartDrag">
<Description>
Handler of event occuring when the a mouse button is pressed and held down with the mouse cusror is positioned within the control.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ParentBiDiMode">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ParentColor">
<Description>
Determines, should the control use the same color as its parent (if set to "True") or use own Color property (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ParentFont">
<Description>
Determines, should the control use the same font as its parent (if set to "True") or use own Font property (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ParentShowHint">
<Description>
Determines, should the control show hints in accordance with its parent ShowHint (if set to "True") or use own value (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PopupMenu">
<Description><![CDATA[
Specifies oref of the pop-up menu, which should appear when the right mouse button is clicked with the control selected. associated with the control.<br>
Note: if the AutoPopup property of the menu is "False", this menu can be displayed only with the Popup method call.
]]></Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ScalingFlags">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(sfLeft,sfTop,sfWidth,sfHeight,sfFont)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShowHint">
<Description>
Determines whether hints are enabled (if set to "True") or disabled (if set to "False") for the control.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Text">
<Description>
Determines the contents of edit and memo controls and edit regions of comboboxes.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Top">
<Description>
Determines the vertical shift (in pixels) of the control upper edge relative to the form (or the parent panel) upper edge.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines the visibility of the control. Possible values: "True" (default) or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Width">
<Description><![CDATA[
Determines the total horizontal size (in pixels) of the control.<br>
Does not affects on tab sheets at runtime.
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 $$$GENERATE(" s $li(initvalue,3)=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Constraints.%Close()")
 $$$GENERATE(" s ..Constraints=##class(%TMSizeConstraints).%New($lb(..Address,0,""Constraints""))")
 $$$GENERATE(" d ..Font.%Close()")
 $$$GENERATE(" s ..Font=##class(%TMFont).%New($lb(..Address,0,""Font""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignGet">
<Description>
Method for getting 'Align' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Align")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignSet">
<Description>
Method for setting 'Align' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Align",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AnchorsGet">
<Description>
Method for getting 'Anchors' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Anchors")
 q tmp
]]></Implementation>
</Method>

<Method name="AnchorsSet">
<Description>
Method for setting 'Anchors' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Anchors",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoSizeGet">
<Description>
Method for getting 'AutoSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSize")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSizeSet">
<Description>
Method for setting 'AutoSize' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeginDrag">
<Description>
Begin drag-n-drop operation.

Argument Immediate:

"True" - begin drag immediately.
"False" - begin drag after user move mouse before mouse release.
</Description>
<FormalSpec>Immediate:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("BeginDrag",$lb(Immediate))
 q
]]></Implementation>
</Method>

<Method name="BiDiModeGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("BiDiMode")
]]></Implementation>
</Method>

<Method name="BiDiModeSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("BiDiMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BringToFront">
<Description>
Moves control to the top of overlapping controls stack. Can not move non-windowed control (such as label) on top of windowed control (such as edit).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BringToFront",$lb())
 q
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMControl"
]]></Implementation>
</Method>

<Method name="ClientHeightGet">
<Description>
Method for getting 'ClientHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClientHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ClientHeightSet">
<Description>
Method for setting 'ClientHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ClientHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClientToScreen">
<Description>
Converts coordinates (format - $lb(X,Y)) in the control coordinate system to the screen coordinates.
</Description>
<FormalSpec>Point:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClientToScreen",$lb(Point))
 q tmp
]]></Implementation>
</Method>

<Method name="ClientWidthGet">
<Description>
Method for getting 'ClientWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClientWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ClientWidthSet">
<Description>
Method for setting 'ClientWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ClientWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CursorGet">
<Description>
Method for getting 'Cursor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Cursor")
 q tmp
]]></Implementation>
</Method>

<Method name="CursorSet">
<Description>
Method for setting 'Cursor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Cursor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockOrientationGet">
<Description>
Method for getting 'DockOrientation' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DockOrientation")
 q tmp
]]></Implementation>
</Method>

<Method name="DockOrientationSet">
<Description>
Method for setting 'DockOrientation' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DockOrientation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DragCursorGet">
<Description>
Method for getting 'DragCursor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DragCursor")
 q tmp
]]></Implementation>
</Method>

<Method name="DragCursorSet">
<Description>
Method for setting 'DragCursor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DragCursor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DragKindGet">
<Description>
Method for getting 'DragKind' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DragKind")
 q tmp
]]></Implementation>
</Method>

<Method name="DragKindSet">
<Description>
Method for setting 'DragKind' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DragKind",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DragModeGet">
<Description>
Method for getting 'DragMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DragMode")
 q tmp
]]></Implementation>
</Method>

<Method name="DragModeSet">
<Description>
Method for setting 'DragMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DragMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EnabledGet">
<Description>
Method for getting 'Enabled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Enabled")
 q tmp
]]></Implementation>
</Method>

<Method name="EnabledSet">
<Description>
Method for setting 'Enabled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Enabled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndDrag">
<Description>
Ends drag-n-drop operation programmatically

Argument Drop:

"True" - drag-n-drop confirmed
"False" - drag-n-drop canceled
</Description>
<FormalSpec>Drop:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("EndDrag",$lb(Drop))
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Constraints.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Constraints,""Constraints"","""")_result")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HeightGet">
<Description>
Method for getting 'Height' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Height")
 q tmp
]]></Implementation>
</Method>

<Method name="HeightSet">
<Description>
Method for setting 'Height' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Height",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintGet">
<Description>
Method for getting 'Hint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Hint")
 q tmp
]]></Implementation>
</Method>

<Method name="HintSet">
<Description>
Method for setting 'Hint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Hint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Invalidate">
<Description>
Tells Windows to repaint the control after other important Windows messages are handled.

Use Invalidate when the entire control needs to be repainted. When more than one region within the control needs repainting, Invalidate will cause the entire window to be repainted in a single pass, avoiding flicker caused by redundant repaints. There is no performance penalty for calling Invalidate multiple times before the control is actually repainted.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Invalidate",$lb())
 q
]]></Implementation>
</Method>

<Method name="LeftGet">
<Description>
Method for getting 'Left' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Left")
 q tmp
]]></Implementation>
</Method>

<Method name="LeftSet">
<Description>
Method for setting 'Left' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Left",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCanResizeGet">
<Description>
Method for getting 'OnCanResize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCanResize
]]></Implementation>
</Method>

<Method name="OnCanResizeSet">
<Description>
Method for setting 'OnCanResize' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCanResize=Value
 d ##this.SetEvent("OnCanResize",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickGet">
<Description>
Method for getting 'OnClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClick
]]></Implementation>
</Method>

<Method name="OnClickSet">
<Description>
Method for setting 'OnClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClick=Value
 d ##this.SetEvent("OnClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnConstrainedResizeGet">
<Description>
Method for getting 'OnConstrainedResize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnConstrainedResize
]]></Implementation>
</Method>

<Method name="OnConstrainedResizeSet">
<Description>
Method for setting 'OnConstrainedResize' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnConstrainedResize=Value
 d ##this.SetEvent("OnConstrainedResize",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDblClickGet">
<Description>
Method for getting 'OnDblClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDblClick
]]></Implementation>
</Method>

<Method name="OnDblClickSet">
<Description>
Method for setting 'OnDblClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDblClick=Value
 d ##this.SetEvent("OnDblClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDragDropGet">
<Description>
Method for getting 'OnDragDrop' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDragDrop
]]></Implementation>
</Method>

<Method name="OnDragDropSet">
<Description>
Method for setting 'OnDragDrop' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDragDrop=Value
 d ##this.SetEvent("OnDragDrop",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDragOverGet">
<Description>
Method for getting 'OnDragOver' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDragOver
]]></Implementation>
</Method>

<Method name="OnDragOverSet">
<Description>
Method for setting 'OnDragOver' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDragOver=Value
 d ##this.SetEvent("OnDragOver",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEndDockGet">
<Description>
Method for getting 'OnEndDock' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEndDock
]]></Implementation>
</Method>

<Method name="OnEndDockSet">
<Description>
Method for setting 'OnEndDock' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEndDock=Value
 d ##this.SetEvent("OnEndDock",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEndDragGet">
<Description>
Method for getting 'OnEndDrag' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEndDrag
]]></Implementation>
</Method>

<Method name="OnEndDragSet">
<Description>
Method for setting 'OnEndDrag' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEndDrag=Value
 d ##this.SetEvent("OnEndDrag",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseDownGet">
<Description>
Method for getting 'OnMouseDown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseDown
]]></Implementation>
</Method>

<Method name="OnMouseDownSet">
<Description>
Method for setting 'OnMouseDown' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseDown=Value
 d ##this.SetEvent("OnMouseDown",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseMoveGet">
<Description>
Method for getting 'OnMouseMove' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseMove
]]></Implementation>
</Method>

<Method name="OnMouseMoveSet">
<Description>
Method for setting 'OnMouseMove' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseMove=Value
 d ##this.SetEvent("OnMouseMove",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseUpGet">
<Description>
Method for getting 'OnMouseUp' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseUp
]]></Implementation>
</Method>

<Method name="OnMouseUpSet">
<Description>
Method for setting 'OnMouseUp' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseUp=Value
 d ##this.SetEvent("OnMouseUp",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnResizeGet">
<Description>
Method for getting 'OnResize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnResize
]]></Implementation>
</Method>

<Method name="OnResizeSet">
<Description>
Method for setting 'OnResize' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnResize=Value
 d ##this.SetEvent("OnResize",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnStartDockGet">
<Description>
Method for getting 'OnStartDock' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnStartDock
]]></Implementation>
</Method>

<Method name="OnStartDockSet">
<Description>
Method for setting 'OnStartDock' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnStartDock=Value
 d ##this.SetEvent("OnStartDock",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnStartDragGet">
<Description>
Method for getting 'OnStartDrag' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnStartDrag
]]></Implementation>
</Method>

<Method name="OnStartDragSet">
<Description>
Method for setting 'OnStartDrag' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnStartDrag=Value
 d ##this.SetEvent("OnStartDrag",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentBiDiModeGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ParentBiDiMode")
]]></Implementation>
</Method>

<Method name="ParentBiDiModeSet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ParentBiDiMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentColorGet">
<Description>
Method for getting 'ParentColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ParentColor")
 q tmp
]]></Implementation>
</Method>

<Method name="ParentColorSet">
<Description>
Method for setting 'ParentColor' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ParentColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentFontGet">
<Description>
Method for getting 'ParentFont' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ParentFont")
 q tmp
]]></Implementation>
</Method>

<Method name="ParentFontSet">
<Description>
Method for setting 'ParentFont' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ParentFont",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentShowHintGet">
<Description>
Method for getting 'ParentShowHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ParentShowHint")
 q tmp
]]></Implementation>
</Method>

<Method name="ParentShowHintSet">
<Description>
Method for setting 'ParentShowHint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ParentShowHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PopupMenuGet">
<Description>
Method for getting 'PopupMenu' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(##this.GetProperty("PopupMenu"))
]]></Implementation>
</Method>

<Method name="PopupMenuSet">
<Description>
Method for setting 'PopupMenu' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PopupMenu",$S(+Value:Value.Address,1:0))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Repaint">
<Description>
Forces the control to repaint its image on the screen.

Call Repaint to force the control to repaint its image immediately. If the ControlStyle property includes csOpaque, the control paints itself directly. Otherwise, the Repaint method calls the Invalidate method and then the Update method so that any visible portions of controls beneath the control will be repainted as well.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Repaint",$lb())
 q
]]></Implementation>
</Method>

<Method name="ScalingFlagsGet">
<Description>
Method for getting 'ScalingFlags' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScalingFlags")
 q tmp
]]></Implementation>
</Method>

<Method name="ScalingFlagsSet">
<Description>
Method for setting 'ScalingFlags' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScalingFlags",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScreenToClient">
<Description>
Converts coordinates (format - $lb(X,Y)) in the screen coordinate stsyem to the local (control client area) coordinates.
</Description>
<FormalSpec>Point:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ScreenToClient",$lb(Point))
 q tmp
]]></Implementation>
</Method>

<Method name="SendToBack">
<Description>
Moves control to the bottom of overlapping controls stack. Can not windowed control (such as edit) below a non-windowed control (such as label). Sent to back control loses focus.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SendToBack",$lb())
 q
]]></Implementation>
</Method>

<Method name="ShowHintGet">
<Description>
Method for getting 'ShowHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowHint")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowHintSet">
<Description>
Method for setting 'ShowHint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextGet">
<Description>
Method for getting 'Text' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Text")
 q tmp
]]></Implementation>
</Method>

<Method name="TextSet">
<Description>
Method for setting 'Text' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Text",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TopGet">
<Description>
Method for getting 'Top' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Top")
 q tmp
]]></Implementation>
</Method>

<Method name="TopSet">
<Description>
Method for setting 'Top' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Top",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Processes any pending paint messages immediately.

Call Update to force the control to be repainted before any more, possibly time-consuming, processing takes place. Use Update to provide immediate feedback to the user that cannot wait for the Windows paint message to arrive. Update does not invalidate the control, but simply forces a repaint of any regions that have already been invalidated. Call Repaint instead if you need to invalidate the control as well.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Update",$lb())
 q
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMControlScrollBar">
<Description>
This class displays and controls scrollbar for scrollable windowed controls.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73322</TimeCreated>

<Property name="ButtonSize">
<Description>
Determines the scrollbar button size (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Color">
<Description>
Determines the color of scrollbar (in hexadecimal RGB, macros from Const.INC may be used).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Increment">
<Description>
Determines the scrolled area shift when end arrow is clicked (in positions).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Margin">
<Description>
Determines the minimal distance (in pixels) between each visual control and scrolled area edge to display scrollbar.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Position">
<Description>
Contains the scrollbar position. Possible value: from 0 to "Range" value.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Range">
<Description>
Contains total size of scrolled area (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBarVisible">
<Description>
Indicates, does the scrollbar range fit in the client area. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollPos">
<Description>
Read-only, contains the "Position" value if the scrollbar is visible, otherwise - 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Size">
<Description>
Determines the scrollbar size (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Smooth">
<Description>
If set to "True", the increment of scrolling is automatically calculated according to the size of client area.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines scroobar style. Possible values:
"ssRegular" - usual scrollbar;<br>
"ssFlat" - flat scrollbar;<br>
"ssHotTrack" - scrollbar allowing hot tracking.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssRegular,ssFlat,ssHotTrack"/>
</Property>

<Property name="ThumbSize">
<Description>
Determines the thumb tab size (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tracking">
<Description>
Determines, should the scrolling area move if thumb tab is moved but not released (if set to "True"), or only when thumb tab is released (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines, should the scrollbar appear if necessary (see the "Margin" property description) (if set to "True"), or never (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ButtonSizeGet">
<Description>
Method for getting 'ButtonSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ButtonSize")
 q tmp
]]></Implementation>
</Method>

<Method name="ButtonSizeSet">
<Description>
Method for setting 'ButtonSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ButtonSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMControlScrollBar"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IncrementGet">
<Description>
Method for getting 'Increment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Increment")
 q tmp
]]></Implementation>
</Method>

<Method name="IncrementSet">
<Description>
Method for setting 'Increment' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Increment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MarginGet">
<Description>
Method for getting 'Margin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Margin")
 q tmp
]]></Implementation>
</Method>

<Method name="MarginSet">
<Description>
Method for setting 'Margin' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Margin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RangeGet">
<Description>
Method for getting 'Range' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Range")
 q tmp
]]></Implementation>
</Method>

<Method name="RangeSet">
<Description>
Method for setting 'Range' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Range",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarVisibleGet">
<Description>
Method for getting 'ScrollBarVisible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBarVisible")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarVisibleSet">
<Description>
Method for setting 'ScrollBarVisible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollBarVisible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollPosGet">
<Description>
Method for getting 'ScrollPos' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollPos")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollPosSet">
<Description>
Method for setting 'ScrollPos' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollPos",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGet">
<Description>
Method for getting 'Size' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Size")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeSet">
<Description>
Method for setting 'Size' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SmoothGet">
<Description>
Method for getting 'Smooth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Smooth")
 q tmp
]]></Implementation>
</Method>

<Method name="SmoothSet">
<Description>
Method for setting 'Smooth' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Smooth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ThumbSizeGet">
<Description>
Method for getting 'ThumbSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ThumbSize")
 q tmp
]]></Implementation>
</Method>

<Method name="ThumbSizeSet">
<Description>
Method for setting 'ThumbSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ThumbSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TrackingGet">
<Description>
Method for getting 'Tracking' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Tracking")
 q tmp
]]></Implementation>
</Method>

<Method name="TrackingSet">
<Description>
Method for setting 'Tracking' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Tracking",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMConverter">
<Description>
Class intended for creating text files of special format, that can be imported with File/Import/Import TXT command.
This is useful when you need to convert some existing application to SMWrap or automate creation of SMWrap forms.
For detailed explanation of usage see example form (in SMWrap\Examples directory).
</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%SerialObject</Super>
<TimeCreated>64314,73322</TimeCreated>

<Property name="EndLine">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="File">
<Type>%Library.File</Type>
</Property>

<Property name="Indent">
<Type>%Library.Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="%OnClose">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..CloseFile()
 s ..File=""
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s ..Indent=0
 s ..EndLine=$C(13,10)
 s ..File=##class(%File).%New()
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddAtomProp">
<FormalSpec>PropName:%String,PropValue:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; PropName:%String,PropValue:%String
 d ..WriteIndent()
 d ..File.Write(PropName_" = "_PropValue)
 d ..File.Write(..EndLine)
 q
]]></Implementation>
</Method>

<Method name="AddStringProp">
<FormalSpec>PropName:%String,PropValue:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; PropName:%String,PropValue:%String
 n str,len,i,InString,char
 s len=$L(PropValue)
 i len=0 q "''"
 s InString=0
 s str=""
 f i=1:1:len d
 . s char=$E(PropValue,i)
 . i ($A(char)'<32)&(char'="'") d  ; printed and not special pascal case
 . . i InString s str=str_char
 . . e  s str=str_"'"_char
 . . s InString=1
 . e  d                            ; nonprinted or special pascal case
 . . i InString s str=str_"'#"_$A(char)
 . . e  s str=str_"#"_$A(char)
 . . s InString=0
 ; terminate string
 i InString s str=str_"'"
 d ..WriteIndent()
 d ..File.Write(PropName_" = "_str)
 d ..File.Write(..EndLine)
 q
]]></Implementation>
</Method>

<Method name="BeginObject">
<FormalSpec>ObjName:%String,ObjType:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..WriteIndent()
 d ..File.Write("object "_ObjName_": "_ObjType)
 d ..File.Write(..EndLine)
 s ..Indent=..Indent+2
 q
]]></Implementation>
</Method>

<Method name="CloseFile">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 i ..File.IsOpen d ..File.Close()
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndObject">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s ..Indent=..Indent-2
 d ..WriteIndent()
 d ..File.Write("end")
 d ..File.Write(..EndLine)
 q
]]></Implementation>
</Method>

<Method name="OpenFile">
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; close current file if open
 n ret
 d ..CloseFile()
 s ..File.Name=FileName
 d ..File.Open("NW")
 i ..File.IsOpen s ret=$$$OK
 e  s ret=0
 q ret
]]></Implementation>
</Method>

<Method name="WriteIndent">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 i ..Indent<0 s ..Indent=0
 i ..Indent'=0 d
 . f i=1:1:..Indent d
 . . d ..File.Write(" ")
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>TMConverterState</State>
<Data name="TMConverterState">
<Value name="1">
<Value>EndLine</Value>
</Value>
<Value name="2">
<Value>File</Value>
</Value>
<Value name="3">
<Value>Indent</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMCustomBarSeries">
<Description>
Base class for %TMBarSeries and %TMHorizBarSeries.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMChartSeries</Super>
<TimeCreated>64314,73322</TimeCreated>

<Property name="AutoMarkPosition">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BarBrush">
<Description>
Contains oref of %TMBrush object used for the bar filling.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="BarPen">
<Description>
Contains oref of %TMChartPen object used for the bar outline.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="BarStyle">
<Description>
Determines the shape of the bar. Possible values: "bsArrow", "bsCilinder", "bsEllipse", "bsInvPyramid", "bsPyramid", "bsRectangle". Default value: "bsRectangle".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsRectangle,bsPyramid,bsInvPyramid,bsCilinder,bsEllipse,bsArrow,bsRectGradient"/>
</Property>

<Property name="BarWidthPercent">
<Description>
Determines the bar width in percents of the distance between corresponding edges of adjacent bars.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Dark3D">
<Description>
If set to "True", the bar edges will look like shadowed.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MultiBar">
<Description><![CDATA[
Determines, how the multiple series belonging to the same chart should be drawn. Possible values:<br>
"mbNone" -  next series behind the previous one;<br>
"mbSide" - next series side-by-side to the previous one;<br>
"mbStacked" - next series on top of the previous one;<br>
"mbStacked100" - next series on top of the previous one, adjusting individual points to the (0-100) scale.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",mbNone,mbSide,mbStacked,mbStacked100"/>
</Property>

<Property name="OffsetPercent">
<Description>
Determines the distance between adjacent bars in percents of the bar width. May be negative to create overlapping bars.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnGetBarStyle">
<Description>
Handler of event occuring when the bar style is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SideMargins">
<Description>
Determines, should margins separate first and last bars from the chart edges (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UseYOrigin">
<Description>
Determines, should the 'YOrigin' property value (if set to "True") or the minimum of bars values (if set to "False" be used as the bars starting point.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="YOrigin">
<Description>
Determines the bars starting point when the 'UseYOrigin' property is set to "True".
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.BarBrush.%Close()")
 $$$GENERATE(" s ##this.BarBrush=##class(%TMBrush).%New($lb(##this.Address,0,""BarBrush""))")
 $$$GENERATE(" d ##this.BarPen.%Close()")
 $$$GENERATE(" s ##this.BarPen=##class(%TMChartPen).%New($lb(##this.Address,0,""BarPen""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ApplyBarOffset">
<Description>
For internal use.
</Description>
<FormalSpec>Position:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ApplyBarOffset",$lb(Position))
 q tmp
]]></Implementation>
</Method>

<Method name="AutoMarkPositionGet">
<Description>
Method for getting 'AutoMarkPosition' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoMarkPosition")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoMarkPositionSet">
<Description>
Method for setting 'AutoMarkPosition' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoMarkPosition",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BarStyleGet">
<Description>
Method for getting 'BarStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BarStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BarStyleSet">
<Description>
Method for setting 'BarStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BarStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BarWidthPercentGet">
<Description>
Method for getting 'BarWidthPercent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BarWidthPercent")
 q tmp
]]></Implementation>
</Method>

<Method name="BarWidthPercentSet">
<Description>
Method for setting 'BarWidthPercent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BarWidthPercent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMCustomBarSeries"
]]></Implementation>
</Method>

<Method name="Dark3DGet">
<Description>
Method for getting 'Dark3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Dark3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Dark3DSet">
<Description>
Method for setting 'Dark3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Dark3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" s result=##class(=%TMChartSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..BarBrush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..BarBrush,""BarBrush"","""")_result")
 $$$GENERATE(" s result=result_..BarPen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..BarPen,""BarPen"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="MultiBarGet">
<Description>
Method for getting 'MultiBar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiBar")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiBarSet">
<Description>
Method for setting 'MultiBar' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiBar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OffsetPercentGet">
<Description>
Method for getting 'OffsetPercent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OffsetPercent")
 q tmp
]]></Implementation>
</Method>

<Method name="OffsetPercentSet">
<Description>
Method for setting 'OffsetPercent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OffsetPercent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetBarStyleGet">
<Description>
Method for getting 'OnGetBarStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetBarStyle
]]></Implementation>
</Method>

<Method name="OnGetBarStyleSet">
<Description>
Method for setting 'OnGetBarStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetEvent("OnGetBarStyle",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SideMarginsGet">
<Description>
Method for getting 'SideMargins' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SideMargins")
 q tmp
]]></Implementation>
</Method>

<Method name="SideMarginsSet">
<Description>
Method for setting 'SideMargins' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SideMargins",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UseYOriginGet">
<Description>
Method for getting 'UseYOrigin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UseYOrigin")
 q tmp
]]></Implementation>
</Method>

<Method name="UseYOriginSet">
<Description>
Method for setting 'UseYOrigin' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("UseYOrigin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="YOriginGet">
<Description>
Method for getting 'YOrigin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("YOrigin")
 q tmp
]]></Implementation>
</Method>

<Method name="YOriginSet">
<Description>
Method for setting 'YOrigin' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("YOrigin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>BarBrush</Value>
</Value>
<Value name="24">
<Value>BarPen</Value>
</Value>
<Value name="25">
<Value>OnGetBarStyle</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMCustomSeries">
<Description>
Base class for %TMAreaSeries, %TMLineSeries and %TMPoinSeries.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMChartSeries</Super>
<TimeCreated>64314,73323</TimeCreated>

<Property name="AreaBrush">
<Description>
Determines pattern used when the area filling. Possible values: "bsSolid", "bsClear", "bsHorizontal", "bsVertical" ,"bsFDiagonal", "bsBDiagonal", "bsCross", "bsDiagCross".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsSolid,bsClear,bsHorizontal,bsVertical,bsFDiagonal,bsBDiagonal,bsCross,bsDiagCross"/>
</Property>

<Property name="AreaColor">
<Description>
Determines color (in hexadecimal RGB format) for the area filling.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AreaLinesPen">
<Description>
Contains oref of %TMChartPen object determining attributes of the pen for drawing vertical lines through the area.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="DrawArea">
<Description>
Determines, should the area between the points connecting line and the chart bottom be filled (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HorizAxis">
<Description>
Determines, what horizontal axis is associated with this series - "TopAxis" or "BottomAxis".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",aTopAxis,aBottomAxis"/>
</Property>

<Property name="InvertedStairs">
<Description>
Determines, should the stairs (see the 'Stairs' property description) be formed by the horizontal line followed by vertical one (if set to "False"), or by the vertical line followed by horizontal one (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LineBrush">
<Description>
Determines pattern used when the %TMLineSeries contents filling. Possible values: "bsSolid", "bsClear", "bsHorizontal", "bsVertical" ,"bsFDiagonal", "bsBDiagonal", "bsCross", "bsDiagCross".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsSolid,bsClear,bsHorizontal,bsVertical,bsFDiagonal,bsBDiagonal,bsCross,bsDiagCross"/>
</Property>

<Property name="LinePen">
<Description>
Contains oref of %TMChartPen object determining attributes of the pen for drawing points connecting lines.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="OnClickPointer">
<Description>
Handler of event occuring when user clicks on a pointer (see the 'Pointer' property description).
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetPointerStyle">
<Description>
Handler of event occuring when a pointer style is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Pointer">
<Description>
Contains oref of %TMSeriesPointer object determining the shape to be painted on each vertical coordinate.
</Description>
<Type>%Library.TMSeriesPointer</Type>
</Property>

<Property name="SeriesColor">
<Description>
Determines default color for all series points painting.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Stairs">
<Description>
Determines, should the adjacent points be connected by direct lines (if set to "False") or by stairs, i.e., pairs of horizontal and vertical lines (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VertAxis">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",aLeftAxis,aRightAxis"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.AreaLinesPen.%Close()")
 $$$GENERATE(" s ##this.AreaLinesPen=##class(%TMChartPen).%New($lb(##this.Address,0,""AreaLinesPen""))")
 $$$GENERATE(" d ##this.LinePen.%Close()")
 $$$GENERATE(" s ##this.LinePen=##class(%TMChartPen).%New($lb(##this.Address,0,""LinePen""))")
 $$$GENERATE(" d ##this.Pointer.%Close()")
 $$$GENERATE(" s ##this.Pointer=##class(%TMSeriesPointer).%New($lb(##this.Address,0,""Pointer""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AreaBrushGet">
<Description>
Method for getting 'AreaBrush' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AreaBrush")
 q tmp
]]></Implementation>
</Method>

<Method name="AreaBrushSet">
<Description>
Method for setting 'AreaBrush' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AreaBrush",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AreaColorGet">
<Description>
Method for getting 'AreaColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AreaColor")
 q tmp
]]></Implementation>
</Method>

<Method name="AreaColorSet">
<Description>
Method for setting 'AreaColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AreaColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMCustomSeries"
]]></Implementation>
</Method>

<Method name="DrawAreaGet">
<Description>
Method for getting 'DrawArea' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DrawArea")
 q tmp
]]></Implementation>
</Method>

<Method name="DrawAreaSet">
<Description>
Method for setting 'DrawArea' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DrawArea",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" s result=##class(=%TMChartSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..AreaLinesPen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..AreaLinesPen,""AreaLinesPen"","""")_result")
 $$$GENERATE(" s result=result_..LinePen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..LinePen,""LinePen"","""")_result")
 $$$GENERATE(" s result=result_..Pointer.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pointer,""Pointer"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HorizAxisGet">
<Description>
Method for getting 'HorizAxis' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HorizAxis")
 q tmp
]]></Implementation>
</Method>

<Method name="HorizAxisSet">
<Description>
Method for setting 'HorizAxis' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HorizAxis",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InvertedStairsGet">
<Description>
Method for getting 'InvertedStairs' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("InvertedStairs")
 q tmp
]]></Implementation>
</Method>

<Method name="InvertedStairsSet">
<Description>
Method for setting 'InvertedStairs' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("InvertedStairs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LineBrushGet">
<Description>
Method for getting 'LineBrush' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LineBrush")
 q tmp
]]></Implementation>
</Method>

<Method name="LineBrushSet">
<Description>
Method for setting 'LineBrush' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LineBrush",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickPointerGet">
<Description>
Method for getting 'OnClickPointer' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClickPointer
]]></Implementation>
</Method>

<Method name="OnClickPointerSet">
<Description>
Method for setting 'OnClickPointer' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnClickPointer=Value
 d ##this.SetEvent("OnClickPointer",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetPointerStyleGet">
<Description>
Method for getting 'OnGetPointerStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetPointerStyle
]]></Implementation>
</Method>

<Method name="OnGetPointerStyleSet">
<Description>
Method for setting 'OnGetPointerStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnGetPointerStyle=Value
 d ##this.SetEvent("OnGetPointerStyle",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SeriesColorGet">
<Description>
Method for getting 'SeriesColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SeriesColor")
 q tmp
]]></Implementation>
</Method>

<Method name="SeriesColorSet">
<Description>
Method for setting 'SeriesColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SeriesColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StairsGet">
<Description>
Method for getting 'Stairs' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Stairs")
 q tmp
]]></Implementation>
</Method>

<Method name="StairsSet">
<Description>
Method for setting 'Stairs' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Stairs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VertAxisGet">
<Description>
Method for getting 'VertAxis' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VertAxis")
 q tmp
]]></Implementation>
</Method>

<Method name="VertAxisSet">
<Description>
Method for setting 'VertAxis' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VertAxis",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>AreaLinesPen</Value>
</Value>
<Value name="24">
<Value>LinePen</Value>
</Value>
<Value name="25">
<Value>OnClickPointer</Value>
</Value>
<Value name="26">
<Value>OnGetPointerStyle</Value>
</Value>
<Value name="27">
<Value>Pointer</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBCheckBox">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMCheckBox</Super>
<TimeCreated>64314,73324</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ValueChecked">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ValueUnchecked">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBCheckBox"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ReadOnly")
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ValueCheckedGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ValueChecked")
]]></Implementation>
</Method>

<Method name="ValueCheckedSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ValueChecked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ValueUncheckedGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ValueUnchecked")
]]></Implementation>
</Method>

<Method name="ValueUncheckedSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ValueUnchecked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>DataSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBComboBox">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMComboBox</Super>
<TimeCreated>64314,73324</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBComboBox"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ReadOnly")
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Items</Value>
</Value>
<Value name="39">
<Value>OnChange</Value>
</Value>
<Value name="40">
<Value>OnDrawItem</Value>
</Value>
<Value name="41">
<Value>OnDropDown</Value>
</Value>
<Value name="42">
<Value>OnMeasureItem</Value>
</Value>
<Value name="43">
<Value>Query</Value>
</Value>
<Value name="44">
<Value>DataSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBDateEdit">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMDateEdit</Super>
<TimeCreated>64314,73324</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBDateEdit"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>CalendarHints</Value>
</Value>
<Value name="38">
<Value>Glyph</Value>
</Value>
<Value name="39">
<Value>OnAcceptDate</Value>
</Value>
<Value name="40">
<Value>OnButtonClick</Value>
</Value>
<Value name="41">
<Value>OnChange</Value>
</Value>
<Value name="42">
<Value>DataSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBEdit">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMEdit</Super>
<TimeCreated>64314,73324</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBEdit"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnChange</Value>
</Value>
<Value name="38">
<Value>DataSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBGrid">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73324</TimeCreated>

<Property name="BorderStyle">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Col">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColCount">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColWidths">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Columns">
<Type>%Library.TMStrings</Type>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DefaultColWidth">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultDrawing">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultRowHeight">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EditorMode">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedButtons">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedColor">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedCols">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedRows">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridHeight">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridLineWidth">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridWidth">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LeftCol">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnAcceptEditKey">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCancelEdit">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChangeFocus">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCheckButton">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnColumnMoved">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnColumnSized">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawCell">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditButtonClick">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFixedCellClick">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditAlign">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditLimit">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditMask">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditStyle">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditText">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetPicklist">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRowMoved">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRowSized">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectCell">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSetEditText">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShowEditor">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnTopLeftChanged">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(goFixedVertLine,goFixedHorzLine,goVertLine,goHorzLine,goRangeSelect,goDrawFocusSelected,goRowSizing,goColSizing,goRowMoving,goColMoving,goEditing,goTabs,goRowSelect,goAlwaysShowEditor,goThumbTracking)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Row">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RowCount">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBars">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssNone,ssHorizontal,ssVertical,ssBoth"/>
</Property>

<Property name="TopRow">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleColCount">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleRowCount">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Columns.%Close()")
 $$$GENERATE(" s ..Columns=##class(%TMStrings).%New($lb(..Address,0,""Columns""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBGrid"
]]></Implementation>
</Method>

<Method name="ColCountGet">
<Description>
Method for getting 'ColCount' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="ColCountSet">
<Description>
Method for setting 'ColCount' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColGet">
<Description>
Method for getting 'Col' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Col")
 q tmp
]]></Implementation>
</Method>

<Method name="ColSet">
<Description>
Method for setting 'Col' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Col",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColWidthsGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ColWidths")
]]></Implementation>
</Method>

<Method name="ColWidthsSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ColWidths",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Description>
Method for getting 'DataSource' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DataSource"))
 q tmp
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<Description>
Method for setting 'DataSource' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultColWidthGet">
<Description>
Method for getting 'DefaultColWidth' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultColWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultColWidthSet">
<Description>
Method for setting 'DefaultColWidth' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultColWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultDrawingGet">
<Description>
Method for getting 'DefaultDrawing' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultDrawing")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultDrawingSet">
<Description>
Method for setting 'DefaultDrawing' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultDrawing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultRowHeightGet">
<Description>
Method for getting 'DefaultRowHeight' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultRowHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultRowHeightSet">
<Description>
Method for setting 'DefaultRowHeight' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultRowHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EditorModeGet">
<Description>
Method for getting 'EditorMode' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EditorMode")
 q tmp
]]></Implementation>
</Method>

<Method name="EditorModeSet">
<Description>
Method for setting 'EditorMode' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("EditorMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedButtonsGet">
<Description>
Method for getting 'FixedButtons' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedButtonsSet">
<Description>
Method for setting 'FixedButtons' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColorGet">
<Description>
Method for getting 'FixedColor' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedColor")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColorSet">
<Description>
Method for setting 'FixedColor' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColsGet">
<Description>
Method for getting 'FixedCols' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedCols")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColsSet">
<Description>
Method for setting 'FixedCols' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedCols",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedRowsGet">
<Description>
Method for getting 'FixedRows' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedRows")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedRowsSet">
<Description>
Method for setting 'FixedRows' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedRows",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Columns.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Columns,""Columns"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridHeightGet">
<Description>
Method for getting 'GridHeight' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="GridHeightSet">
<Description>
Method for setting 'GridHeight' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridLineWidthGet">
<Description>
Method for getting 'GridLineWidth' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridLineWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridLineWidthSet">
<Description>
Method for setting 'GridLineWidth' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridLineWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridWidthGet">
<Description>
Method for getting 'GridWidth' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridWidthSet">
<Description>
Method for setting 'GridWidth' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LeftColGet">
<Description>
Method for getting 'LeftCol' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LeftCol")
 q tmp
]]></Implementation>
</Method>

<Method name="LeftColSet">
<Description>
Method for setting 'LeftCol' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LeftCol",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnAcceptEditKeyGet">
<Description>
Method for getting 'OnAcceptEditKey' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAcceptEditKey
]]></Implementation>
</Method>

<Method name="OnAcceptEditKeySet">
<Description>
Method for setting 'OnAcceptEditKey' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAcceptEditKey=Value
 d ##this.SetEvent("OnAcceptEditKey",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCancelEditGet">
<Description>
Method for getting 'OnCancelEdit' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCancelEdit
]]></Implementation>
</Method>

<Method name="OnCancelEditSet">
<Description>
Method for setting 'OnCancelEdit' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCancelEdit=Value
 d ##this.SetEvent("OnCancelEdit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeFocusGet">
<Description>
Method for getting 'OnChangeFocus' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChangeFocus
]]></Implementation>
</Method>

<Method name="OnChangeFocusSet">
<Description>
Method for setting 'OnChangeFocus' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChangeFocus=Value
 d ##this.SetEvent("OnChangeFocus",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCheckButtonGet">
<Description>
Method for getting 'OnCheckButton' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCheckButton
]]></Implementation>
</Method>

<Method name="OnCheckButtonSet">
<Description>
Method for setting 'OnCheckButton' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCheckButton=Value
 d ##this.SetEvent("OnCheckButton",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnColumnMovedGet">
<Description>
Method for getting 'OnColumnMoved' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnMoved
]]></Implementation>
</Method>

<Method name="OnColumnMovedSet">
<Description>
Method for setting 'OnColumnMoved' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnMoved=Value
 d ##this.SetEvent("OnColumnMoved",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnColumnSizedGet">
<Description>
Method for getting 'OnColumnSized' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnSized
]]></Implementation>
</Method>

<Method name="OnColumnSizedSet">
<Description>
Method for setting 'OnColumnSized' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnSized=Value
 d ##this.SetEvent("OnColumnSized",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawCellGet">
<Description>
Method for getting 'OnDrawCell' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawCell
]]></Implementation>
</Method>

<Method name="OnDrawCellSet">
<Description>
Method for setting 'OnDrawCell' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawCell=Value
 d ##this.SetEvent("OnDrawCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditButtonClickGet">
<Description>
Method for getting 'OnEditButtonClick' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditButtonClick
]]></Implementation>
</Method>

<Method name="OnEditButtonClickSet">
<Description>
Method for setting 'OnEditButtonClick' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditButtonClick=Value
 d ##this.SetEvent("OnEditButtonClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditChangeGet">
<Description>
Method for getting 'OnEditChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditChange
]]></Implementation>
</Method>

<Method name="OnEditChangeSet">
<Description>
Method for setting 'OnEditChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditChange=Value
 d ##this.SetEvent("OnEditChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFixedCellClickGet">
<Description>
Method for getting 'OnFixedCellClick' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFixedCellClick
]]></Implementation>
</Method>

<Method name="OnFixedCellClickSet">
<Description>
Method for setting 'OnFixedCellClick' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFixedCellClick=Value
 d ##this.SetEvent("OnFixedCellClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditAlignGet">
<Description>
Method for getting 'OnGetEditAlign' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditAlign
]]></Implementation>
</Method>

<Method name="OnGetEditAlignSet">
<Description>
Method for setting 'OnGetEditAlign' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditAlign=Value
 d ##this.SetEvent("OnGetEditAlign",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditLimitGet">
<Description>
Method for getting 'OnGetEditLimit' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditLimit
]]></Implementation>
</Method>

<Method name="OnGetEditLimitSet">
<Description>
Method for setting 'OnGetEditLimit' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditLimit=Value
 d ##this.SetEvent("OnGetEditLimit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditMaskGet">
<Description>
Method for getting 'OnGetEditMask' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditMask
]]></Implementation>
</Method>

<Method name="OnGetEditMaskSet">
<Description>
Method for setting 'OnGetEditMask' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditMask=Value
 d ##this.SetEvent("OnGetEditMask",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditStyleGet">
<Description>
Method for getting 'OnGetEditStyle' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditStyle
]]></Implementation>
</Method>

<Method name="OnGetEditStyleSet">
<Description>
Method for setting 'OnGetEditStyle' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditStyle=Value
 d ##this.SetEvent("OnGetEditStyle",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditTextGet">
<Description>
Method for getting 'OnGetEditText' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditText
]]></Implementation>
</Method>

<Method name="OnGetEditTextSet">
<Description>
Method for setting 'OnGetEditText' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditText=Value
 d ##this.SetEvent("OnGetEditText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetPicklistGet">
<Description>
Method for getting 'OnGetPicklist' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetPicklist
]]></Implementation>
</Method>

<Method name="OnGetPicklistSet">
<Description>
Method for setting 'OnGetPicklist' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetPicklist=Value
 d ##this.SetEvent("OnGetPicklist",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRowMovedGet">
<Description>
Method for getting 'OnRowMoved' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRowMoved
]]></Implementation>
</Method>

<Method name="OnRowMovedSet">
<Description>
Method for setting 'OnRowMoved' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRowMoved=Value
 d ##this.SetEvent("OnRowMoved",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRowSizedGet">
<Description>
Method for getting 'OnRowSized' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRowSized
]]></Implementation>
</Method>

<Method name="OnRowSizedSet">
<Description>
Method for setting 'OnRowSized' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRowSized=Value
 d ##this.SetEvent("OnRowSized",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectCellGet">
<Description>
Method for getting 'OnSelectCell' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectCell
]]></Implementation>
</Method>

<Method name="OnSelectCellSet">
<Description>
Method for setting 'OnSelectCell' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSelectCell=Value
 d ##this.SetEvent("OnSelectCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSetEditTextGet">
<Description>
Method for getting 'OnSetEditText' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSetEditText
]]></Implementation>
</Method>

<Method name="OnSetEditTextSet">
<Description>
Method for setting 'OnSetEditText' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSetEditText=Value
 d ##this.SetEvent("OnSetEditText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowEditorGet">
<Description>
Method for getting 'OnShowEditor' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShowEditor
]]></Implementation>
</Method>

<Method name="OnShowEditorSet">
<Description>
Method for setting 'OnShowEditor' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShowEditor=Value
 d ##this.SetEvent("OnShowEditor",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTopLeftChangedGet">
<Description>
Method for getting 'OnTopLeftChanged' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTopLeftChanged
]]></Implementation>
</Method>

<Method name="OnTopLeftChangedSet">
<Description>
Method for setting 'OnTopLeftChanged' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTopLeftChanged=Value
 d ##this.SetEvent("OnTopLeftChanged",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowCountGet">
<Description>
Method for getting 'RowCount' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="RowCountSet">
<Description>
Method for setting 'RowCount' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowGet">
<Description>
Method for getting 'Row' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Row")
 q tmp
]]></Implementation>
</Method>

<Method name="RowSet">
<Description>
Method for setting 'Row' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Row",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarsGet">
<Description>
Method for getting 'ScrollBars' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarsSet">
<Description>
Method for setting 'ScrollBars' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TopRowGet">
<Description>
Method for getting 'TopRow' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopRow")
 q tmp
]]></Implementation>
</Method>

<Method name="TopRowSet">
<Description>
Method for setting 'TopRow' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopRow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleColCountGet">
<Description>
Method for getting 'VisibleColCount' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleColCountSet">
<Description>
Method for setting 'VisibleColCount' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleRowCountGet">
<Description>
Method for getting 'VisibleRowCount' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleRowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleRowCountSet">
<Description>
Method for setting 'VisibleRowCount' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleRowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Columns</Value>
</Value>
<Value name="39">
<Value>DataSource</Value>
</Value>
<Value name="40">
<Value>OnAcceptEditKey</Value>
</Value>
<Value name="41">
<Value>OnCancelEdit</Value>
</Value>
<Value name="42">
<Value>OnChangeFocus</Value>
</Value>
<Value name="43">
<Value>OnCheckButton</Value>
</Value>
<Value name="44">
<Value>OnColumnMoved</Value>
</Value>
<Value name="45">
<Value>OnColumnSized</Value>
</Value>
<Value name="46">
<Value>OnDrawCell</Value>
</Value>
<Value name="47">
<Value>OnEditButtonClick</Value>
</Value>
<Value name="48">
<Value>OnEditChange</Value>
</Value>
<Value name="49">
<Value>OnFixedCellClick</Value>
</Value>
<Value name="50">
<Value>OnGetEditAlign</Value>
</Value>
<Value name="51">
<Value>OnGetEditLimit</Value>
</Value>
<Value name="52">
<Value>OnGetEditMask</Value>
</Value>
<Value name="53">
<Value>OnGetEditStyle</Value>
</Value>
<Value name="54">
<Value>OnGetEditText</Value>
</Value>
<Value name="55">
<Value>OnGetPicklist</Value>
</Value>
<Value name="56">
<Value>OnRowMoved</Value>
</Value>
<Value name="57">
<Value>OnRowSized</Value>
</Value>
<Value name="58">
<Value>OnSelectCell</Value>
</Value>
<Value name="59">
<Value>OnSetEditText</Value>
</Value>
<Value name="60">
<Value>OnShowEditor</Value>
</Value>
<Value name="61">
<Value>OnTopLeftChanged</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBImage">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMImage</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBImage"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ReadOnly")
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Canvas</Value>
</Value>
<Value name="26">
<Value>OnProgress</Value>
</Value>
<Value name="27">
<Value>Picture</Value>
</Value>
<Value name="28">
<Value>DataSource</Value>
</Value>
<Value name="29">
<Value>Proportional</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDBLabel">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMLabel</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBLabel"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDBListBox">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMListBox</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBListBox"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ReadOnly")
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDBLookupComboBox">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMDBComboBox</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="KeyField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ListField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ListSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBLookupComboBox"
]]></Implementation>
</Method>

<Method name="KeyFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("KeyField")
]]></Implementation>
</Method>

<Method name="KeyFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("KeyField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ListFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ListField")
]]></Implementation>
</Method>

<Method name="ListFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ListField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ListSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("ListSource"))
]]></Implementation>
</Method>

<Method name="ListSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("ListSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDBLookupListBox">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMDBListBox</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="KeyField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="KeyValue">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ListField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ListSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBLookupListBox"
]]></Implementation>
</Method>

<Method name="KeyFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("KeyField")
]]></Implementation>
</Method>

<Method name="KeyFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("KeyField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="KeyValueGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("KeyValue")
]]></Implementation>
</Method>

<Method name="KeyValueSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("KeyValue",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ListFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ListField")
]]></Implementation>
</Method>

<Method name="ListFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ListField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ListSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("ListSource"))
]]></Implementation>
</Method>

<Method name="ListSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("ListSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDBMemo">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMMemo</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBMemo"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDBNumberEdit">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMNumberEdit</Super>
<TimeCreated>64314,73325</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBNumberEdit"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ReadOnly")
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDBRadioGroup">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMRadioGroup</Super>
<TimeCreated>64314,73326</TimeCreated>

<Property name="DataField">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DataSource">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Value">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Values">
<Type>%Library.TMStrings</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMRadioGroup")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMRadioGroup")
 e  $$$GENERATE(" d ##class(=%TMRadioGroup)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMRadioGroup")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMRadioGroup")
 e  $$$GENERATE(" d ##class(=%TMRadioGroup)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Values.%Close()")
 $$$GENERATE(" s ..Values=##class(%TMStrings).%New($lb(..Address,0,""Values""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDBRadioGroup"
]]></Implementation>
</Method>

<Method name="DataFieldGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("DataField")
]]></Implementation>
</Method>

<Method name="DataFieldSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DataField",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSource"))
]]></Implementation>
</Method>

<Method name="DataSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n val s val=""
 i Value'=$$$NULLOREF s val=Value.Address
 d ..SetProperty("DataSource",val)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMRadioGroup")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMRadioGroup")
 e  $$$GENERATE(" s result=##class(=%TMRadioGroup)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Values.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Values,""Values"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnChange=Value
 d ..SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ValueGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Value")
]]></Implementation>
</Method>

<Method name="ValueSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("Value",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Items</Value>
</Value>
<Value name="38">
<Value>OnChange</Value>
</Value>
<Value name="39">
<Value>Values</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDataSet">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73323</TimeCreated>

<Property name="Active">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FieldDefs">
<Type>%Library.TMFieldDefs</Type>
</Property>

<Property name="LogicalName">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MasterFields">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MasterSource">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnAppend">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCancel">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCheckEOF">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCompareBookmark">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDelete">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEdit">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFirst">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFreeBookmark">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetBookmark">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGotoBookmark">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnNext">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnNextEof">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnOpen">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPost">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPrevEof">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPrior">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..FieldDefs.%Close()")
 $$$GENERATE(" s ..FieldDefs=##class(%TMFieldDefs).%New($lb(..Address,..GetProperty(""FieldDefs"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveGet">
<Description>
Method for getting 'Active' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Active")
 q tmp
]]></Implementation>
</Method>

<Method name="ActiveSet">
<Description>
Method for setting 'Active' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Active",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDataSet"
]]></Implementation>
</Method>

<Method name="Close">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Close",$LB())
 q
]]></Implementation>
</Method>

<Method name="First">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("First",$LB())
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..FieldDefs.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..FieldDefs,""FieldDefs"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetValue">
<Description>
Returns Value at specified column number in current record.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValue",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetValues">
<Description>
Returns list of all fields in current record in order, specified in
field's definition.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValues",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Last">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Last",$LB())
 q
]]></Implementation>
</Method>

<Method name="LogicalNameGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("LogicalName")
]]></Implementation>
</Method>

<Method name="LogicalNameSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("LogicalName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MasterFieldsGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("MasterFields")
]]></Implementation>
</Method>

<Method name="MasterFieldsSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("MasterFields",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MasterSourceGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("MasterSource")
]]></Implementation>
</Method>

<Method name="MasterSourceSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value=0 s tmp=""
 e  s tmp=Value.Address
 d ..SetProperty("MasterSource",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Next">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Next",$LB())
 q
]]></Implementation>
</Method>

<Method name="OnAppendGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAppend
]]></Implementation>
</Method>

<Method name="OnAppendSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAppend=Value
 d ##this.SetEvent("OnAppend",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCancelGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCancel
]]></Implementation>
</Method>

<Method name="OnCancelSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCancel=Value
 d ##this.SetEvent("OnCancel",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCheckEOFGet">
<Description>
Method for getting 'OnCheckEOF' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCheckEOF
]]></Implementation>
</Method>

<Method name="OnCheckEOFSet">
<Description>
Method for setting 'OnCheckEOF' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCheckEOF=Value
 d ##this.SetEvent("OnCheckEOF",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCompareBookmarkGet">
<Description>
Method for getting 'OnCompareBookmark' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCompareBookmark
]]></Implementation>
</Method>

<Method name="OnCompareBookmarkSet">
<Description>
Method for setting 'OnCompareBookmark' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCompareBookmark=Value
 d ##this.SetEvent("OnCompareBookmark",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDeleteGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDelete
]]></Implementation>
</Method>

<Method name="OnDeleteSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDelete=Value
 d ##this.SetEvent("OnDelete",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEdit
]]></Implementation>
</Method>

<Method name="OnEditSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEdit=Value
 d ##this.SetEvent("OnEdit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFirstGet">
<Description>
Method for getting 'OnFirst' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFirst
]]></Implementation>
</Method>

<Method name="OnFirstSet">
<Description>
Method for setting 'OnFirst' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFirst=Value
 d ##this.SetEvent("OnFirst",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFreeBookmarkGet">
<Description>
Method for getting 'OnFreeBookmark' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFreeBookmark
]]></Implementation>
</Method>

<Method name="OnFreeBookmarkSet">
<Description>
Method for setting 'OnFreeBookmark' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFreeBookmark=Value
 d ##this.SetEvent("OnFreeBookmark",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetBookmarkGet">
<Description>
Method for getting 'OnGetBookmark' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetBookmark
]]></Implementation>
</Method>

<Method name="OnGetBookmarkSet">
<Description>
Method for setting 'OnGetBookmark' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetBookmark=Value
 d ##this.SetEvent("OnGetBookmark",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGotoBookmarkGet">
<Description>
Method for getting 'OnGotoBookmark' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGotoBookmark
]]></Implementation>
</Method>

<Method name="OnGotoBookmarkSet">
<Description>
Method for setting 'OnGotoBookmark' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGotoBookmark=Value
 d ##this.SetEvent("OnGotoBookmark",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnNextEofGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnNextEof
]]></Implementation>
</Method>

<Method name="OnNextEofSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnNextEof=Value
 d ##this.SetEvent("OnNextEof",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnNextGet">
<Description>
Method for getting 'OnNext' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnNext
]]></Implementation>
</Method>

<Method name="OnNextSet">
<Description>
Method for setting 'OnNext' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnNext=Value
 d ##this.SetEvent("OnNext",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnOpenGet">
<Description>
Method for getting 'OnOpen' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnOpen
]]></Implementation>
</Method>

<Method name="OnOpenSet">
<Description>
Method for setting 'OnOpen' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnOpen=Value
 d ##this.SetEvent("OnOpen",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPostGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPost
]]></Implementation>
</Method>

<Method name="OnPostSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPost=Value
 d ##this.SetEvent("OnPost",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPrevEofGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPrevEof
]]></Implementation>
</Method>

<Method name="OnPrevEofSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnNextEof=Value
 d ##this.SetEvent("OnPrevEof",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPriorGet">
<Description>
Method for getting 'OnPrior' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPrior
]]></Implementation>
</Method>

<Method name="OnPriorSet">
<Description>
Method for setting 'OnPrior' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPrior=Value
 d ##this.SetEvent("OnPrior",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Open">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Open",$LB())
 q
]]></Implementation>
</Method>

<Method name="Prior">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Prior",$LB())
 q
]]></Implementation>
</Method>

<Method name="SetValue">
<Description>
Sets value of current record at specified column number.
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetValue",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetValues">
<Description>
Sets values in current record using Value as list of values in order
specified in FieldDefs.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetValues",$lb(Value))
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>FieldDefs</Value>
</Value>
<Value name="9">
<Value>LogicalName</Value>
</Value>
<Value name="10">
<Value>MasterFields</Value>
</Value>
<Value name="11">
<Value>MasterSource</Value>
</Value>
<Value name="12">
<Value>OnAppend</Value>
</Value>
<Value name="13">
<Value>OnCancel</Value>
</Value>
<Value name="14">
<Value>OnCheckEOF</Value>
</Value>
<Value name="15">
<Value>OnClose</Value>
</Value>
<Value name="16">
<Value>OnCompareBookmark</Value>
</Value>
<Value name="17">
<Value>OnDelete</Value>
</Value>
<Value name="18">
<Value>OnEdit</Value>
</Value>
<Value name="19">
<Value>OnFirst</Value>
</Value>
<Value name="20">
<Value>OnFreeBookmark</Value>
</Value>
<Value name="21">
<Value>OnGetBookmark</Value>
</Value>
<Value name="22">
<Value>OnGotoBookmark</Value>
</Value>
<Value name="23">
<Value>OnNext</Value>
</Value>
<Value name="24">
<Value>OnNextEof</Value>
</Value>
<Value name="25">
<Value>OnOpen</Value>
</Value>
<Value name="26">
<Value>OnPost</Value>
</Value>
<Value name="27">
<Value>OnPrevEof</Value>
</Value>
<Value name="28">
<Value>OnPrior</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDataSource">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73323</TimeCreated>

<Property name="DataSet">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDataSource"
]]></Implementation>
</Method>

<Method name="DataSetGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DataSet"))
]]></Implementation>
</Method>

<Method name="DataSetSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value=0 s tmp=""
 e  s tmp=Value.Address
 d ..SetProperty("DataSet",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMDateEdit">
<Description>
This class represents the date-selecting dialog with the popup calendar and the edit field for direct date input.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73323</TimeCreated>

<Property name="AutoSelect">
<Description>
Determines, should the text in the edit field be automatically selected when the control gets focus.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BlanksChar">
<Description>
Determines character to be displayed in the edit field to mark blank places to be filled.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ButtonHint">
<Description>
Contains text of hint for the calendar popup button.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ButtonWidth">
<Description>
Determines the width (in pixels) of the button for the calendar popup.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CalendarHints">
<Description>
Contains oref of %TMStrings object with texts of the popup calendar hints.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="CalendarStyle">
<Description>
Determines the calendar style. Possible values: "csPopup" (default value) or "csDialog".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",csPopup,csDialog"/>
</Property>

<Property name="CheckOnExit">
<Description>
Determines, should 'OnAcceptDate' event occur when the dialog finishes (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ClickKey">
<Description>
For use in future.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Date">
<Description>
Contains entered or selected date in the Cache' horolog format.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DefaultToday">
<Description>
Determines, should the today date be considered as default for this dialog (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DialogTitle">
<Description>
Contains the text string to be displayed as the dialog title.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DirectInput">
<Description>
Determines, is the direct input of date allowed (if set to "True") or disabled (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Glyph">
<Description>
Contains oref of %TMBitMap object with the image of custom glyph for the calendar popup button.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="GlyphKind">
<Description>
Determines appearance of the glyph on the button for the calendar popup. Possible values:  "gkDefault", "gkDropDown", "gkEllipsis" or "gkCustom".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",gkCustom,gkDefault,gkDropDown,gkEllipsis"/>
</Property>

<Property name="HideSelection">
<Description>
Determines, should selected text in the edit field remain highlighted when the control looses focus (if set to "False") or not (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="NumGlyphs">
<Description>
For use in future.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnAcceptDate">
<Description>
Handler of event occuring when the selected date requires validation.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnButtonClick">
<Description>
Handler of event occuring when the calendar popup button is clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the date selected in the popup calendar or typed in the edit field changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PopupAlign">
<Description>
Determines the popup calendar alignment. Possible values: "epaLeft" or "epaRight".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",epaRight,epaLeft"/>
</Property>

<Property name="PopupColor">
<Description>
Determines background color (in hexadecimal RGB format) for the popup calendar.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StartOfWeek">
<Description>
Determines starting day of a week. Possible values: "Mon" (default value), "Tue", "Wed", "Thu", "Fri", "Sat" or "Sun".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",Sun,Mon,Tue,Wed,Thu,Fri,Sat"/>
</Property>

<Property name="WeekendColor">
<Description>
Determines foreground color (in hexadecimal RGB format) for weekends in the popup calendar. To change foreground color for working days, use the inherited 'Font.Color' property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Weekends">
<Description>
Determines days to be marked as weekends. Possible value: Cache' list ($lb()) where only necessary of the following strings are combined: "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" or "Sun". Default vaue: $lb("Sun").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(Sun,Mon,Tue,Wed,Thu,Fri,Sat)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="YearDigits">
<Description>
Determines, should years be represented by 2 or 4 digits. Possible values: "dyFour", "dyTwo" or "dyDefault".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dyDefault,dyFour,dyTwo"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.CalendarHints.%Close()")
 $$$GENERATE(" s ##this.CalendarHints=##class(%TMStrings).%New($lb(##this.Address,0,""CalendarHints""))")
 $$$GENERATE(" d ##this.Glyph.%Close()")
 $$$GENERATE(" s ##this.Glyph=##class(%TMBitmap).%New($lb(##this.Address,0,""Glyph""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoSelectGet">
<Description>
Method for getting 'AutoSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSelectSet">
<Description>
Method for setting 'AutoSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BlanksCharGet">
<Description>
Method for getting 'BlanksChar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BlanksChar")
 q tmp
]]></Implementation>
</Method>

<Method name="BlanksCharSet">
<Description>
Method for setting 'BlanksChar' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BlanksChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ButtonHintGet">
<Description>
Method for getting 'ButtonHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ButtonHint")
 q tmp
]]></Implementation>
</Method>

<Method name="ButtonHintSet">
<Description>
Method for setting 'ButtonHint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ButtonHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ButtonWidthGet">
<Description>
Method for getting 'ButtonWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ButtonWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ButtonWidthSet">
<Description>
Method for setting 'ButtonWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ButtonWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CalendarStyleGet">
<Description>
Method for getting 'CalendarStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CalendarStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="CalendarStyleSet">
<Description>
Method for setting 'CalendarStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CalendarStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckOnExitGet">
<Description>
Method for getting 'CheckOnExit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CheckOnExit")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckOnExitSet">
<Description>
Method for setting 'CheckOnExit' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CheckOnExit",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDateEdit"
]]></Implementation>
</Method>

<Method name="ClickKeyGet">
<Description>
Method for getting 'ClickKey' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClickKey")
 q tmp
]]></Implementation>
</Method>

<Method name="ClickKeySet">
<Description>
Method for setting 'ClickKey' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ClickKey",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DateGet">
<Description>
Method for getting 'Date' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Date")
 q tmp
]]></Implementation>
</Method>

<Method name="DateSet">
<Description>
Method for setting 'Date' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Date",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultTodayGet">
<Description>
Method for getting 'DefaultToday' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultToday")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultTodaySet">
<Description>
Method for setting 'DefaultToday' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultToday",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DialogTitleGet">
<Description>
Method for getting 'DialogTitle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DialogTitle")
 q tmp
]]></Implementation>
</Method>

<Method name="DialogTitleSet">
<Description>
Method for setting 'DialogTitle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DialogTitle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DirectInputGet">
<Description>
Method for getting 'DirectInput' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DirectInput")
 q tmp
]]></Implementation>
</Method>

<Method name="DirectInputSet">
<Description>
Method for setting 'DirectInput' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DirectInput",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..CalendarHints.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..CalendarHints,""CalendarHints"","""")_result")
 $$$GENERATE(" s result=result_..Glyph.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Glyph,""Glyph"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GlyphKindGet">
<Description>
Method for getting 'GlyphKind' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GlyphKind")
 q tmp
]]></Implementation>
</Method>

<Method name="GlyphKindSet">
<Description>
Method for setting 'GlyphKind' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GlyphKind",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NumGlyphsGet">
<Description>
Method for getting 'NumGlyphs' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("NumGlyphs")
 q tmp
]]></Implementation>
</Method>

<Method name="NumGlyphsSet">
<Description>
Method for setting 'NumGlyphs' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("NumGlyphs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnAcceptDateGet">
<Description>
Method for getting 'OnAcceptDate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAcceptDate
]]></Implementation>
</Method>

<Method name="OnAcceptDateSet">
<Description>
Method for setting 'OnAcceptDate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnAcceptDate=Value
 d ##this.SetEvent("OnAcceptDate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnButtonClickGet">
<Description>
Method for getting 'OnButtonClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnButtonClick
]]></Implementation>
</Method>

<Method name="OnButtonClickSet">
<Description>
Method for setting 'OnButtonClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnButtonClick=Value
 d ##this.SetEvent("OnButtonClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PopupAlignGet">
<Description>
Method for getting 'PopupAlign' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PopupAlign")
 q tmp
]]></Implementation>
</Method>

<Method name="PopupAlignSet">
<Description>
Method for setting 'PopupAlign' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PopupAlign",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PopupColorGet">
<Description>
Method for getting 'PopupColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PopupColor")
 q tmp
]]></Implementation>
</Method>

<Method name="PopupColorSet">
<Description>
Method for setting 'PopupColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PopupColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StartOfWeekGet">
<Description>
Method for getting 'StartOfWeek' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StartOfWeek")
 q tmp
]]></Implementation>
</Method>

<Method name="StartOfWeekSet">
<Description>
Method for setting 'StartOfWeek' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StartOfWeek",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WeekendColorGet">
<Description>
Method for getting 'WeekendColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WeekendColor")
 q tmp
]]></Implementation>
</Method>

<Method name="WeekendColorSet">
<Description>
Method for setting 'WeekendColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WeekendColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WeekendsGet">
<Description>
Method for getting 'Weekends' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Weekends")
 q tmp
]]></Implementation>
</Method>

<Method name="WeekendsSet">
<Description>
Method for setting 'Weekends' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Weekends",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="YearDigitsGet">
<Description>
Method for getting 'YearDigits' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("YearDigits")
 q tmp
]]></Implementation>
</Method>

<Method name="YearDigitsSet">
<Description>
Method for setting 'YearDigits' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("YearDigits",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>CalendarHints</Value>
</Value>
<Value name="38">
<Value>Glyph</Value>
</Value>
<Value name="39">
<Value>OnAcceptDate</Value>
</Value>
<Value name="40">
<Value>OnButtonClick</Value>
</Value>
<Value name="41">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMDock">
<Description>
Represents the server-side image of the object used to dock %TMToolBar objects.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73326</TimeCreated>

<Property name="AllowDrag">
<Description>
Determines, can toolbars on this dock be dragged, and other toolbars be docked at this dock (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Background">
<Description>
Optional, contains oref of %TMBitMap object to use as background tile.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="BackgroundOnToolbars">
<Description>
If set to "True", docked toolbars are transparent for background tile.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BackgroundTransparent">
<Description>
If set to "True", the color of upper-left corner of background image is substituted with the value of the 'Color' property.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BoundLines">
<Description>
Determines extra lines to be drawn along the dock sides. Possible value: Cache' list ($lb()) containing only necessary from the following strings: "blTop", "blBottom", "blLeft" and "blRight".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(blTop,blBottom,blLeft,blRight)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FixAlign">
<Description>
If set to "True", one pixel may be added to the control's width or height, if it is necessary to align it correctly.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LimitToOneRow">
<Description>
If set to "True", only one row of toolbars can be docked. Recommended value is "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnInsertRemoveBar">
<Description>
Handler of event occuring when a toolbar is docked or undocked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRequestDock">
<Description>
Handler of event occuring when dragged toolbar moves over the dock.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Position">
<Description>
Specifies the position of the dock on a form. Possible values: "dpTop", "dpBottom", "dpLeft" or "dpRight".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dpTop,dpBottom,dpLeft,dpRight"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Background.%Close()")
 $$$GENERATE(" s ##this.Background=##class(%TMBitmap).%New($lb(##this.Address,0,""Background""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowDragGet">
<Description>
Method for getting 'AllowDrag' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowDrag")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowDragSet">
<Description>
Method for setting 'AllowDrag' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllowDrag",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackgroundOnToolbarsGet">
<Description>
Method for getting 'BackgroundOnToolbars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackgroundOnToolbars")
 q tmp
]]></Implementation>
</Method>

<Method name="BackgroundOnToolbarsSet">
<Description>
Method for setting 'BackgroundOnToolbars' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BackgroundOnToolbars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackgroundTransparentGet">
<Description>
Method for getting 'BackgroundTransparent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackgroundTransparent")
 q tmp
]]></Implementation>
</Method>

<Method name="BackgroundTransparentSet">
<Description>
Method for setting 'BackgroundTransparent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BackgroundTransparent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
Disables toolbar arrangement. Call this when moving multiple toolbars on a dock to reduce flicker. Once the changes are complete, call EndUpdate.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="BoundLinesGet">
<Description>
Method for getting 'BoundLines' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BoundLines")
 q tmp
]]></Implementation>
</Method>

<Method name="BoundLinesSet">
<Description>
Method for setting 'BoundLines' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BoundLines",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMDock"
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
Re-enables toolbar arrangement after the BeginUpdate method call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="FixAlignGet">
<Description>
Method for getting 'FixAlign' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixAlign")
 q tmp
]]></Implementation>
</Method>

<Method name="FixAlignSet">
<Description>
Method for setting 'FixAlign' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixAlign",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Background.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Background,""Background"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="LimitToOneRowGet">
<Description>
Method for getting 'LimitToOneRow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LimitToOneRow")
 q tmp
]]></Implementation>
</Method>

<Method name="LimitToOneRowSet">
<Description>
Method for setting 'LimitToOneRow' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LimitToOneRow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnInsertRemoveBarGet">
<Description>
Method for getting 'OnInsertRemoveBar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnInsertRemoveBar
]]></Implementation>
</Method>

<Method name="OnInsertRemoveBarSet">
<Description>
Method for setting 'OnInsertRemoveBar' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnInsertRemoveBar=Value
 d ##this.SetEvent("OnInsertRemoveBar",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRequestDockGet">
<Description>
Method for getting 'OnRequestDock' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRequestDock
]]></Implementation>
</Method>

<Method name="OnRequestDockSet">
<Description>
Method for setting 'OnRequestDock' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRequestDock=Value
 d ##this.SetEvent("OnRequestDock",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Background</Value>
</Value>
<Value name="26">
<Value>OnInsertRemoveBar</Value>
</Value>
<Value name="27">
<Value>OnRequestDock</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMEdit">
<Description>
This class represents the server-side image of a windows single-line edit control.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73326</TimeCreated>

<Property name="AutoSelect">
<Description>
Determines, should all the text become selected when the focus set on this control. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines, will the control have a border around the client area. Possible values:<br>
"bsSingle" - single-line border<br>
"bsNone" - no border.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="CanUndo">
<Description>
Indicates, are there changes saved in the Undo buffer. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CharCase">
<Description>
Determines the case conversion of the text in edit control. Possible values: "ecNormal" (no conversion), "ecUpperCase" and "ecLowerCase". Note that case conversion affects on the actual text, not only on it's appearance.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ecNormal,ecUpperCase,ecLowerCase"/>
</Property>

<Property name="HideSelection">
<Description>
Determines, should the selected text be highlighted when the control is out of focus. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxLength">
<Description>
Limits the length of string the user can input in the edit portion of the drop-down list. 0 means no limitation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Modified">
<Description>
Indicates, is the text modified by the user. Possible values: "True" or "False". The code altering the 'Text' property should set the 'Modified' property to "True".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OEMConvert">
<Description>
Determines, should the entered characters be converted from the client charset to OEM and then back. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the text is changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PasswordChar">
<Description>
If set to something else than $C(0), determines the character displayed instead of characters actually typed in the edit control.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Description>
Determines, should the text be protected from being changed by user. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelLength">
<Description>
Represents the length of the selected text in the edit control.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelStart">
<Description>
Represents the number of first symbol of selected part of text in the edit control (numbering starts from 0). If no text is selected, represents the cursor position.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelText">
<Description>
Represents the selected text in the edit control. Change of this property replaces the  selected text with new value, or inserts it at the cursor if no text is selected.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="AutoSelectGet">
<Description>
Method for getting 'AutoSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSelectSet">
<Description>
Method for setting 'AutoSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CanUndoGet">
<Description>
Method for getting 'CanUndo' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CanUndo")
 q tmp
]]></Implementation>
</Method>

<Method name="CanUndoSet">
<Description>
Method for setting 'CanUndo' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CanUndo",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CharCaseGet">
<Description>
Method for getting 'CharCase' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CharCase")
 q tmp
]]></Implementation>
</Method>

<Method name="CharCaseSet">
<Description>
Method for setting 'CharCase' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CharCase",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMEdit"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Puts an empty string to the Text property, removing all text.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearSelection">
<Description>
Deletes selected part of text from the edit control.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearSelection",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearUndo">
<Description>
Makes changes in the Text property irreversible and sets the CanUndo property to "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearUndo",$lb())
 q
]]></Implementation>
</Method>

<Method name="CopyToClipboard">
<Description>
Copies the selected text into Windows Clipboard. If no text is selected, ClipBoard remains unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="CutToClipboard">
<Description>
Copies the selected text into Windows Clipboard and then deletes it from the edit control. If no text is selected, ClipBoard remains unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CutToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLengthGet">
<Description>
Method for getting 'MaxLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxLength")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxLengthSet">
<Description>
Method for setting 'MaxLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModifiedGet">
<Description>
Method for getting 'Modified' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Modified")
 q tmp
]]></Implementation>
</Method>

<Method name="ModifiedSet">
<Description>
Method for setting 'Modified' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Modified",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OEMConvertGet">
<Description>
Method for getting 'OEMConvert' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OEMConvert")
 q tmp
]]></Implementation>
</Method>

<Method name="OEMConvertSet">
<Description>
Method for setting 'OEMConvert' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OEMConvert",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PasswordCharGet">
<Description>
Method for getting 'PasswordChar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PasswordChar")
 q tmp
]]></Implementation>
</Method>

<Method name="PasswordCharSet">
<Description>
Method for setting 'PasswordChar' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PasswordChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PasteFromClipboard">
<Description>
Replaces the selected text with the Windows ClipBoard contents. If no text is selected, inserts the Clipboard contents at the cursor. Does nothing if the Clipboard contains no text.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PasteFromClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelLengthGet">
<Description>
Method for getting 'SelLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelLength")
 q tmp
]]></Implementation>
</Method>

<Method name="SelLengthSet">
<Description>
Method for setting 'SelLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelStartGet">
<Description>
Method for getting 'SelStart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelStart")
 q tmp
]]></Implementation>
</Method>

<Method name="SelStartSet">
<Description>
Method for setting 'SelStart' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelStart",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelTextGet">
<Description>
Method for getting 'SelText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelText")
 q tmp
]]></Implementation>
</Method>

<Method name="SelTextSet">
<Description>
Method for setting 'SelText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectAll">
<Description>
Marks all the text in the edit control as selected.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SelectAll",$lb())
 q
]]></Implementation>
</Method>

<Method name="Undo">
<Description>
Cancel changes in the Text property made since the last ClearUndo call or all changes, if ClearUndo was never called.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Undo",$lb())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMFDesigner">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73328</TimeCreated>

<Property name="CloseQuery">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DesignerRestrictions">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HideDisabledButtons">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnLoadReport">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSaveReport">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OpenDir">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SaveDir">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TemplateDir">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFDesigner"
]]></Implementation>
</Method>

<Method name="DesignerRestrictionsGet">
<Description>
Method for getting 'DesignerRestrictions' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DesignerRestrictions")
 q tmp
]]></Implementation>
</Method>

<Method name="DesignerRestrictionsSet">
<Description>
Method for setting 'DesignerRestrictions' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DesignerRestrictions",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideDisabledButtonsGet">
<Description>
Method for getting 'HideDisabledButtons' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideDisabledButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="HideDisabledButtonsSet">
<Description>
Method for setting 'HideDisabledButtons' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideDisabledButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnLoadReportGet">
<Description>
Method for getting 'OnLoadReport' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnLoadReport
]]></Implementation>
</Method>

<Method name="OnLoadReportSet">
<Description>
Method for setting 'OnLoadReport' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnLoadReport=Value
 d ##this.SetEvent("OnLoadReport",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSaveReportGet">
<Description>
Method for getting 'OnSaveReport' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSaveReport
]]></Implementation>
</Method>

<Method name="OnSaveReportSet">
<Description>
Method for setting 'OnSaveReport' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnLoadReport=Value
 d ##this.SetEvent("OnSaveReport",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OpenDirGet">
<Description>
Method for getting 'OpenDir' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OpenDir")
 q tmp
]]></Implementation>
</Method>

<Method name="OpenDirSet">
<Description>
Method for setting 'OpenDir' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OpenDir",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SaveDirGet">
<Description>
Method for getting 'SaveDir' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SaveDir")
 q tmp
]]></Implementation>
</Method>

<Method name="SaveDirSet">
<Description>
Method for setting 'SaveDir' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SaveDir",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TemplateDirGet">
<Description>
Method for getting 'TemplateDir' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TemplateDir")
 q tmp
]]></Implementation>
</Method>

<Method name="TemplateDirSet">
<Description>
Method for setting 'TemplateDir' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TemplateDir",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>Tag</Value>
</Value>
<Value name="7">
<Value>OnLoadReport</Value>
</Value>
<Value name="8">
<Value>OnSaveReport</Value>
</Value>
<Value name="9">
<Value>OnShow</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMFReport">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73328</TimeCreated>

<Property name="CanRebuild">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Data">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DefaultCollate">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultCopies">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DoublePass">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Filename">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FinalPass">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GrayedButtons">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="InitialZoom">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",pzDefault,pzPageWidth,pzOnePage,pzTwoPages"/>
</Property>

<Property name="MDIPreview">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ModalPreview">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ModifyPrepared">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnBeforePrint">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeginBand">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeginColumn">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeginDoc">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnBeginPage">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEndBand">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEndDoc">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEndPage">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetValue">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnObjectClick">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPrintColumn">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnProgress">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnUserFunction">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PreviewButtons">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(pbZoom,pbLoad,pbSave,pbPrint,pbFind,pbHelp,pbExit)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PrintIfEmpty">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PrintToDefault">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RebuildPrinter">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ReportForm">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReportType">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",rtSimple,rtMultiple"/>
</Property>

<Property name="ShowPrintDialog">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowProgress">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StreamReportForm">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Terminated">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Title">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="CanRebuildGet">
<Description>
Method for getting 'CanRebuild' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CanRebuild")
 q tmp
]]></Implementation>
</Method>

<Method name="CanRebuildSet">
<Description>
Method for setting 'CanRebuild' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CanRebuild",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFReport"
]]></Implementation>
</Method>

<Method name="Clear">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Clear",$LB())
 q
]]></Implementation>
</Method>

<Method name="DefaultCollateGet">
<Description>
Method for getting 'DefaultCollate' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultCollate")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultCollateSet">
<Description>
Method for setting 'DefaultCollate' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultCollate",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultCopiesGet">
<Description>
Method for getting 'DefaultCopies' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultCollate")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultCopiesSet">
<Description>
Method for setting 'DefaultCopies' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultCopies",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DesignReport">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("DesignReport",$LB())
 q
]]></Implementation>
</Method>

<Method name="DoublePassGet">
<Description>
Method for getting 'DoublePass' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DoublePass")
 q tmp
]]></Implementation>
</Method>

<Method name="DoublePassSet">
<Description>
Method for setting 'DoublePass' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DoublePass",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FilenameGet">
<Description>
Method for getting 'Filename' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Filename")
 q tmp
]]></Implementation>
</Method>

<Method name="FilenameSet">
<Description>
Method for setting 'Filename' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Filename",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FinalPassGet">
<Description>
Method for getting 'FinalPass' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FinalPass")
 q tmp
]]></Implementation>
</Method>

<Method name="FinalPassSet">
<Description>
Method for setting 'FinalPass' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FinalPass",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FindObject">
<FormalSpec>Name:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("FindObject",$LB(Name))
]]></Implementation>
</Method>

<Method name="GetRObjectProperty">
<FormalSpec>pObject:%Integer,PropName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("GetRObjectProperty",$LB(pObject,PropName))
]]></Implementation>
</Method>

<Method name="GrayedButtonsGet">
<Description>
Method for getting 'GrayedButtons' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GrayedButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="GrayedButtonsSet">
<Description>
Method for setting 'GrayedButtons' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GrayedButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InitialZoomGet">
<Description>
Method for getting 'InitialZoom' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("InitialZoom")
 q tmp
]]></Implementation>
</Method>

<Method name="InitialZoomSet">
<Description>
Method for setting 'InitialZoom' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("InitialZoom",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MDIPreviewGet">
<Description>
Method for getting 'MDIPreview' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MDIPreview")
 q tmp
]]></Implementation>
</Method>

<Method name="MDIPreviewSet">
<Description>
Method for setting 'MDIPreview' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MDIPreview",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModalPreviewGet">
<Description>
Method for getting 'ModalPreview' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ModalPreview")
 q tmp
]]></Implementation>
</Method>

<Method name="ModalPreviewSet">
<Description>
Method for setting 'ModalPreview' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ModalPreview",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModifyPreparedGet">
<Description>
Method for getting 'ModifyPrepared' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ModifyPrepared")
 q tmp
]]></Implementation>
</Method>

<Method name="ModifyPreparedSet">
<Description>
Method for setting 'ModifyPrepared' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ModifyPrepared",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforePrintGet">
<Description>
Method for getting 'OnBeforePrint' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeforePrint
]]></Implementation>
</Method>

<Method name="OnBeforePrintSet">
<Description>
Method for setting 'OnBeforePrint' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeforePrint=Value
 d ##this.SetEvent("OnBeforePrint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeginBandGet">
<Description>
Method for getting 'OnBeginBand' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeginBand
]]></Implementation>
</Method>

<Method name="OnBeginBandSet">
<Description>
Method for setting 'OnBeginBand' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeginBand=Value
 d ##this.SetEvent("OnBeginBand",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeginColumnGet">
<Description>
Method for getting 'OnBeginColumn' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeginColumn
]]></Implementation>
</Method>

<Method name="OnBeginColumnSet">
<Description>
Method for setting 'OnBeginColumn' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeginColumn=Value
 d ##this.SetEvent("OnBeginColumn",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeginDocGet">
<Description>
Method for getting 'OnBeginDoc' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeginDoc
]]></Implementation>
</Method>

<Method name="OnBeginDocSet">
<Description>
Method for setting 'OnBeginDoc' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeginDoc=Value
 d ##this.SetEvent("OnBeginDoc",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnBeginPageGet">
<Description>
Method for getting 'OnBeginPage' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnBeginPage
]]></Implementation>
</Method>

<Method name="OnBeginPageSet">
<Description>
Method for setting 'OnBeginPage' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnBeginPage=Value
 d ##this.SetEvent("OnBeginPage",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEndBandGet">
<Description>
Method for getting 'OnEndBand' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEndBand
]]></Implementation>
</Method>

<Method name="OnEndBandSet">
<Description>
Method for setting 'OnEndBand' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEndBand=Value
 d ##this.SetEvent("OnEndBand",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEndDocGet">
<Description>
Method for getting 'OnEndDoc' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEndDoc
]]></Implementation>
</Method>

<Method name="OnEndDocSet">
<Description>
Method for setting 'OnEndDoc' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEndDoc=Value
 d ##this.SetEvent("OnEndDoc",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEndPageGet">
<Description>
Method for getting 'OnEndPage' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEndPage
]]></Implementation>
</Method>

<Method name="OnEndPageSet">
<Description>
Method for setting 'OnEndPage' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEndPage=Value
 d ##this.SetEvent("OnEndPage",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetValueGet">
<Description>
Method for getting 'OnGetValue' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetValue
]]></Implementation>
</Method>

<Method name="OnGetValueSet">
<Description>
Method for setting 'OnGetValue' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetValue=Value
 d ##this.SetEvent("OnGetValue",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnObjectClickGet">
<Description>
Method for getting 'OnObjectClick' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnObjectClick
]]></Implementation>
</Method>

<Method name="OnObjectClickSet">
<Description>
Method for setting 'OnObjectClick' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnObjectClick=Value
 d ##this.SetEvent("OnObjectClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPrintColumnGet">
<Description>
Method for getting 'OnPrintColumn' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPrintColumn
]]></Implementation>
</Method>

<Method name="OnPrintColumnSet">
<Description>
Method for setting 'OnPrintColumn' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPrintColumn=Value
 d ##this.SetEvent("OnPrintColumn",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnProgressGet">
<Description>
Method for getting 'OnProgress' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnProgress
]]></Implementation>
</Method>

<Method name="OnProgressSet">
<Description>
Method for setting 'OnProgress' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnProgress=Value
 d ##this.SetEvent("OnProgress",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnUserFunctionGet">
<Description>
Method for getting 'OnUserFunction' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnUserFunction
]]></Implementation>
</Method>

<Method name="OnUserFunctionSet">
<Description>
Method for setting 'OnUserFunction' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnUserFunction=Value
 d ##this.SetEvent("OnUserFunction",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrepareReport">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("PrepareReport",$LB())
 q
]]></Implementation>
</Method>

<Method name="PreviewButtonsGet">
<Description>
Method for getting 'PreviewButtons' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PreviewButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="PreviewButtonsSet">
<Description>
Method for setting 'PreviewButtons' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PreviewButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrintIfEmptyGet">
<Description>
Method for getting 'PrintIfEmpty' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrintIfEmpty")
 q tmp
]]></Implementation>
</Method>

<Method name="PrintIfEmptySet">
<Description>
Method for setting 'PrintIfEmpty' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrintIfEmpty",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrintPreparedReport">
<FormalSpec>PageNumbers:%String,Copies:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("PrintPreparedReport",$lb(PageNumbers,Copies))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrintToDefaultGet">
<Description>
Method for getting 'PrintToDefault' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrintToDefault")
 q tmp
]]></Implementation>
</Method>

<Method name="PrintToDefaultSet">
<Description>
Method for setting 'PrintToDefault' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrintToDefault",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RebuildPrinterGet">
<Description>
Method for getting 'RebuildPrinter' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RebuildPrinter")
 q tmp
]]></Implementation>
</Method>

<Method name="RebuildPrinterSet">
<Description>
Method for setting 'RebuildPrinter' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RebuildPrinter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReportFormGet">
<Description>
Method for getting 'ReportForm' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReportForm")
 q tmp
]]></Implementation>
</Method>

<Method name="ReportFormSet">
<Description>
Method for setting 'ReportForm' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s i%ReportForm=Value
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ##this.SetProperty("ReportForm",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReportTypeGet">
<Description>
Method for getting 'ReportType' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReportType")
 q tmp
]]></Implementation>
</Method>

<Method name="ReportTypeSet">
<Description>
Method for setting 'ReportType' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReportType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SaveToStream">
<Description>
Saves report into specified Cache stream.
</Description>
<FormalSpec>StreamOref:%AbstractStream</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToStream",$lb(+StreamOref))
 q
]]></Implementation>
</Method>

<Method name="SetRObjectProperty">
<FormalSpec>pObject:%Integer,PropName:%String,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetRObjectProperty",$LB(pObject,PropName,Value))
 q
]]></Implementation>
</Method>

<Method name="ShowPreparedReport">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("ShowPreparedReport",$lb())
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowPrintDialogGet">
<Description>
Method for getting 'ShowPrintDialog' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowPrintDialog")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowPrintDialogSet">
<Description>
Method for setting 'ShowPrintDialog' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowPrintDialog",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowProgressGet">
<Description>
Method for getting 'ShowProgress' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowProgress")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowProgressSet">
<Description>
Method for setting 'ShowProgress' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowProgress",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowReport">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("ShowReport",$lb())
 q
]]></Implementation>
</Method>

<Method name="StreamReportFormGet">
<Description>
Method for getting 'StreamReportForm' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StreamReportForm")
 q tmp
]]></Implementation>
</Method>

<Method name="StreamReportFormSet">
<Description>
Method for setting 'StreamReportForm' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s i%ReportForm=Value
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ##this.SetProperty("StreamReportForm",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="TerminatedGet">
<Description>
Method for getting 'Terminated' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Terminated")
 q tmp
]]></Implementation>
</Method>

<Method name="TerminatedSet">
<Description>
Method for setting 'Terminated' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Terminated",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleGet">
<Description>
Method for getting 'Title' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Title")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSet">
<Description>
Method for setting 'Title' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Title",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnBeforePrint</Value>
</Value>
<Value name="9">
<Value>OnBeginBand</Value>
</Value>
<Value name="10">
<Value>OnBeginColumn</Value>
</Value>
<Value name="11">
<Value>OnBeginDoc</Value>
</Value>
<Value name="12">
<Value>OnBeginPage</Value>
</Value>
<Value name="13">
<Value>OnEndBand</Value>
</Value>
<Value name="14">
<Value>OnEndDoc</Value>
</Value>
<Value name="15">
<Value>OnEndPage</Value>
</Value>
<Value name="16">
<Value>OnGetValue</Value>
</Value>
<Value name="17">
<Value>OnObjectClick</Value>
</Value>
<Value name="18">
<Value>OnPrintColumn</Value>
</Value>
<Value name="19">
<Value>OnProgress</Value>
</Value>
<Value name="20">
<Value>OnUserFunction</Value>
</Value>
<Value name="21">
<Value>ReportForm</Value>
</Value>
<Value name="22">
<Value>Data</Value>
</Value>
<Value name="23">
<Value>Filename</Value>
</Value>
<Value name="24">
<Value>StreamReportForm</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMFastLineSeries">
<Description>
Represents chart data as a line connecting chart points. Differs from %TMLineSeries by higher performance and reduced properties set.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMChartSeries</Super>
<TimeCreated>64314,73326</TimeCreated>

<Property name="LinePen">
<Description>
Contains oref of %TMChartPen object determining attributes of drawn line.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.LinePen.%Close()")
 $$$GENERATE(" s ##this.LinePen=##class(%TMChartPen).%New($lb(##this.Address,0,""LinePen""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFastLineSeries"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" s result=##class(=%TMChartSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..LinePen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..LinePen,""LinePen"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>LinePen</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMFieldDef">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73326</TimeCreated>

<Property name="FieldName">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FieldType">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ftUnknown,ftString,ftSmallint,ftInteger,ftWord,ftBoolean,ftFloat,ftCurrency,ftBCD,ftDate,ftTime,ftDateTime,ftBytes,ftVarBytes,ftAutoInc,ftBlob,ftMemo,ftGraphic,ftFmtMemo,ftParadoxOle,ftDBaseOle,ftTypedBinary,ftCursor,ftFixedChar,ftWideString,ftLargeint,ftADT,ftArray,ftReference,ftDataSet"/>
</Property>

<Property name="Size">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" s %SMWOrefs(+##this)=##this")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFieldDef"
]]></Implementation>
</Method>

<Method name="FieldNameGet">
<Description>
Method for getting 'FieldName' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FieldName")
 q tmp
]]></Implementation>
</Method>

<Method name="FieldNameSet">
<Description>
Method for setting 'FieldName' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FieldName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FieldTypeGet">
<Description>
Method for getting 'FieldType' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FieldType")
 q tmp
]]></Implementation>
</Method>

<Method name="FieldTypeSet">
<Description>
Method for setting 'FieldType' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FieldType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGet">
<Description>
Method for getting 'Size' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Size")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeSet">
<Description>
Method for setting 'Size' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMFieldDefs">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73326</TimeCreated>

<Method name="Add">
<Description>
Creates a new %TMFieldDef instance and adds it to the array.
Call Add to create an item in the collection. The new item is placed at
the end of the Items array.
Add returns the OREF to new collection item.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMFieldDef</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("Add",$lb()))
 s %ZoMRi(2153)=wait
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFieldDefs"
]]></Implementation>
</Method>

<Method name="GetItem">
<Description>
Provides indexed access to the items in the collection.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMFieldDef</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItem",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Creates a new %TMFieldDef instance and adds it to the array.
Call Insert to add a new item at a specified position in the collection.
Existing items (starting from the specified position) are moved up in
the array.
Insert returns the OREF to new collection item.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMFieldDef</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("Insert",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMFileStream">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73327</TimeCreated>

<Property name="Name">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Position">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Size">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFileStream"
]]></Implementation>
</Method>

<Method name="Close">
<Description>
Closes current file stream without destroying object and Cache' oref.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Close",$lb())
 q
]]></Implementation>
</Method>

<Method name="CopyFile">
<Description>
The CopyFile function copies an existing file (Name) to a new file (NewName).
If the function succeeds, the return value is "True", else return value is "False"
</Description>
<FormalSpec>Name:%String,NewName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyFile",$lb(Name,NewName))
 q tmp
]]></Implementation>
</Method>

<Method name="CreateDir">
<Description>
CreateDir creates a new directory.

Description

The CreateDir function creates a new directory. The return value is "True" if a new directory was successfully created, or "False" if an error occurred.
</Description>
<FormalSpec>Dir:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CreateDir",$lb(Dir))
 q tmp
]]></Implementation>
</Method>

<Method name="DeleteDir">
<Description>
DeleteDir deletes an existing empty directory.

Description

Call DeleteDir to remove the directory specified by the Dir paramter.  The return value is "True" if a new directory was successfully deleted, "False" if an error occurred.  The directory must be empty before it can be successfully deleted.
</Description>
<FormalSpec>Dir:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DeleteDir",$lb(Dir))
 q tmp
]]></Implementation>
</Method>

<Method name="DeleteFile">
<Description>
DeleteFile deletes a file from disk, and returns "False" if the delete fails.
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DeleteFile",$lb(FileName))
 q tmp
]]></Implementation>
</Method>

<Method name="FileExists">
<Description>
FileExists tests if FileName exists.

Description

The FileExists function returns "True" if the file specified by FileName exists. If the file does not exist, FileExists returns "False".
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FileExists",$lb(FileName))
 q tmp
]]></Implementation>
</Method>

<Method name="FileGetAttr">
<Description>
FileGetAttr returns the file attributes of FileName.

Description

The attributes can be examined by AND-ing the attributes with the constants defined in TSearchRec. A return value of -1 indicates that an error occurred.

Constant	                 Description

$$$faReadOnly	Read-only files
$$$faHidden	Hidden files
$$$faSysFile	System files
$$$faVolumeID	Volume ID files
$$$faDirectory	Directory files
$$$faArchive	Archive files
$$$faAnyFile	Any file
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FileGetAttr",$lb(FileName))
 q tmp
]]></Implementation>
</Method>

<Method name="FileSetAttr">
<Description>
FileSetAttr sets the file attributes of a specified file.

Description

The FileSetAttr function sets the file attributes of the file given by FileName to the value given by Attr. The return value is zero if the function was successful.

Constant	                 Description

$$$faReadOnly	Read-only files
$$$faHidden	Hidden files
$$$faSysFile	System files
$$$faVolumeID	Volume ID files
$$$faDirectory	Directory files
$$$faArchive	Archive files
$$$faAnyFile	Any file
</Description>
<FormalSpec>FileName:%String,Attr:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FileSetAttr",$lb(FileName,Attr))
 q tmp
]]></Implementation>
</Method>

<Method name="FindClose">
<Description>
FindClose releases memory allocated by FindFirst.

Description

FindClose terminates a FindFirst/FindNext sequence. FindClose does nothing in the 16-bit version of Windows, but is required in the 32-bit version, so for maximum portability every FindFirst/FindNext sequence should end with a call to FindClose.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("FindClose",$lb())
 q
]]></Implementation>
</Method>

<Method name="FindFirst">
<Description>
FindFirst searches for the first instance of a file name with a given set of attributes in a specified directory.

Description

FindFirst searches the directory specified by Path for the first file that matches the file name implied by Path and the attributes specified by the Attr parameter. FindFirst returns list build
$lb(Time:%Integer, ;Horolog
Size:%Integer,  ;in bytes
Attr:%Integer,   ;see file attributes
Name:%String, ;filename
ExcludeAttr:%Integer)  ;ex Arrtibutes
if a file was successfully located, otherwise, it returns a empty string ("").

The Path constant parameter is the directory and file name mask, including wildcard characters. For example, 'c:\test\*.*' specifies all files in the C:\TEST directory).

Note
The FindFirst function allocates resources (memory) which must be released by calling FindClose.
</Description>
<FormalSpec>Path:%String,Attr:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FindFirst",$lb(Path,Attr))
 q tmp
]]></Implementation>
</Method>

<Method name="FindNext">
<Description>
FindNext returns the next entry matching the name and attributes specified in a previous call to FindFirst.

Description

FindNext returns the next entry that matches the name and attributes specified in a previous call to FindFirst. The search record must be one that was passed to FindFirst. FindNext returns list build
$lb(Time:%Integer, ;Horolog
Size:%Integer,  ;in bytes
Attr:%Integer,   ;see file attributes
Name:%String, ;filename
ExcludeAttr:%Integer)  ;ex Arrtibutes
if a file was successfully located, otherwise, it returns a empty string ("").
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FindNext",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="NameGet">
<Description>
Method for getting 'Name' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Name")
 q tmp
]]></Implementation>
</Method>

<Method name="NameSet">
<Description>
Method for setting 'Name' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Name",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Open">
<Description>
for Mode use constants:

$$$fmCreate         = $FFFF
$$$fmOpenRead       = $0000
$$$fmOpenWrite      = $0001
$$$fmOpenReadWrite  = $0002
$$$fmShareCompat    = $0000
$$$fmShareExclusive = $0010
$$$fmShareDenyWrite = $0020
$$$fmShareDenyRead  = $0030
$$$fmShareDenyNone  = $0040
</Description>
<FormalSpec>FileName:%String,Mode:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Open",$lb(FileName,Mode))
 q tmp
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Read">
<Description>
Reads up to Len bytes, returns as result and offset Position
</Description>
<FormalSpec>Len:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Read",$lb(Len))
 q tmp
]]></Implementation>
</Method>

<Method name="RenameFile">
<Description>
RenameFile changes a file name identified by OldName.

Description

The RenameFile function attempts to change the name of the file specified by OldFile to NewFile. If the operation succeeds, RenameFile returns "True". If it cannot rename the file (for example, if a file called NewName already exists), it returns "False".
</Description>
<FormalSpec>OldName:%String,NewName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.RunMethod("RenameFile",$lb(OldName,NewName))
]]></Implementation>
</Method>

<Method name="SizeGet">
<Description>
Method for getting 'Size' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Size")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeSet">
<Description>
Method for setting 'Size' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Write">
<Description>
Writes up to $L(Str) into file, returns wrote length and offsets current position.
</Description>
<FormalSpec>Str:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Write",$lb(Str))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMFont">
<Description>
This class represents a windows font.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73327</TimeCreated>

<Property name="Charset">
<Description>
Determines the character set of the font, if specified font face contains several charsets. The list of predefined constants for the standard charsets can be found in the %Const.INC.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Color">
<Description>
Determines the text color. The list of predefined colors can be found in the %Const.INC.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Height">
<Description><![CDATA[
Specifies the font height (in pixels). The negative value means that the top internal leading is not included.<br>
To calculate font height from it's size in points, use the following formula:<br>
Height = -Size*PixelsPerInch/72
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Name">
<Description>
Determines the font face.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Pitch">
<Description><![CDATA[
Defines, will the characters have fixed or variable (proportional) width. Possible values:<br>
"fpDefault" - default value, depending on the given font face.
"fpFixed" - make all characters to have the same width.
"fpVariable" - lets the characters to have different widths.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fpDefault,fpVariable,fpFixed"/>
</Property>

<Property name="Size">
<Description><![CDATA[
Specifies the font size (in points). Negative value means that the top internal leading is included.<br>
To calculate font size from it's height in pixels, use the following formula:<br>
Size = -Height*72/PixelsPerInch
]]></Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description>
Specifies the font style. Should be a Cache' list where only required from the following values are combined: "fsBold", "fsItalic", "fsUnderline", "fsStrikeout". Set this property to $LB() to obtain the regular style.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(fsBold,fsItalic,fsUnderline,fsStrikeOut)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text accociated with this font.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="CharsetGet">
<Description>
Method for getting 'CharSet' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Charset")
 q tmp
]]></Implementation>
</Method>

<Method name="CharsetSet">
<Description>
Method for setting 'CharSet' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Charset",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFont"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HeightGet">
<Description>
Method for getting 'Height' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Height")
 q tmp
]]></Implementation>
</Method>

<Method name="HeightSet">
<Description>
Method for setting 'Height' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Height",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NameGet">
<Description>
Method for getting 'Name' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Name")
 q tmp
]]></Implementation>
</Method>

<Method name="NameSet">
<Description>
Method for setting 'Name' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Name",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PitchGet">
<Description>
Method for getting 'Pitch' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Pitch")
 q tmp
]]></Implementation>
</Method>

<Method name="PitchSet">
<Description>
Method for setting 'Pitch' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Pitch",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGet">
<Description>
Method for getting 'Size' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Size")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeSet">
<Description>
Method for setting 'Size' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMFontDialog">
<Description><![CDATA[
This class enables font selecting modal dialog. The <i>Execute</i> method activates dialog, after the dialog completed, the <i>Font</i> property contains selected font.
]]></Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73327</TimeCreated>

<Property name="Ctl3D">
<Description>
Determines, should the control look three-dimensional (if set to "True") or flat (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Device">
<Description><![CDATA[
Specifies output device to generate list of available fonts. Possible values:<br>
"fdScreen" - the screen;<br>
"fdPrinter" -  the printer;<br>
"fdBoth"- both.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fdScreen,fdPrinter,fdBoth"/>
</Property>

<Property name="Font">
<Description>
Contains oref of %TMFont object selected in the dialog box or determines default font when dialog box opens.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this dialog.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxFontSize">
<Description>
Specifies the maximal font size (in points) allowed in the dialog, if the 'Option' property contains "fdLimitSize".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinFontSize">
<Description>
Specifies the minimal font size (in points) allowed in the dialog, if the 'Option' property contains "fdLimitSize".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnApply">
<Description>
Handler of event occuring when Apply button is clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Description>
Handler of event occuring when the dialog is about to be closed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Description>
Handler of event occuring when the dialog box is shown as a result of the 'Execute' method.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Description><![CDATA[
Determines the diaolg options. Possible value: Cache' list ($lb) where only necessary from the following strings are combined:<br>
"fdAnsiOnly" - show fonts with the Windows character set only;<br>
"fdApplyButton" - 'Apply' button is visible;<br>
"fdEffects" - the 'Strikeout' and 'Underline' check boxes and the 'Color' listbox are visible;<br>
"fdFixedPitchOnly" - show fixed-pitch fonts only;<br>
"fdForceFontExist" - forbid the user to enter fonts absent in the 'Font' combobox;<br>
"fdLimitSize" - limit the range of font sizes by values of the 'MinFontSize' and 'MaxFontSize' properties;<br>
"fdNoFaceSel" - no preselected font;<br>
"fdNoOEMFonts" - show non-OEM fonts only;<br>
"fdScalableOnly" - show scalable (not bitmap) fonts only;<br>
"fdNoSimulations" - show directly supported fonts and styles only;<br>
"fdNoSizeSel" - no preselected font size;<br>
"fdNoStyleSel" - no preselected font style;<br>
"fdNoVectorFonts" - show non-vector fonts only;<br>
"fdShowHelp" - 'Help' button is visible;<br>
"fdTrueTypeOnly" - show TrueType fonts only;
"fdWysiwyg" - show the fonts, applicable for both the screen and the printer;<br>
Default value: $lb("fdEffects").
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(fdAnsiOnly,fdTrueTypeOnly,fdEffects,fdFixedPitchOnly,fdForceFontExist,fdNoFaceSel,fdNoOEMFonts,fdNoSimulations,fdNoSizeSel,fdNoStyleSel,fdNoVectorFonts,fdShowHelp,fdWysiwyg,fdLimitSize,fdScalableOnly,fdApplyButton)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Font.%Close()")
 $$$GENERATE(" s ..Font=##class(%TMFont).%New($lb(..Address,0,""Font""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMFontDialog"
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DeviceGet">
<Description>
Method for getting 'Device' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Device")
 q tmp
]]></Implementation>
</Method>

<Method name="DeviceSet">
<Description>
Method for setting 'Device' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Device",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Execute">
<Description>
Activates dialog. Returns "True" if font is selected, or "False" if dialog was canceled. If successful, selected font is avaliable via the 'Font' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Execute",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxFontSizeGet">
<Description>
Method for getting 'MaxFontSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxFontSize")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxFontSizeSet">
<Description>
Method for setting 'MaxFontSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxFontSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinFontSizeGet">
<Description>
Method for getting 'MinFontSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinFontSize")
 q tmp
]]></Implementation>
</Method>

<Method name="MinFontSizeSet">
<Description>
Method for setting 'MinFontSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinFontSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnApplyGet">
<Description>
Method for getting 'OnApply' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnApply
]]></Implementation>
</Method>

<Method name="OnApplySet">
<Description>
Method for setting 'OnApply' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnApply=Value
 d ##this.SetEvent("OnApply",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Font</Value>
</Value>
<Value name="9">
<Value>OnApply</Value>
</Value>
<Value name="10">
<Value>OnClose</Value>
</Value>
<Value name="11">
<Value>OnShow</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMForm">
<Description>
Represents the server-side image of a screen form.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73327</TimeCreated>

<Property name="Active">
<Description>
Indicates, does the form have the focus. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ActiveControl">
<Description>
Contains oref of the active control in the form.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AlphaBlend">
<Description>
AlphaBlend specifies that the form represents a layered window that allows a translucent color. Use AlphaBlendValue property to specify the degree of translucency.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AlphaBlendValue">
<Description>
Represents the degree of translucency on a translucent form.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutoScroll">
<Description>
Determines, should the scrollbars appear automatically when it is necessary (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderIcons">
<Description><![CDATA[
Determines the appearance of the title bar. Possible value: Cache' list ($lb) containing only the necessary from the following strings:<br>
"biSystemMenu" - include a control (system) menu.<br>
"biMinimize" - include Minimize button.<br>
"biMaximize" - include Maximize button.<br>
"biHelp" - include question mark (for dialog boxes only).<br>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(biSystemMenu,biMinimize,biMaximize,biHelp)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines the appearance of the form border. Possible values:<br>
"bsSingle" - single-line border (not resizeable).<br>
"bsNone" - no border (not resizeable).<br>
"bsDialog" - usual dialog box border (not resizeable).<br>
"bsSizeable" - usual resizeable border.<br>
"bsToolWindow" - 	single-line border, smaller caption (not resizeable).<br>
"bsSizeToolWin" - usual resizeable border, smaller caption.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas used in this form.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="DropTarget">
<Description>
Determines, is the form a target for drag-and-drop operations (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FormStyle">
<Description><![CDATA[
Determines the form style. Possible values:<br>
"fsNormal" - default value.<br>
"fsMDIChild" - MDI child form.<br>
"fsMDIForm" - MDI parent form.<br>
"fsStayOnTop" - remain on on top of the desktop and of other forms.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fsNormal,fsMDIChild,fsMDIForm,fsStayOnTop"/>
</Property>

<Property name="HelpFile">
<Description>
Determines the name of help file.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HorzScrollBar">
<Type>%Library.TMControlScrollBar</Type>
</Property>

<Property name="Icon">
<Description>
Determines the icon to be displayed when the form is minimized.
</Description>
<Type>%Library.TMIcon</Type>
</Property>

<Property name="KeyPreview">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MDIChildCount">
<Description>
Contains the number of running child forms (for MDI parent forms only).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Menu">
<Description>
Contains oref of the form main menu (see %TMMainMenu description for details).
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ModalResult">
<Description>
The value which should be returned by the modal form after its close. By default, contains $$$mrNone. Changing this property to the non-zero value closes the form. The list of the possible values can be found in %Const.INC.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OldCreateOrder">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnActivate">
<Description>
Handler of event occuring when the form receives focus.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Description><![CDATA[
Handler of event occuring when the form is about to be closed. Programmer may set Action:<br>
"caFree" - close form and destroy corresponding objects; Currently does not support. Please, use %TMTimer object to close form. We research how to solve this problem.<br>
"caHide" - hide form preserving corresponding objects, form can be restored with 'Show' method;<br>
"caNone" - do not close form.
]]></Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCloseQuery">
<Description>
Handler of event occuring when the form is about to be closed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCreate">
<Description>
Handler of the first event occuring when the form is created. For the visible forms, this event will be followed by the OnShow, OnActivate and OnPaint events.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDeactivate">
<Description>
Handler of event occuring when the form loses focus.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnHelp">
<Description>
Handler of event occuring when the help is requested.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnHide">
<Description>
Handler of event occuring when the form becomes hidden as a result of setting the Visible property to "False".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPaint">
<Description>
Handler of event occuring when the form should be redrawn, i.e., before any control in the form is painted.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShortCut">
<Description>
Handler of event occuring when the accelerator key is pressed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Description>
Handler of event occuring when the form is shown as a result of setting the Visible property to "True".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PixelsPerInch">
<Description>
Determines, how is the form scaled to the current screen resolution. Has effect only if the Scaled property is set to "True".
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Position">
<Description><![CDATA[
Determines the form position and size. Possible values:<br>
"poDesigned" - the same position and size as defined at design time.<br>
"poDefault" - position and size determined by Windows.<br>
"poDefaultPosOnly" - the size as defined at design time, the position is determined by Windows.<br>
"poDefaultSizeOnly" - the position as defined at design time, the size is determined by Windows.<br>
"poScreenCenter" - the position is in the centre of the screen, the size as defined at design time, with ajustments for multi-monitor systems.<br>
"poDesktopCenter" - the position is in the centre of the screen, the size as defined at design time.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",poDesigned,poDefault,poDefaultPosOnly,poDefaultSizeOnly,poScreenCenter,poDesktopCenter"/>
</Property>

<Property name="PrintScale">
<Description><![CDATA[
Determines the scaling of the printed form. Possible values:<br>
"poNone" - no scaling.<br>
"poProportional" - the printed form should have approximately the same size, as onscreen form.<br>
"poPrintToFit" - the printed form has the same proportions as onscreen form, but is resized to fit the printed page.<br>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",poNone,poProportional,poPrintToFit"/>
</Property>

<Property name="Scaled">
<Description>
Determines, should the form be resized if the PixelPerInch property differs from the actual screen resolution (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScreenSnap">
<Type>%Library.Boolean</Type>
</Property>

<Property name="TileMode">
<Description><![CDATA[
Determines the manner of MDI forms arrangement for the Tile method. Possible values:<br>
"tbHorizontal" - stretch forms to fit the width of the parent form.<br>
"tbVertical" - stretch forms to fit the height of the parent form.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tbHorizontal,tbVertical"/>
</Property>

<Property name="TransparentColor">
<Description>
Specifies whether a color on the form appears transparent.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TransparentColorValue">
<Description>
Specifies the color on the form that appears transparent when TransparentColor is true.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VertScrollBar">
<Type>%Library.TMControlScrollBar</Type>
</Property>

<Property name="WindowMenu">
<Description>
Contains oref of the Window menu (for MDI parent forms). See %TMMenuItem description for details.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="WindowState">
<Description><![CDATA[
Determines the current form state. Possible values:<br>
"wsNormal" - normal state (neither minimized, nor maximized).<br>
"wsMinimized" - minimized state.<br>
"wsMaximized" - maximized state.<br>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",wsNormal,wsMinimized,wsMaximized"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" d ##this.Destroy()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Icon.%Close()")
 $$$GENERATE(" s ..Icon=##class(%TMIcon).%New($lb(..Address,0,""Icon""))")
 $$$GENERATE(" d ..VertScrollBar.%Close()")
 $$$GENERATE(" s ..VertScrollBar=##class(%TMControlScrollBar).%New($lb(..Address,0,""VertScrollBar""))")
 $$$GENERATE(" d ..HorzScrollBar.%Close()")
 $$$GENERATE(" s ..HorzScrollBar=##class(%TMControlScrollBar).%New($lb(..Address,0,""HorzScrollBar""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveControlGet">
<Description>
Method for getting 'ActiveControl' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("ActiveControl"))
]]></Implementation>
</Method>

<Method name="ActiveControlSet">
<Description>
Method for setting 'ActiveControl' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i (+Value)'=0 s tmp=0
 e  s tmp=tmp.Address
 d ..SetProperty("ActiveControl",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActiveGet">
<Description>
Method for getting 'Active' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Active")
 q tmp
]]></Implementation>
</Method>

<Method name="ActiveSet">
<Description>
Method for setting 'Active' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Active",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlphaBlendGet">
<Description>
Method for getting 'AlphaBlend' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AlphaBlend")
 q tmp
]]></Implementation>
</Method>

<Method name="AlphaBlendSet">
<Description>
Method for setting 'AlphaBlend' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AlphaBlend",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlphaBlendValueGet">
<Description>
Method for getting 'AlphaBlendValue' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AlphaBlendValue")
 q tmp
]]></Implementation>
</Method>

<Method name="AlphaBlendValueSet">
<Description>
Method for setting 'AlphaBlendValue' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AlphaBlendValue",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ArrangeIcons">
<Description>
Arranges the icons of minimized child forms uniformly, without overlapping (for MDI parent forms only).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ArrangeIcons",$lb())
 q
]]></Implementation>
</Method>

<Method name="AutoScrollGet">
<Description>
Method for getting 'AutoScroll' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoScroll")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoScrollSet">
<Description>
Method for setting 'AutoScroll' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoScroll",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderIconsGet">
<Description>
Method for getting 'BorderIcons' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderIcons")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderIconsSet">
<Description>
Method for setting 'BorderIcons' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderIcons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Cascade">
<Description>
Arranges child forms uniformly, with overlapping. (for MDI parent forms only).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Cascade",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMForm"
]]></Implementation>
</Method>

<Method name="Close">
<Description>
Raises OnClose event and closes the form, if the CloseQuery method returns "True". The Close method call for the main form terminates application.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Close",$lb())
 q
]]></Implementation>
</Method>

<Method name="CloseQuery">
<Description>
Returns "True" if the form (and its MDI children, if present) can be closed, otherwise, returns "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CloseQuery",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetGet">
<Description>
Method for getting 'DropTarget' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DropTarget")
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetSet">
<Description>
Method for setting 'DropTarget' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropTarget",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FormStyleGet">
<Description>
Method for getting 'FormStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FormStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="FormStyleSet">
<Description>
Method for setting 'FormStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FormStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..HorzScrollBar.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..HorzScrollBar,""HorzScrollBar"","""")_result")
 $$$GENERATE(" s result=result_..Icon.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Icon,""Icon"","""")_result")
 $$$GENERATE(" s result=result_..VertScrollBar.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..VertScrollBar,""VertScrollBar"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetMDIChildren">
<Description>
Returns oref of the child form specified by the Index parameter (0 - the last created form, MDIChildCount-1 - the first created form). For MDI parent forms only.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetMDIChildren",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="HelpFileGet">
<Description>
Method for getting 'HelpFile' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpFile")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpFileSet">
<Description>
Method for setting 'HelpFile' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpFile",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Hide">
<Description>
Hides the form by setting the value of the Visible property to "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Hide",$lb())
 q
]]></Implementation>
</Method>

<Method name="KeyPreviewGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("KeyPreview")
]]></Implementation>
</Method>

<Method name="KeyPreviewSet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("KeyPreview",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MDIChildCountGet">
<Description>
Method for getting 'MDIChildCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MDIChildCount")
 q tmp
]]></Implementation>
</Method>

<Method name="MDIChildCountSet">
<Description>
Method for setting 'MDIChildCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MDIChildCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MenuGet">
<Description>
Method for getting 'Menu' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("Menu"))
]]></Implementation>
</Method>

<Method name="MenuSet">
<Description>
Method for setting 'Menu' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value'=0 s tmp=Value.Address
 e  s tmp=0
 d ..SetProperty("Menu",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModalResultGet">
<Description>
Method for getting 'ModalResult' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ModalResult")
 q tmp
]]></Implementation>
</Method>

<Method name="ModalResultSet">
<Description>
Method for setting 'ModalResult' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ModalResult",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Next">
<Description>
Makes the next child form active (for MDI parent forms only).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Next",$lb())
 q
]]></Implementation>
</Method>

<Method name="OldCreateOrderGet">
<Description>
Method for getting 'OldCreateOrder' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OldCreateOrder")
 q tmp
]]></Implementation>
</Method>

<Method name="OldCreateOrderSet">
<Description>
Method for setting 'OldCreateOrder' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OldCreateOrder",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnActivateGet">
<Description>
Method for getting 'OnActivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnActivate
]]></Implementation>
</Method>

<Method name="OnActivateSet">
<Description>
Method for setting 'OnActivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnActivate=Value
 d ##this.SetEvent("OnActivate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseQueryGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCloseQuery
]]></Implementation>
</Method>

<Method name="OnCloseQuerySet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnCloseQuery",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCreateGet">
<Description>
Method for getting 'OnCreate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCreate
]]></Implementation>
</Method>

<Method name="OnCreateSet">
<Description>
Method for setting 'OnCreate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCreate=Value
 d ##this.SetEvent("OnCreate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDeactivateGet">
<Description>
Method for getting 'OnDeactivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDeactivate
]]></Implementation>
</Method>

<Method name="OnDeactivateSet">
<Description>
Method for setting 'OnDeactivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDeactivate=Value
 d ##this.SetEvent("OnDeactivate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHelpGet">
<Description>
Method for getting 'OnHelp' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHelp
]]></Implementation>
</Method>

<Method name="OnHelpSet">
<Description>
Method for setting 'OnHelp' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHelp=Value
 d ##this.SetEvent("OnHelp",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHideGet">
<Description>
Method for getting 'OnHide' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHide
]]></Implementation>
</Method>

<Method name="OnHideSet">
<Description>
Method for setting 'OnHide' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHide=Value
 d ##this.SetEvent("OnHide",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPaintGet">
<Description>
Method for getting 'OnPaint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPaint
]]></Implementation>
</Method>

<Method name="OnPaintSet">
<Description>
Method for setting 'OnPaint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPaint=Value
 d ##this.SetEvent("OnPaint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShortCutGet">
<Description>
Method for getting 'OnShortCut' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShortCut
]]></Implementation>
</Method>

<Method name="OnShortCutSet">
<Description>
Method for setting 'OnShortCut' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShortCut=Value
 d ##this.SetEvent("OnShortCut",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PixelsPerInchGet">
<Description>
Method for getting 'PixelsPerInch' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PixelsPerInch")
 q tmp
]]></Implementation>
</Method>

<Method name="PixelsPerInchSet">
<Description>
Method for setting 'PixelsPerInch' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PixelsPerInch",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Previous">
<Description>
Makes the previous child form active (for MDI parent forms only).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Previous",$lb())
 q
]]></Implementation>
</Method>

<Method name="PrintScaleGet">
<Description>
Method for getting 'PrintScale' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrintScale")
 q tmp
]]></Implementation>
</Method>

<Method name="PrintScaleSet">
<Description>
Method for setting 'PrintScale' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrintScale",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScaledGet">
<Description>
Method for getting 'Scaled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Scaled")
 q tmp
]]></Implementation>
</Method>

<Method name="ScaledSet">
<Description>
Method for setting 'Scaled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Scaled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScreenSnapGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScreenSnap")
 q tmp
]]></Implementation>
</Method>

<Method name="ScreenSnapSet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScreenSnap",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetContainer">
<FormalSpec>Container:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.RunMethod("SetContainer",$lb(Container))
 q
]]></Implementation>
</Method>

<Method name="Show">
<Description>
Shows the form by setting the value of the Visible property to "True" and brings the form on top.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Show",$lb())
 q
]]></Implementation>
</Method>

<Method name="ShowModal">
<Description>
Show the form as a modal form. Returns the value of the ModalResult property of the child form after its close.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ShowModal",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Tile">
<Description>
Arranges child forms filling up the parent form's client area and makes them having the same size. Only for MDI parent forms.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Tile",$lb())
 q
]]></Implementation>
</Method>

<Method name="TileModeGet">
<Description>
Method for getting 'TileMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TileMode")
 q tmp
]]></Implementation>
</Method>

<Method name="TileModeSet">
<Description>
Method for setting 'TileMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TileMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentColorGet">
<Description>
Method for getting 'TransparentColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TransparentColor")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentColorSet">
<Description>
Method for setting 'TransparentColor' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TransparentColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentColorValueGet">
<Description>
Method for getting 'TransparentColorValue' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TransparentColorValue")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentColorValueSet">
<Description>
Method for setting 'TransparentColorValue' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TransparentColorValue",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WindowMenuGet">
<Description>
Method for getting 'WindowMenu' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("WindowMenu"))
]]></Implementation>
</Method>

<Method name="WindowMenuSet">
<Description>
Method for setting 'WindowMenu' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value'=0 s tmp=Value.Address
 e  s tmp=0
 d ..SetProperty("WindowMenu",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WindowStateGet">
<Description>
Method for getting 'WindowState' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WindowState")
 q tmp
]]></Implementation>
</Method>

<Method name="WindowStateSet">
<Description>
Method for setting 'WindowState' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WindowState",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>ActiveControl</Value>
</Value>
<Value name="38">
<Value>Canvas</Value>
</Value>
<Value name="39">
<Value>HorzScrollBar</Value>
</Value>
<Value name="40">
<Value>Icon</Value>
</Value>
<Value name="41">
<Value>Menu</Value>
</Value>
<Value name="42">
<Value>OnActivate</Value>
</Value>
<Value name="43">
<Value>OnClose</Value>
</Value>
<Value name="44">
<Value>OnCloseQuery</Value>
</Value>
<Value name="45">
<Value>OnCreate</Value>
</Value>
<Value name="46">
<Value>OnDeactivate</Value>
</Value>
<Value name="47">
<Value>OnHelp</Value>
</Value>
<Value name="48">
<Value>OnHide</Value>
</Value>
<Value name="49">
<Value>OnPaint</Value>
</Value>
<Value name="50">
<Value>OnShortCut</Value>
</Value>
<Value name="51">
<Value>OnShow</Value>
</Value>
<Value name="52">
<Value>VertScrollBar</Value>
</Value>
<Value name="53">
<Value>WindowMenu</Value>
</Value>
<Value name="54">
<Value>ScreenSnap</Value>
</Value>
</Data>
<Index name="TMPersistentState"/>
</Storage>
</Class>


<Class name="%Library.TMFormClass">
<Description>
The base class for all SMWrap screen forms.
</Description>
<ClassType>serial</ClassType>
<IncludeCode>%Const</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%SerialObject</Super>
<TimeCreated>64314,73328</TimeCreated>

<Property name="Address">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Form">
<Type>%Library.TMForm</Type>
</Property>

<Property name="Resources">
<Type>%Library.GlobalBinaryStream</Type>
<Collection>array</Collection>
</Property>

<Property name="SMWrapDesignVersion">
<Type>%Library.String</Type>
<InitialExpression>3</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="StaticControl">
<Type>%Library.String</Type>
<MultiDimensional>1</MultiDimensional>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
Destructor for SMWrap forms.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..Destroy()
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n result
 i initvalue="" q $$$OK
 d ##this.Initialization(initvalue)
 s result=##this.OnCreate(initvalue)
 i result'=$$$OK  d
 . d ##this.Form.%Close()
 e  d ##this.Form.SetContainer(+##this)
 q result
]]></Implementation>
</Method>

<Method name="DesignDefinition">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
#if 0
 ;object DesignForm: TDesignForm
 ;  Left = 0
 ;  Top = 0
 ;  Width = 327
 ;  Height = 302
 ;  Caption = 'DesignForm'
 ;  Color = clBtnFace
 ;  Font.Charset = DEFAULT_CHARSET
 ;  Font.Color = clWindowText
 ;  Font.Height = -11
 ;  Font.Name = 'MS Sans Serif'
 ;  Font.Style = []
 ;  OldCreateOrder = False
 ;  Visible = True
 ;  PixelsPerInch = 96
 ;  TextHeight = 13
 ;end
#endif
]]></Implementation>
</Method>

<Method name="Destroy">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.Form.%Close()
 q
]]></Implementation>
</Method>

<Method name="GetObjOref">
<FormalSpec>IntOref:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(IntOref)
]]></Implementation>
</Method>

<Method name="Initialization">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<PublicList>MApplication</PublicList>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s MApplication.ClientState="Loading"
 d ..LoadResources()
 s ##this.Form=##class(%Library.TMForm).%New(initvalue)
 s MApplication.ClientState="NoWait"
 ;s ##this.Form.Visible="False"
 d ##this.Form.SetMultiProperty($lb("Left","Top","Width","Height","Caption","Color","OldCreateOrder","PixelsPerInch"),$lb(0,0,327,302,"DesignForm",$$$clBtnFace,"False",96),$lb(0,0,0,0,0,0,0,0))
 d ##this.Form.Font.SetMultiProperty($lb("Charset","Color","Height","Name","Style"),$lb($$$DEFAULTCHARSET,$$$clWindowText,-11,"MS Sans Serif",$lb()))
 s MApplication.ClientState="Wait"
 q
]]></Implementation>
</Method>

<Method name="LoadResources">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q
]]></Implementation>
</Method>

<Method name="OnCreate">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>TMFormClassState</State>
<StreamLocation>^%Library.TMFormClassS</StreamLocation>
<Data name="TMFormClassState">
<Subscript>"%Library.TMFormClass"</Subscript>
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>Form</Value>
</Value>
<Value name="3">
<Value>Resources</Value>
</Value>
<Value name="4">
<Value>SMWrapDesignVersion</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMGanttSeries">
<Description>
Represents chart data as a set of connected horizontal bars (useful for workflow diagrams, etc.).
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPointSeries</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="ConnectingPen">
<Description>
Contains oref of %TMChartPen object describing properties of line drawn between bars.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Dark3D">
<Description>
If set to "True", the bars edges will look like shadowed.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EndValues">
<Description>
Contains oref of %TMChartValueList object with ending horizontal values of bars.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="NextTask">
<Description>
Contains oref of %TMChartValueList object with information allowing to determine index of bar connected to the current bar.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="StartValues">
<Description>
Contains oref of %TMChartValueList object with starting horizontal values of bars.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" d ##class(=%TMPointSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" d ##class(=%TMPointSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.ConnectingPen.%Close()")
 $$$GENERATE(" s ##this.ConnectingPen=##class(%TMChartPen).%New($lb(##this.Address,0,""ConnectingPen""))")
 $$$GENERATE(" d ##this.EndValues.%Close()")
 $$$GENERATE(" s ##this.EndValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""EndValues""))")
 $$$GENERATE(" d ##this.NextTask.%Close()")
 $$$GENERATE(" s ##this.NextTask=##class(%TMChartValueList).%New($lb(##this.Address,0,""NextTask""))")
 $$$GENERATE(" d ##this.StartValues.%Close()")
 $$$GENERATE(" s ##this.StartValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""StartValues""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddGantt">
<Description>
Adds new bar with specified starting and ending horizontal values, vertical value and label to the series. Returns index of added gantt.
</Description>
<FormalSpec>AStart:%Float,AEnd:%Float,AY:%Float,AXLabel:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddGantt",$lb(AStart,AEnd,AY,AXLabel))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMGanttSeries"
]]></Implementation>
</Method>

<Method name="Dark3DGet">
<Description>
Method for getting 'Dark3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("Dark3D")
]]></Implementation>
</Method>

<Method name="Dark3DSet">
<Description>
Method for setting 'Dark3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Dark3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPointSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPointSeries")
 e  $$$GENERATE(" s result=##class(=%TMPointSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..ConnectingPen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..ConnectingPen,""ConnectingPen"","""")_result")
 $$$GENERATE(" s result=result_..EndValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..EndValues,""EndValues"","""")_result")
 $$$GENERATE(" s result=result_..NextTask.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..NextTask,""NextTask"","""")_result")
 $$$GENERATE(" s result=result_..StartValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..StartValues,""StartValues"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>AreaLinesPen</Value>
</Value>
<Value name="24">
<Value>LinePen</Value>
</Value>
<Value name="25">
<Value>OnClickPointer</Value>
</Value>
<Value name="26">
<Value>OnGetPointerStyle</Value>
</Value>
<Value name="27">
<Value>Pointer</Value>
</Value>
<Value name="28">
<Value>ConnectingPen</Value>
</Value>
<Value name="29">
<Value>EndValues</Value>
</Value>
<Value name="30">
<Value>NextTask</Value>
</Value>
<Value name="31">
<Value>StartValues</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMGaugeAttrs">
<Description>
This class allows to customize the appearance of a %TMProgressBar object.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="Color">
<Description>
Specifis the color for filled part of a progressmeter (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Position">
<Description>
Specifies the current position (in percents) for the "gsPercent" style. Possible values are numeric from 0 to 100.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Speed">
<Description>
Specifies the speed of bouncing image for the "gsIndeterminate" style.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the progressmeter style. Possible values:<br>
"gsPercent" - regular progressmeter;<br>
"gsIndeterminate" - used when min/max values are unknown, looks like bouncing ball;<br>
"gsIndeterminate2" - used when min/max values are unknown, looks like bouncing gradient image;<br>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",gsPercent,gsIndeterminate,gsIndeterminate2"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this object.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TextColor">
<Description>
Specifies color (in hexadecimal RGB format) of a text in the filled area (for "gsPercent" style).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMGaugeAttrs"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SpeedGet">
<Description>
Method for getting 'Speed' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Speed")
 q tmp
]]></Implementation>
</Method>

<Method name="SpeedSet">
<Description>
Method for setting 'Speed' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Speed",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextColorGet">
<Description>
Method for getting 'TextColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TextColor")
 q tmp
]]></Implementation>
</Method>

<Method name="TextColorSet">
<Description>
Method for setting 'TextColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TextColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMGraphic">
<Description>
The base class for icons and bitmaps, contains methods for displaying the graphic images.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="Empty">
<Description>
Contains "True" if the graphics object contains a graphic, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Height">
<Description>
Indicates the vertical size (in pixels) of the graphic object.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Modified">
<Description>
Contains "True" if the graphics object was changed or edited, othewise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when a graphic object changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnProgress">
<Description>
Handler of event occuring during some slow processes changing the graphic object.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Palette">
<Description>
Contains the color palette of the graphic object, or 0 if the object needs no palette.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PaletteModified">
<Description>
Contains "True" if the palette was changed, otherwise - "False". Used in the OnChange handler.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this graphic object.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Transparent">
<Description>
Determines, should the graphic object be drawn transparently (if set to "True" or the object is an icon) or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Width">
<Description>
Indicates the maximum horizontal size (in pixels) of the graphic object.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMGraphic"
]]></Implementation>
</Method>

<Method name="EmptyGet">
<Description>
Method for getting 'Empty' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Empty")
 q tmp
]]></Implementation>
</Method>

<Method name="EmptySet">
<Description>
Method for setting 'Empty' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Empty",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HeightGet">
<Description>
Method for getting 'Height' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Height")
 q tmp
]]></Implementation>
</Method>

<Method name="HeightSet">
<Description>
Method for setting 'Height' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Height",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LoadFromBlob">
<Description>
Reads the graphic object from the ^BLOB global. Item name must be specified in BlobName.
</Description>
<FormalSpec>BlobName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromBlob",$lb(BlobName))
 q
]]></Implementation>
</Method>

<Method name="LoadFromFile">
<Description>
Reads the graphic object from the file specified in the FileName parameter.
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromFile",$lb(FileName))
 q
]]></Implementation>
</Method>

<Method name="ModifiedGet">
<Description>
Method for getting 'Modified' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Modified")
 q tmp
]]></Implementation>
</Method>

<Method name="ModifiedSet">
<Description>
Method for setting 'Modified' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Modified",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnProgressGet">
<Description>
Method for getting 'OnProgress' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnProgress
]]></Implementation>
</Method>

<Method name="OnProgressSet">
<Description>
Method for setting 'OnProgress' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnProgress=Value
 d ##this.SetEvent("OnProgress",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PaletteGet">
<Description>
Method for getting 'Palette' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Palette")
 q tmp
]]></Implementation>
</Method>

<Method name="PaletteModifiedGet">
<Description>
Method for getting 'PaletteModified' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PaletteModified")
 q tmp
]]></Implementation>
</Method>

<Method name="PaletteModifiedSet">
<Description>
Method for setting 'PaletteModified' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PaletteModified",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PaletteSet">
<Description>
Method for setting 'Palette' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Palette",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SaveToBlob">
<Description>
Writes the graphic object to the ^BLOB global. Item name must be specified in the BlobName parameter. Existing item will be overwritten.
</Description>
<FormalSpec>BlobName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToBlob",$lb(BlobName))
 q
]]></Implementation>
</Method>

<Method name="SaveToFile">
<Description>
Writes the graphic object to the file specified by the FileName parameter.
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToFile",$lb(FileName))
 q
]]></Implementation>
</Method>

<Method name="TransparentGet">
<Description>
Method for getting 'Transparent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Transparent")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentSet">
<Description>
Method for setting 'Transparent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Transparent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnChange</Value>
</Value>
<Value name="9">
<Value>OnProgress</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMGridColumn">
<Description>
Represents a single column in a %TMGridColumns collection.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="Alignment">
<Description>
Determines alignment of the caption text of this column. Possible values: "taLeftJustify", "taRightJustify" or "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="Caption">
<Description>
Determines the text string to be displayed in the column caption (topmost fixed cell).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ColumnType">
<Description>
Specifies the type of data in the column. Possible values: "ctString", "ctInteger", "ctDouble" or "ctDate".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ctString,ctInteger,ctDouble,ctDate"/>
</Property>

<Property name="State">
<Description>
Specifies the column state. Possible values: "csRead", "csWrite".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",csRead,csWrite"/>
</Property>

<Property name="Visible">
<Description>
Determines, should this column be displayed (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Width">
<Description>
Determines the width (in pixels) of this column.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" s %SMWOrefs(+##this)=##this")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMGridColumn"
]]></Implementation>
</Method>

<Method name="ColumnTypeGet">
<Description>
Method for getting 'ColumnType' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColumnType")
 q tmp
]]></Implementation>
</Method>

<Method name="ColumnTypeSet">
<Description>
Method for setting 'ColumnType' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColumnType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StateGet">
<Description>
Method for getting 'State' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("State")
 q tmp
]]></Implementation>
</Method>

<Method name="StateSet">
<Description>
Method for setting 'State' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("State",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMGridColumns">
<Description>
Represents collection of columns in a %TMButtonGrid object and allows to manipulate with them.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="Count">
<Description>
Indicates number of columns in the collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this collection.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="Add">
<Description>
Adds new (empty) column to the collection, returns its oref.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMGridColumn</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,Column,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 s Column=##class(%TMGridColumn).%New($lb(0,1))
 s Column.Address=##this.RunMethod("Add",$lb(Column))
 s %ZoMRi(2153)=wait
 q Column
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMGridColumns"
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="FindItemID">
<Description>
For internal use.
</Description>
<FormalSpec>ID:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMGridColumn</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("FindItemID",$lb(ID)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetItem">
<Description>
Returns oref of the column by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMGridColumn</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItem",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Inserts new (empty) column into the specified position of the collection, returns its oref.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMGridColumn</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,Column
 s Column=##class(%TMGridColumn).%New($lb(0,1))
 s Column.Address=##this.RunMethod("Insert",$lb(Index,Column))
 q Column
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Updates the columns representation.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Update",$lb())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMGroupBox">
<Description>
Represents a server-side image of a Windows group box, embedding related controls on a form.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73329</TimeCreated>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMGroupBox"
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMHorizBarSeries">
<Description>
Represents chart data as a set of vertical bars.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMCustomBarSeries</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="CustomBarHeight">
<Description>
Determines the fixed (unchanged when zooming) height of bars (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMHorizBarSeries"
]]></Implementation>
</Method>

<Method name="CustomBarHeightGet">
<Description>
Method for getting 'CustomBarHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CustomBarHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="CustomBarHeightSet">
<Description>
Method for setting 'CustomBarHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CustomBarHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMIcon">
<Description>
This class represents one of the icons included into the project.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMGraphic</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="Data">
<Description>
Name of icon in the project.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Handle">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StreamData">
<Description>
Oref of icon.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMIcon"
]]></Implementation>
</Method>

<Method name="DataGet">
<Description>
Method for getting 'Data' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Data")
]]></Implementation>
</Method>

<Method name="DataSet">
<Description>
Method for setting 'Data' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ..SetProperty("Data",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="HandleGet">
<Description>
Method for getting 'Handle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Handle")
 q tmp
]]></Implementation>
</Method>

<Method name="HandleSet">
<Description>
Method for setting 'Handle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Handle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReleaseHandle">
<Description>
Sets the Handle property to 0 and releases system resources used for the icon representing.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReleaseHandle",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="StreamDataGet">
<Description>
Method for getting 'StreamData' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("StreamData")
]]></Implementation>
</Method>

<Method name="StreamDataSet">
<Description>
Method for setting 'StreamData' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ..SetProperty("StreamData",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMIconOptions">
<Description>
Determines the icons arrangement in a %TMListView object. Should be owned by the corresponding %TMListView object.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73329</TimeCreated>

<Property name="Arrangement">
<Description><![CDATA[
Determines the direction for icons arrangements. Possible values:<br>
"iaTop" - from left to right in rows from top to bottom;<br>
"iaLeft" - from top to bottom in columns from left to right.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",iaTop,iaLeft"/>
</Property>

<Property name="AutoArrange">
<Description>
Determines, should the icons be rearranged automatically when changes are made (if set to "True"), or only after the Arrange method call (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WrapText">
<Description>
Determines, can icons captions be wrapped (if set to "True") or should be displayed in single line (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ArrangementGet">
<Description>
Method for getting 'Arrangement' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Arrangement")
 q tmp
]]></Implementation>
</Method>

<Method name="ArrangementSet">
<Description>
Method for setting 'Arrangement' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Arrangement",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoArrangeGet">
<Description>
Method for getting 'AutoArrange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoArrange")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoArrangeSet">
<Description>
Method for setting 'AutoArrange' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoArrange",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMIconOptions"
]]></Implementation>
</Method>

<Method name="WrapTextGet">
<Description>
Method for getting 'WrapText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WrapText")
 q tmp
]]></Implementation>
</Method>

<Method name="WrapTextSet">
<Description>
Method for setting 'WrapText' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WrapText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMImage">
<Description>
Represents the server-side image of control for displaying bitmaps, icons, metafiles, etc.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73330</TimeCreated>

<Property name="Canvas">
<Description>
Read only. Contains oref on %TMCanvas object which may be used for the bitmap modifications.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Center">
<Description>
Determines, should the image be centered (if set to "True") or it should be positioned at upper left corner of the control (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="IncrementalDisplay">
<Description>
Determines, should large compressed images be drawn through a sequence of approximations
(if set to "True") or displayed only when loading and calculations finished (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnProgress">
<Description>
Handler of event occuring when a next image approximation (see description of the
'Incremental display' property) is drawn.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Picture">
<Description>
Contains oref of %TMBitMap object containing bitmap image displayed in this control.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="Proportional">
<Type>%Library.Boolean</Type>
</Property>

<Property name="Stretch">
<Description>
Determines, should the image be stretched to fit the control size (if set to "True"), or it should be unchanged (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Transparent">
<Description>
Determines, should the bitmap background be transparent (if set to "True")
or opaque (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" d ##this.Picture.%Close()")
 $$$GENERATE(" s ##this.Picture=##class(%TMBitmap).%New($lb(##this.Address,0,""Picture""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="CenterGet">
<Description>
Method for getting 'Center' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Center")
 q tmp
]]></Implementation>
</Method>

<Method name="CenterSet">
<Description>
Method for setting 'Center' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Center",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMImage"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Picture.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Picture,""Picture"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="IncrementalDisplayGet">
<Description>
Method for getting 'IncrementalDisplay' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("IncrementalDisplay")
 q tmp
]]></Implementation>
</Method>

<Method name="IncrementalDisplaySet">
<Description>
Method for setting 'IncrementalDisplay' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("IncrementalDisplay",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LoadFromStream">
<Description><![CDATA[
Reads image in specified format from Cache stream specified by its oref.
Image must be byte-to-byte compatible with appropriate file storage.
Possible values of the 'FMT' parameter:<br>
"BMP" - for Windows Bitmap (not OS/2 !);<br>
"ICO" - for Windows icon library, used first image from one;<br>
"WMF" - for Windows metafile;<br>
"EMF" - for enhanced Windows metafile;<br>
"GIF" - for Compuserve graphic interchange format;<br>
"JPG", "JPEG" - for JPEG Image group format.
]]></Description>
<FormalSpec>StreamOref:%String,FMT:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromStream",$lb(+StreamOref,FMT))
 q
]]></Implementation>
</Method>

<Method name="OnProgressGet">
<Description>
Method for getting 'OnProgress' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnProgress
]]></Implementation>
</Method>

<Method name="OnProgressSet">
<Description>
Method for setting 'OnProgress' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnProgress=Value
 d ##this.SetEvent("OnProgress",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ProportionalGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Proportional")
 q tmp
]]></Implementation>
</Method>

<Method name="ProportionalSet">
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Proportional",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SaveToStream">
<Description>
Saves image into specified Cache stream
</Description>
<FormalSpec>StreamOref:%AbstractStream</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToStream",$lb(+StreamOref))
 q
]]></Implementation>
</Method>

<Method name="StretchGet">
<Description>
Method for getting 'Stretch' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Stretch")
 q tmp
]]></Implementation>
</Method>

<Method name="StretchSet">
<Description>
Method for setting 'Stretch' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Stretch",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentGet">
<Description>
Method for getting 'Transparent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Transparent")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentSet">
<Description>
Method for setting 'Transparent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Transparent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Canvas</Value>
</Value>
<Value name="26">
<Value>OnProgress</Value>
</Value>
<Value name="27">
<Value>Picture</Value>
</Value>
<Value name="28">
<Value>Proportional</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMImageList">
<Description>
Represents the indexed collection of icons or bitmaps with the same size.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73330</TimeCreated>

<Property name="AllocBy">
<Description>
Represents the maximum number of items can be stored in the image list object.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Bitmap">
<Description>
Comma delimited list of BLOB names of the images included into this image list. For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BkColor">
<Description>
Determines the background color used for masked regions of the image. If set to $$$clNone, the image will be drawn transparently.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BlendColor">
<Description>
Determines the color used for highlighting the images if the DrawingStyle property is set to "dsFocus" or "dsSelected". $$$clDefault means the default system highlighting.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Count">
<Description>
Represents the number of images contained in the image list.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DragCursor">
<Description>
Determines the drag cursor associated with this image list.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Dragging">
<Description>
Contains "True" when an image in this image list is being dragged, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DrawingStyle">
<Description><![CDATA[
Determines the appearance of images. Possible values:<br>
"dsFocused" - blend 25% with the value of the BlendColor property (only if masking is switched on).<br>
"dsSelected" - blend 50% with the value of the BlendColor property (only if masking is switched on).<br>
"dsNormal" - use the value of the BkColor property (draw transparently if this value is $$$clNone).<br>
"dsTransparent" - draw transparently, ignore the BkColor value.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dsFocus,dsSelected,dsNormal,dsTransparent"/>
</Property>

<Property name="Height">
<Description>
Determines the height of images (in pixels) to be added to the image list. Change of this value cleares the image list.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ImageType">
<Description>
Determines, should the image itself to be drawn (if set to "itImage") or its mask (if set to "itMask").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",itImage,itMask"/>
</Property>

<Property name="Masked">
<Description>
Determines, does the image list include both images and masks (if set to "True") or images only (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShareImages">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StreamBitmap">
<Description>
OREF of stream which contains ImageList pictures
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this image list.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Width">
<Description>
Determines the width of images (in pixels) to be added to the image list. Change of this value cleares the image list.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="Add">
<Description>
Adds a bitmap Image and its Mask to the image list, returns the index of the added item or -1, if adding failed. If the Masked property is set to "False", the Mask parameter is not used.
</Description>
<FormalSpec>Image:%TMBitmap,Mask:%TMBitmap</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Add",$lb(Image.Address,Mask.Address))
 q tmp
]]></Implementation>
</Method>

<Method name="AddIcon">
<Description>
Adds the specified icon to the image list, returns the index of the added item or -1, if adding failed.
</Description>
<FormalSpec>Image:%TMIcon</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddIcon",$lb(Image.Address))
 q tmp
]]></Implementation>
</Method>

<Method name="AddImages">
<Description>
Adds all images contained in specified image list to the current image list.
</Description>
<FormalSpec>Value:%TMImageList</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddImages",$lb(Value.Address))
 q
]]></Implementation>
</Method>

<Method name="AddMasked">
<Description>
Adds a bitmap Image and its mask generated using the MaskColor parameter to the image list. Returns the 0 if the image added successfully or -1 if adding failed.
</Description>
<FormalSpec>Image:%TMBitmap,MaskColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddMasked",$lb(Image.Address,MaskColor))
 q tmp
]]></Implementation>
</Method>

<Method name="AllocByGet">
<Description>
Method for getting 'AllocBy' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllocBy")
 q tmp
]]></Implementation>
</Method>

<Method name="AllocBySet">
<Description>
Method for setting 'AllocBy' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllocBy",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BitmapGet">
<Description>
Method for getting 'Bitmap' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Bitmap")
 q tmp
]]></Implementation>
</Method>

<Method name="BitmapSet">
<Description>
Method for setting 'Bitmap' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ##this.SetProperty("Bitmap",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="BkColorGet">
<Description>
Method for getting 'BkColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BkColor")
 q tmp
]]></Implementation>
</Method>

<Method name="BkColorSet">
<Description>
Method for setting 'BkColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BkColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BlendColorGet">
<Description>
Method for getting 'BlendColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BlendColor")
 q tmp
]]></Implementation>
</Method>

<Method name="BlendColorSet">
<Description>
Method for setting 'BlendColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BlendColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMImageList"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Cleares the image list, deleting all images from it.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Deletes image specified by its index from the image list.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb(Index))
 q
]]></Implementation>
</Method>

<Method name="DragCursorGet">
<Description>
Method for getting 'DragCursor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DragCursor")
 q tmp
]]></Implementation>
</Method>

<Method name="DragCursorSet">
<Description>
Method for setting 'DragCursor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DragCursor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DraggingGet">
<Description>
Method for getting 'Dragging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Dragging")
 q tmp
]]></Implementation>
</Method>

<Method name="DraggingSet">
<Description>
Method for setting 'Dragging' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Dragging",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Draw">
<Description>
Draws the image specified by the Index parameter to the place specified by the X and Y parameters of the specified Canvas. If the Enabled parameter is "False", the image will be grayed.
</Description>
<FormalSpec>Canvas:%TMCanvas,X:%Integer,Y:%Integer,Index:%Integer,Enabled:Boolean=True</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Draw",$lb(Canvas.Address,X,Y,Index,Enabled))
 q
]]></Implementation>
</Method>

<Method name="DrawOverlay">
<Description>
Draws specified  image and overlay mask to the specified place of specified Canvas.
</Description>
<FormalSpec>Canvas:%TMCanvas,X:%Integer,Y:%Integer,ImageIndex:%Integer,Overlay:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DrawOverlay",$lb(Canvas.Address,X,Y,ImageIndex,Overlay))
 q
]]></Implementation>
</Method>

<Method name="DrawingStyleGet">
<Description>
Method for getting 'DrawingStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DrawingStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="DrawingStyleSet">
<Description>
Method for setting 'DrawingStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DrawingStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBitmap">
<Description>
Retrieves the image specified by its Index into the %TMBitMap object specified by its oref.
</Description>
<FormalSpec>Index:%Integer,Image:%TMBitmap</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetBitmap",$lb(Index,Image.Address))
 q
]]></Implementation>
</Method>

<Method name="GetIcon">
<Description>
Retrieves the image specified by its Index into the %TMIcon object specified by its oref.
</Description>
<FormalSpec>Index:%Integer,Image:%TMIcon</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetIcon",$lb(Index,Image.Address))
 q
]]></Implementation>
</Method>

<Method name="HeightGet">
<Description>
Method for getting 'Height' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Height")
 q tmp
]]></Implementation>
</Method>

<Method name="HeightSet">
<Description>
Method for setting 'Height' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Height",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImageTypeGet">
<Description>
Method for getting 'ImageType' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImageType")
 q tmp
]]></Implementation>
</Method>

<Method name="ImageTypeSet">
<Description>
Method for setting 'ImageType' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Inserts the bitmap Image and its Mask to the image list after the image specified by Index.
</Description>
<FormalSpec>Index:%Integer,Image:%TMBitmap,Mask:%TMBitmap</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Insert",$lb(Index,Image.Address,Mask.Address))
 q
]]></Implementation>
</Method>

<Method name="InsertIcon">
<Description>
Inserts the icon specified by the Image parameter to the image list after the image specified by Index.
</Description>
<FormalSpec>Index:%Integer,Image:%TMIcon</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InsertIcon",$lb(Index,Image.Address))
 q
]]></Implementation>
</Method>

<Method name="InsertMasked">
<Description>
Inserts the bitmap Image to the image list after the image specified by Index and generates the mask using the specified MaskColor.
</Description>
<FormalSpec>Index:%Integer,Image:%TMBitmap,MaskColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InsertMasked",$lb(Index,Image.Address,MaskColor))
 q
]]></Implementation>
</Method>

<Method name="MaskedGet">
<Description>
Method for getting 'Masked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Masked")
 q tmp
]]></Implementation>
</Method>

<Method name="MaskedSet">
<Description>
Method for setting 'Masked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Masked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Move">
<Description>
Changes the position of the specified image.
</Description>
<FormalSpec>CurIndex:%Integer,NewIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Move",$lb(CurIndex,NewIndex))
 q
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Overlay">
<Description>
Adds the image specified by ImageIndex to the list of images, which can be used as overlay masks. Possible values of the Overlay index are integers from 0 to 3. Returns "True" if successful, "False" if failed.
</Description>
<FormalSpec>ImageIndex:%Integer,Overlay:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Overlay",$lb(ImageIndex,Overlay))
 q tmp
]]></Implementation>
</Method>

<Method name="Replace">
<Description>
Inserts the bitmap Image and its Mask to the image list instead of the image specified by Index.
</Description>
<FormalSpec>Index:%Integer,Image:%TMBitmap,Mask:%TMBitmap</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Replace",$lb(Index,Image.Address,Mask.Address))
 q
]]></Implementation>
</Method>

<Method name="ReplaceIcon">
<Description>
Inserts the specified by the Image parameter to the image list instead of the image specified by Index.
</Description>
<FormalSpec>Index:%Integer,Image:%TMIcon</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReplaceIcon",$lb(Index,Image.Address))
 q
]]></Implementation>
</Method>

<Method name="ReplaceMasked">
<Description>
Inserts the bitmap Image to the image list instead of the image specified by Index and generates the mask using the specified MaskColor.
</Description>
<FormalSpec>Index:%Integer,NewImage:%TMBitmap,MaskColor:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ReplaceMasked",$lb(Index,NewImage.Address,MaskColor))
 q
]]></Implementation>
</Method>

<Method name="ShareImagesGet">
<Description>
Method for getting 'ShareImages' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShareImages")
 q tmp
]]></Implementation>
</Method>

<Method name="ShareImagesSet">
<Description>
Method for setting 'ShareImages' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShareImages",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StreamBitmapGet">
<Description>
Method for getting 'StreamBitmap' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StreamBitmap")
 q tmp
]]></Implementation>
</Method>

<Method name="StreamBitmapSet">
<Description>
Method for setting 'StreamBitmap' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 d ##this.SetProperty("StreamBitmap",Value)
 s %ZoMRi(2153)=wait
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMLabel">
<Description>
This class represents a window control displaying text on a form.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73330</TimeCreated>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside the rectangle aimed for this control. Possible values: "taLeftJustify", "taRightJustify", "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="FocusControl">
<Description>
Contains oref of %TMWinControl object which will get focus when accelerator key is pressed. Works only if 'ShowAccelChar' property set to "True".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Layout">
<Description>
Detemines vertical text alignment inside the rectangle aimed for this control. Possible values: "tlTop", "tlBottom", "tlCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tlTop,tlCenter,tlBottom"/>
</Property>

<Property name="ShowAccelChar">
<Description>
Determines, does the ampersand mark the accelerator key (if set to "True", default value), or it should be displayed as ampersand (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Transparent">
<Description>
Determines, will the label allow to see controls situated below it (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WordWrap">
<Description>
Determines, should the too long text be wrapped and displayed in several lines (if set to "True") or truncated and displayed in single line (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMLabel"
]]></Implementation>
</Method>

<Method name="FocusControlGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FocusControl")
 q tmp
]]></Implementation>
</Method>

<Method name="FocusControlSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 i Value'=""  d
 . d ##this.SetProperty("FocusControl",Value.Address)
 e  d
 . d ##this.SetProperty("FocusControl",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LayoutGet">
<Description>
Method for getting 'Layout' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Layout")
 q tmp
]]></Implementation>
</Method>

<Method name="LayoutSet">
<Description>
Method for setting 'Layout' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Layout",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowAccelCharGet">
<Description>
Method for getting 'ShowAccelChar' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowAccelChar")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowAccelCharSet">
<Description>
Method for setting 'ShowAccelChar' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowAccelChar",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentGet">
<Description>
Method for getting 'Transparent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Transparent")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentSet">
<Description>
Method for setting 'Transparent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Transparent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WordWrapGet">
<Description>
Method for getting 'WordWrap' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WordWrap")
 q tmp
]]></Implementation>
</Method>

<Method name="WordWrapSet">
<Description>
Method for setting 'WordWrap' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WordWrap",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMLineSeries">
<Description>
Represents chart data as a line connecting chart points. Differs from %TMLineSeries by full set of %TMCustomSeries properties but lower performance.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMCustomSeries</Super>
<TimeCreated>64314,73330</TimeCreated>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMLineSeries"
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMListBox">
<Description>
Represents the server-side image of a standard Windows control showing the list of items that can be selected, scrolled, added or deleted.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73330</TimeCreated>

<Property name="BorderStyle">
<Description>
If set to "bsSingle", the list view will have a single-line border. "bsNone" means no border.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas which may be used for drawing on the listbox control from the OnDrawItem events handler.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Columns">
<Description>
For multicolumn listboxes, represents the number of columns visible without scrolling.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ExtendedSelect">
<Description>
If this property and MultiSelect are both set to "True", a range of items can be selected using 'Shift' key, and a set of separate items can be selected using 'Ctrl' key, otherwise not.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="IntegralHeight">
<Description>
If this property is set to "True" and the listbox style is "lsOwnerDrawFixed", only integer number of items can be visible, otherwise, some items can be shown partially.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemHeight">
<Description>
Specifies the height of the listbox items (in pixels). Has sense only for "lsOwnerDrawFixed" and "lsOwnerDrawVariable" values of the Style property. Can be overriden by the value set in OnMeasureItem event handler.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemIndex">
<Description>
Represents the number of the selected listbox item (numbering starts from 0). Equals to -1 if no items selected.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Items">
<Description>
Collection of the listbox items. Use %TMString methods (Add, Insert, Move, Delete, IndexOf) to operate with separate items.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="MultiSelect">
<Description>
If set to "True", multiple items in the listbox can be selected. Otherwise, only one item can be selected in a time, the next selection cancels the previous one.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnDrawItem">
<Description>
Contains handler for event occuring when an item in an owner-draw listbox is to be displayed. Handler may use %TMCanvas methods to add graphic elements to the item or to replace the item text by an image.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMeasureItem">
<Description>
Contains handler for event occuring when an item in a owner-draw-variable listbox is to be redisplayed. The handler should specify the height (in pixels), necessary to draw an item.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Query">
<Description>
Contains oref of the %TMQuery object used in the ExecuteQuery method. See %TMQuery description for details.
</Description>
<Type>%Library.TMQuery</Type>
</Property>

<Property name="SelCount">
<Description>
Read only, contains the number of selected items if multiselect is allowed.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Sorted">
<Description>
Determines, should the listbox items be sorted in alphabetic order (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the style of the listbox. The possible values:
"lbStandard" - all items have the same height.<br>
"lbOwnerDrawFixed" - owner-draw listbox, with the OnDrawItem event occuring when an item is to be drawn; all items height is determined by the ItemHeight property.<br>
"lbOwnerDrawVariable" - owner-draw listbox,  with the OnDrawItem and OnMeasureItem events occuring when an item is to be drawn; items can have different heights.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",lbStandard,lbOwnerDrawFixed,lbOwnerDrawVariable"/>
</Property>

<Property name="TabWidth">
<Description>
Determines the tabs size for this listbox. If set to 0, the default Windows setting is used.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TopIndex">
<Description>
Represents the index of the topmost visible item in the listbox.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMStrings).%New($lb(..Address,0,""Items""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMListBox"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all items from the listbox.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="ColumnsGet">
<Description>
Method for getting 'Columns' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Columns")
 q tmp
]]></Implementation>
</Method>

<Method name="ColumnsSet">
<Description>
Method for setting 'Columns' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Columns",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExecuteQuery">
<Description>
Executes query and loads information in listbox. Query class, name and other information must be stored in Query property.
</Description>
<FormalSpec>p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n query,params,i
 s query=##class(%ResultSet).%New(..Query.QueryClass_"."_..Query.QueryName)
 q:query=$$$NULLOREF $$$ERROR("Invalid query name")
 d ..Items.Clear()
 s params=""
 f i=1:1:16 d:$d(@("p"_i))
 . i params="" s params="p"_i
 . e  s params=params_",p"_i
 x "d query.Execute("_params_")"
 f  q:'query.Next()  d
 . d:..Query.IdField'="" ..Items.AddObject(query.GetDataByName($p(..Query.QueryFields,",")),query.GetDataByName(..Query.IdField))
 . d:..Query.IdField="" ..Items.Add(query.GetDataByName($p(..Query.QueryFields,",")))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExtendedSelectGet">
<Description>
Method for getting 'ExtendedSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ExtendedSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="ExtendedSelectSet">
<Description>
Method for setting 'ExtendedSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ExtendedSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetSelected">
<Description>
Returns "True" if the item with specified Index is selected, otherwise - "False".
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetSelected",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="IntegralHeightGet">
<Description>
Method for getting 'IntegralHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("IntegralHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="IntegralHeightSet">
<Description>
Method for setting 'IntegralHeight' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("IntegralHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemAtPos">
<Description>
Returns the index of the listbox item at the specified position of the control. The Pos parameter should contain $lb(X,Y), the Existing parameter determines, will the method return -1 (if set to "True") or last item index+1 (if set to "False") when no item found at the specified position.
</Description>
<FormalSpec>Pos:%String,Existing:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ItemAtPos",$lb(Pos,Existing))
 q tmp
]]></Implementation>
</Method>

<Method name="ItemHeightGet">
<Description>
Method for getting 'ItemHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemHeightSet">
<Description>
Method for setting 'ItemHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemIndexGet">
<Description>
Method for getting 'ItemIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemIndexSet">
<Description>
Method for setting 'ItemIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemRect">
<Description>
Returns  the coordinates ($lb(Left,Top,Right,Bottom)) of the item specified by the Item parameter.
</Description>
<FormalSpec>Item:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ItemRect",$lb(Item))
 q tmp
]]></Implementation>
</Method>

<Method name="MultiSelectGet">
<Description>
Method for getting 'MultiSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiSelectSet">
<Description>
Method for setting 'MultiSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawItemGet">
<Description>
Method for getting 'OnDrawItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawItem
]]></Implementation>
</Method>

<Method name="OnDrawItemSet">
<Description>
Method for setting 'OnDrawItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawItem=Value
 d ##this.SetEvent("OnDrawItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMeasureItemGet">
<Description>
Method for getting 'OnMeasureItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMeasureItem
]]></Implementation>
</Method>

<Method name="OnMeasureItemSet">
<Description>
Method for setting 'OnMeasureItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMeasureItem=Value
 d ##this.SetEvent("OnMeasureItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelCountGet">
<Description>
Method for getting 'SelCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelCount")
 q tmp
]]></Implementation>
</Method>

<Method name="SelCountSet">
<Description>
Method for setting 'SelCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetSelected">
<Description>
Selects (if Value is "True") or deselects (if Value is "False") the item specified by the Index.
</Description>
<FormalSpec>Index:%Integer,Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetSelected",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SortedGet">
<Description>
Method for getting 'Sorted' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Sorted")
 q tmp
]]></Implementation>
</Method>

<Method name="SortedSet">
<Description>
Method for setting 'Sorted' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Sorted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabWidthGet">
<Description>
Method for getting 'TabWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="TabWidthSet">
<Description>
Method for setting 'TabWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TopIndexGet">
<Description>
Method for getting 'TopIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="TopIndexSet">
<Description>
Method for setting 'TopIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Items</Value>
</Value>
<Value name="39">
<Value>OnDrawItem</Value>
</Value>
<Value name="40">
<Value>OnMeasureItem</Value>
</Value>
<Value name="41">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMListColumn">
<Description>
Represents a column of the list view with the ViewStyle property equal to "vsReport". Provides methods and properties necessary to control a column appearance.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73331</TimeCreated>

<Property name="Alignment">
<Description>
Determines the text alignment in the list column. Possible values: "taLeftJustify", "taRightJustify" or "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="AutoSize">
<Description>
If set to "True", the column will be resized automatically accoring to the text width.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Caption">
<Description>
Determines the column caption.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ImageIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxWidth">
<Description>
Determines the maximum column width (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinWidth">
<Description>
Determines the minimum column width (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Width">
<Description>
Determines the current column width (in pixels). If set to -1, the column width is determined by the width of the text, if set to -2, the column width corresponds to the caption width.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" s %SMWOrefs(+##this)=##this")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoSizeGet">
<Description>
Method for getting 'AutoSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSize")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSizeSet">
<Description>
Method for setting 'AutoSize' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMListColumn"
]]></Implementation>
</Method>

<Method name="ImageIndexGet">
<Description>
Method for getting 'ImageIndex' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ImageIndexSet">
<Description>
Method for setting 'ImageIndex' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxWidthGet">
<Description>
Method for getting 'MaxWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxWidthSet">
<Description>
Method for setting 'MaxWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinWidthGet">
<Description>
Method for getting 'MinWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="MinWidthSet">
<Description>
Method for setting 'MinWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMListColumns">
<Description>
Represents a column collection of the list view with the ViewStyle property equal to "vsReport". Provides methods and properties necessary to manupulating with columns.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73331</TimeCreated>

<Property name="Count">
<Description>
Read only, contains the number of columns in the collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Owner">
<Description>
Read only, contains oref of %TMListView object that is owner of this collection.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="Add">
<Description>
Adds a new column to the collection, returns oref of created column of empty string if creation of the new %TMListColumns instance failed. To delete column just close the %TMListColumn object.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.TMListColumn</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("Add",$lb()))
 s %ZoMRi(2153)=wait
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMListColumns"
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetItems">
<Description>
Returns oref of the column specified by the Index parameter, of empty string if the column with this index is absent. Possible values of Index: integers from 0 to Count-1.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListColumn</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItems",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerGet">
<Description>
Method for getting 'Owner' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Owner"))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMListItem">
<Description>
Represents an item of a list view, its state, data and associated images.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73331</TimeCreated>

<Property name="Caption">
<Description>
Specifies the item label.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Checked">
<Description>
Represents the state of the associated checkbox, if the CheckBoxes property of the list view is set to "True". Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Cut">
<Description>
Contains "True" if the item is marked for 'Cut' operation, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Data">
<Description>
Contains the data associated with the item.
</Description>
<Type>%Library.Integer</Type>
</Property>

<Property name="DropTarget">
<Description>
Contains "True" if the item is marked as a drag-and-drop target, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Focused">
<Description>
Contains "True" if the item has a focus, otherwise - "False". If the application sets this property to "True" for one item, it must enable this property to be "False" for all other items in the list view.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ImageIndex">
<Description>
Determines the index of the image associated with this item in the list view LargeImages and SmallImages property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Indent">
<Description>
Determines the horizontal shift of the item in the list view.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Index">
<Description>
Determines the index of the item in the %TMListItems collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ListView">
<Description>
Contains oref of the list view containing this item.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OverlayIndex">
<Description>
Determines the index of the overlay image associated with this item in the list view StateImages property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Owner">
<Description>
Contains oref of the %TMListItems object containing this item.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Position">
<Description>
Contains Cache' list $lb(X,Y) determiming the coordinates of the upper left corner of the item in the list viiew.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Selected">
<Description>
Contains "True" if the item is selected, otherwise - "False". Setting the Selected property of one item to "True" automatically sets this property of all other items in the listview to "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StateIndex">
<Description>
Determines the index of the image associated with this item in the list view StateImages property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SubItems">
<Description>
Contains oref of %TMStrings object containing data to be displayed in cells for this items, if the list view ViewStyle property equals to "vsReport".
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" s %SMWOrefs(+##this)=##this")
 $$$GENERATE(" q:initvalue="""" $$$OK")
 $$$GENERATE(" n func,addr,strings,cliret,parent")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 $$$GENERATE(" s func=$lg(initvalue,3),parent=$lg(initvalue,1,0)")
 e  $$$GENERATE(" s func=$lg(initvalue,3),parent=##class(%TMPersistent).GetObjOref(+$lg(initvalue,1,0))")
 $$$GENERATE(" d:(func'="""")&(+parent)")
 $$$GENERATE(" . s cliret=$$CallBack^%ZMRASD($lb(""rm"",parent.Address,func,$lb(+##this)_$li(initvalue,4,8)))")
 $$$GENERATE(" . s $li(initvalue,2)=$li(cliret,1),strings=$li(cliret,2)")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..SubItems.%Close()")
 $$$GENERATE(" s:func="""" strings=..GetProperty(""SubItems"")")
 $$$GENERATE(" s ..SubItems=##class(%TMStrings).%New($lb(..Address,strings))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="CancelEdit">
<Description>
Terminates editing the item caption and cancels all changes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CancelEdit",$lb())
 q
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckedGet">
<Description>
Method for getting 'Checked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Checked")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckedSet">
<Description>
Method for setting 'Checked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Checked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMListItem"
]]></Implementation>
</Method>

<Method name="CutGet">
<Description>
Method for getting 'Cut' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Cut")
 q tmp
]]></Implementation>
</Method>

<Method name="CutSet">
<Description>
Method for setting 'Cut' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Cut",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Data")
]]></Implementation>
</Method>

<Method name="DataSet">
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Data",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Removes the item from the list view.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..Destroy()
 q
]]></Implementation>
</Method>

<Method name="DisplayRect">
<Description><![CDATA[
Returns the coordinates of the rectangle ($lb(Left,Top,Right,Bottom)) confining the item.
The value of the Code parameter determines, what part of the item the rectangle confines. Possible values: <br>
"drBounds" - the item icon, label and cells of report view.<br>
"drIcon" -  the item icon.<br>
"drLabel" - the item label.<br>
"drSelectBounds" - the icon and label, without cells of report view.
]]></Description>
<FormalSpec>Code:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DisplayRect",$lb(Code))
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetGet">
<Description>
Method for getting 'DropTarget' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DropTarget"))
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetSet">
<Description>
Method for setting 'DropTarget' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropTarget",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EditCaption">
<Description>
Selects the item, deselects all another items, moves focus to this item and puts it to edit mode.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EditCaption",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="FocusedGet">
<Description>
Method for getting 'Focused' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Focused")
 q tmp
]]></Implementation>
</Method>

<Method name="FocusedSet">
<Description>
Method for setting 'Focused' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Focused",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetPosition">
<Description>
Returns the coordinates of the upper left corner of the item as Cache' list $lb(X,Y).
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetPosition",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ImageIndexGet">
<Description>
Method for getting 'ImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ImageIndexSet">
<Description>
Method for setting 'ImageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IndentGet">
<Description>
Method for getting 'Indent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Indent")
 q tmp
]]></Implementation>
</Method>

<Method name="IndentSet">
<Description>
Method for setting 'Indent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Indent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IndexGet">
<Description>
Method for getting 'Index' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Index")
 q tmp
]]></Implementation>
</Method>

<Method name="IndexSet">
<Description>
Method for setting 'Index' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Index",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ListViewGet">
<Description>
Method for getting 'ListView' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("ListView"))
 q tmp
]]></Implementation>
</Method>

<Method name="ListViewSet">
<Description>
Method for setting 'ListView' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ListView",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MakeVisible">
<Description>
Scrolls the list view, if it is necessary to make the item visible. If the PartialOK parameter is "True", no actions are performed if the item is partially visible.
</Description>
<FormalSpec>PartialOK:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MakeVisible",$lb(PartialOK))
 q
]]></Implementation>
</Method>

<Method name="OverlayIndexGet">
<Description>
Method for getting 'OverlayIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OverlayIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="OverlayIndexSet">
<Description>
Method for setting 'OverlayIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OverlayIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OwnerGet">
<Description>
Method for getting 'Owner' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Owner"))
 q tmp
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectedGet">
<Description>
Method for getting 'Selected' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Selected")
 q tmp
]]></Implementation>
</Method>

<Method name="SelectedSet">
<Description>
Method for setting 'Selected' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Selected",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetPosition">
<Description>
Moves the item to the position spectfied by the Value parameter. The Value should be Cache' list $lb(X,Y), where X and Y are desired coordinates of the item upper left corner. Has sense only if the value of ViewStyle property equals to "vsIcon" or "vsSmallIcon".
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetPosition",$lb(Value))
 q
]]></Implementation>
</Method>

<Method name="StateIndexGet">
<Description>
Method for getting 'StateIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StateIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="StateIndexSet">
<Description>
Method for setting 'StateIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StateIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Repaints the item.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Update",$lb())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Data</Value>
</Value>
<Value name="9">
<Value>SubItems</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMListItems">
<Description>
Represents the collection of list items included into a list view as its Items property.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73331</TimeCreated>

<Property name="Count">
<Description>
Read only, contains the number of items in the collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Owner">
<Description>
Read only, contains oref of the %TMListView object that is owner of this collection.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="Add">
<Description>
Adds a new item to the collection, returns its oref or empty string, if creation of new instance of %TMListItem failed.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 ; s tmp=##this.RunMethod("Add",$lb())
 s tmp=##class(%TMListItem).%New($lb(+##this,0,"FastAdd"))
 q tmp
]]></Implementation>
</Method>

<Method name="AddItem">
<Description>
Adds a new item to the collection and initializes its Caption, ImageIndex, Data and SubItems (as $lb(SubItem1,...SubItemN)) properties. Returns its oref or empty string, if creation of new instance of %TMListItem failed.
</Description>
<FormalSpec>Caption:%String,ImageIndex:%Integer,Data:%Integer,SubItems:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 ; s tmp=##this.RunMethod("AddItem",$lb(Caption,ImageIndex,Data,SubItems))
 s tmp=##class(%TMListItem).%New($lb(+##this,0,"FastAddItem",Caption,ImageIndex,Data,SubItems))
 q tmp
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
Postpones repainting the item until the EndUpdate method call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMListItems"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Deletes all items from the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Removes the item specified by the Index parameter from the collection and updates the list view, if necessary.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb(Index))
 q
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
Allows the changes postponed after the BeginUpdate method call to be reflected on the screen.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="GetItems">
<Description>
Returns oref of the item specified by the Index parameter, or empty string if there is no such item. Possible values of Index: integers from 0 to Count-1.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItems",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="IndexOf">
<Description>
Returns the index of the item specified by its oref, or -1 if there is no such item.
</Description>
<FormalSpec>Value:%TMListItem</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IndexOf",$lb(Value.Address))
 q tmp
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Inserts a new item to the collection after the item with specified Index. Returns oref of the new item or empty string, if creation of new instance of %TMListItem failed.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 ; s tmp=##this.RunMethod("Insert",$lb(Index))
 s tmp=##class(%TMListItem).%New($lb(+##this,0,"FastInsert","","","","",Index))
 q tmp
]]></Implementation>
</Method>

<Method name="InsertItem">
<Description>
Adds a new item to the collection after the item with specified Index and initializes its Caption, ImageIndex, Data and SubItems (as $lb(SubItem1,...SubItemN)) properties. Returns oref of new item or empty string, if creation of new instance of %TMListItem failed.
</Description>
<FormalSpec>Index:%Integer,Caption:%String,ImageIndex:%Integer,Data:%Integer,SubItems:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 ; s tmp=##this.RunMethod("InsertItem",$lb(Index,Caption,ImageIndex,Data,SubItems))
 s tmp=##class(%TMListItem).%New($lb(+##this,0,"FastInsertItem",Caption,ImageIndex,Data,SubItems,Index))
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerGet">
<Description>
Method for getting 'Owner' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Owner")
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMListView">
<Description>
Provides methods and properties necessary for displaying lists of items in various manners.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73331</TimeCreated>

<Property name="AllocBy">
<Description>
Represents the maximum number of items can be stored in the list view object.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderStyle">
<Description>
If set to "bsSingle", the list view will have a single-line border. "bsNone" means no border.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas which may be used for drawing on the list view control from the OnCustomDraw and OnCustomDrawItem events handlers.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Checkboxes">
<Description>
Determines, should check boxes be placed near every item in the list view (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColumnClick">
<Description>
Determines, should the OnColumnClick event occur when a column caption is clicked (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Columns">
<Description>
Contains oref of the columns collection associated with this list view.
</Description>
<Type>%Library.TMListColumns</Type>
</Property>

<Property name="DropTarget">
<Description>
Contains oref of the list item which is a target for drag-and-drop operations.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FlatScrollBars">
<Description>
Determines, should scrollbars be flat (if set to "True") or 3D (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FullDrag">
<Description>
Determines, should headers be repainted when dragged (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridLines">
<Description>
Determines, should lines separated items in the list be drawn (if set to "True") or not (if set to "False"). The value of the ViewStyle property equal to "vsList" or "vsReport" overrides this property value.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HideSelection">
<Description>
Determines, does selected item remain marked as selected when the control loses focus (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HotTrack">
<Description>
Determines, should the items be highlighted when mouse cursor moves over them (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HotTrackStyles">
<Description><![CDATA[
Contains Cache' list where only actual from the following hottracking styles are combined:<br>
"htHandPoint" - turn the mouse cursor into a hand image.<br>
"htUnderlineCold" -	underline all untracked items.<br>
"htUnderlineHot" - underline the tracked item.<br>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(htHandPoint,htUnderlineCold,htUnderlineHot)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="IconOptions">
<Description>
Contains oref of the %TMIconOptions object specifying the icons arrangement in this control.
</Description>
<Type>%Library.TMIconOptions</Type>
</Property>

<Property name="ItemFocused">
<Description>
Contains oref of the list item having focus or empty string if no item has focus.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Items">
<Description>
Contains oref of the items collection associated with this list view.
</Description>
<Type>%Library.TMListItems</Type>
</Property>

<Property name="LargeImages">
<Description>
Contains oref of the image list with bitmaps to be displayed near every item in the list view if the value of the ViewStyle property is "vsIcon". Items and images are associated by the values of the ImageIndex properties of items.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MultiSelect">
<Description>
Determines, can more than one item be selected simultaneously (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when any item in the listview has been changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChanging">
<Description>
Handler of event occuring when any item in the listview is being changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnColumnClick">
<Description>
Handler of event occuring when any column caption is clicked and the ColumnClick property is set to "True".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCompare">
<Description>
Handler of event occuring when the AlphaSort method compares two items.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCustomDraw">
<Description>
Handler of event occuring just before the list view items are to be painted.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCustomDrawItem">
<Description>
Handler of event occuring just before an item is to be painted, giving opportunity to draw something on the list view canvas.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnData">
<Description>
Handler of event occuring just before an item is to be displayed, giving the opportunity to customize this item.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDataFind">
<Description>
Handler of event occuring when a search request is received from the FindCaption method.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDataHint">
<Description>
Handler of event occuring when the contents of the list view is changed or the list view is scrolled, giving opportunity to update all items to be repainted in one method call.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDeletion">
<Description>
Handler of event occuring when an item is about to be removed from the list view.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawItem">
<Description>
Handler of event occuring when an item should be drawn, giving opportunity to draw this item manually.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEdited">
<Description>
Handler of event occuring immediately after the caption of an item has been edited.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditing">
<Description>
Handler of event occuring when the caption of an item is being edited.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetImageIndex">
<Description>
Handler of event occuring just before an item is to be displayed, giving the opportunity to assign ImageIndex to this item. The ImageIndex will be used to associate images and items.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectItem">
<Description>
Handler of event occuring when an item has been selected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OwnerData">
<Description>
If contains "True", the list view is virtual. A virtual list view can have up to 2**32 items, but contains only focus and selection information.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OwnerDraw">
<Description>
If set to "True", the OnCustomDraw and OnCustomDrawItem handlers can override default items painting.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Query">
<Description>
Contains oref of the %TMQuery object used in the ExecuteQuery method. See %TMQuery description for details.
</Description>
<Type>%Library.TMQuery</Type>
</Property>

<Property name="ReadOnly">
<Description>
Determines, can the list view contents be edited by user (if set to "False") or not (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RowSelect">
<Description>
Determines, can the entire row be selected (if set to "True") or the first cell only (if set to "False"). Has sense if the value of the ViewStyle property is "vsReport".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelCount">
<Description>
Indicates the number of selected items.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Selected">
<Description>
Contains oref of the first selected item, or empty string if no item is selected.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShowColumnHeaders">
<Description>
Determines, should the column headers be shown (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowHint">
<Description>
Determines, should the hint be shown when the mouse cursor stops for a short time on the control (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SmallImages">
<Description>
Contains oref of the image list with bitmaps to be displayed near every item in the list view if the value of the ViewStyle property is other than "vsIcon". Items and images are associated by the values of the ImageIndex properties of items.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SortType">
<Description><![CDATA[
Detemines the sorting mode for the AlphaSort method. Possible values:<br>
"stNone" - no sorting.<br>
"stData" - sort in accordance with the values of items Data property (only if OnCompare handler is assigned).<br>
"stText" - sort in accordance with the items captions.<br>
"stBoth" - combines two previous modes.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",stNone,stData,stText,stBoth"/>
</Property>

<Property name="StateImages">
<Description>
Contains oref of the additional image list with bitmaps to be displayed near every item in the list view. Items and images are associated by the values of the StateIndex properties of items.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TopItem">
<Description>
Determines the topmost visible item of the list view (only if the ViewStyle property contains "vsReport" or "vsList").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ViewOrigin">
<Description>
Contains $lb(X,Y), where X is the number of pixels the view is scrolled in horizontal direction, and Y - in vertical one. (Only if the value of the ViewStyle property is "vsIcon" or "vsSmallIcon").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ViewStyle">
<Description><![CDATA[
Determines the list view appearance. Possible values:<br>
"vsIcon" - items are represented by full-sized icons with labels below them.<br>
"vsSmallIcon" - items are represented by small icons with labels below them.<br>
"vsList" - items are represented by small icons with labels to right of them, arranged as a list.<br>
"vsReport" - every item is represented as row consisting of cells, leftmost of them contains an icon with label.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",vsIcon,vsSmallIcon,vsList,vsReport"/>
</Property>

<Property name="VisibleRowCount">
<Description>
Contains the maximum number of rows (for "vsList" anf "vsReport" ViewStyles) that can be placed in the visible area of the list view.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Columns.%Close()")
 $$$GENERATE(" s ..Columns=##class(%TMListColumns).%New($lb(..Address,0,""Columns""))")
 $$$GENERATE(" d ..IconOptions.%Close()")
 $$$GENERATE(" s ..IconOptions=##class(%TMIconOptions).%New($lb(..Address,0,""IconOptions""))")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMListItems).%New($lb(..Address,0,""Items""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllocByGet">
<Description>
Method for getting 'AllocBy' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllocBy")
 q tmp
]]></Implementation>
</Method>

<Method name="AllocBySet">
<Description>
Method for setting 'AllocBy' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllocBy",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlphaSort">
<Description>
Sorts the items in the list view according to the value of SortType property and OnCompare event handler. See descriptions of these properties for details. By default, sorting order is alphabetical ascending. Returns "True" if successful.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AlphaSort",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Arrange">
<Description>
Arranges icons in a list view if the value of the ViewStyle property is "vslcon" or "vsSmallIcon", along the window edge or in nearest grid cells, as specified by the Code parameter. Possible values: "arAlignBottom", "arAlignLeft", "arAlignRight", "arAlignTop", "arDefault" or "arSnapToGrid".
</Description>
<FormalSpec>Code:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Arrange",$lb(Code))
 q
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckboxesGet">
<Description>
Method for getting 'Checkboxes' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Checkboxes")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckboxesSet">
<Description>
Method for setting 'Checkboxes' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Checkboxes",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMListView"
]]></Implementation>
</Method>

<Method name="ColumnClickGet">
<Description>
Method for getting 'ColumnClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColumnClick")
 q tmp
]]></Implementation>
</Method>

<Method name="ColumnClickSet">
<Description>
Method for setting 'ColumnClick' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColumnClick",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DropTargetGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("DropTarget"))
]]></Implementation>
</Method>

<Method name="DropTargetSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("DropTarget",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExecuteQuery">
<Description>
Executes query and loads information into the list. Query class, name and other information must be stored in Query property.
</Description>
<FormalSpec>p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n query,params,i,str
 s query=##class(%ResultSet).%New(..Query.QueryClass_"."_..Query.QueryName)
 q:query=$$$NULLOREF $$$ERROR("Invalid query name")
 d ..Items.BeginUpdate()
 d ..Items.Clear()
 s params=""
 f i=1:1:16  d
 . i $d(@("p"_i))  d
 . . i params="" s params="p"_i
 . . e  s params=params_",p"_i
 x "d query.Execute("_params_")"
 f  q:'query.Next()  d
 . s str=""
 . f i=2:1:$l(..Query.QueryFields,",")  d
 . . s str=str_$lb(query.GetDataByName($p(..Query.QueryFields,",",i)))
 . d:..Query.IdField'="" ..Items.AddItem(query.GetDataByName($p(..Query.QueryFields,",",1)),0,query.GetDataByName(..Query.IdField),str)
 . d:..Query.IdField="" ..Items.AddItem(query.GetDataByName($p(..Query.QueryFields,",",1)),0,0,str)
 d ..Items.EndUpdate()
 q $$$OK
]]></Implementation>
</Method>

<Method name="FindCaption">
<Description>
Returns oref of the list view item with the caption specified by the Value parameter, or empty string if required item does not exist. Search starts from the StartIndex value, if Inclusive is "True", or from the next index, if Inclusive is "False" and may continue from the first index if Wrap is "True". The value of the Partial equal to "True" means that the item caption should starts with the Value to match, othewise it should be equal to the Value.
</Description>
<FormalSpec>StartIndex:%Integer,Value:%String,Partial:%Boolean,Inclusive:%Boolean,Wrap:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FindCaption",$lb(StartIndex,Value,Partial,Inclusive,Wrap))
 q tmp
]]></Implementation>
</Method>

<Method name="FlatScrollBarsGet">
<Description>
Method for getting 'FlatScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FlatScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="FlatScrollBarsSet">
<Description>
Method for setting 'FlatScrollBars' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FlatScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FullDragGet">
<Description>
Method for getting 'FullDrag' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FullDrag")
 q tmp
]]></Implementation>
</Method>

<Method name="FullDragSet">
<Description>
Method for setting 'FullDrag' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FullDrag",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Columns.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Columns,""Columns"","""")_result")
 $$$GENERATE(" s result=result_..IconOptions.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..IconOptions,""IconOptions"","""")_result")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetHitTestInfoAt">
<Description><![CDATA[
Returns Cache' list ($lb) where only strings actual for the specified point are combined. Possible strings:<br>
"htAbove" - to top from the control.<br>
"htBelow" - to bottom the control.<br>
"htNowhere" - not on any item, though inside the control.<br>
"htOnItem" - on an item.<br>
"htOnButton" - on a button.<br>
"htOnIcon" - on an icon.<br>
"htOnIndent" - on an indent.<br>
"htOnLabel" - on a label.<br>
"htOnRight" - on the right side.<br>
"htOnStateIcon" - on a state icon.<br>
"htToLeft" - to left from the control.<br>
"htToRight" - to right from the control.
]]></Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetHitTestInfoAt",$lb(X,Y))
 q tmp
]]></Implementation>
</Method>

<Method name="GetItemAt">
<Description>
Returns oref of the list item at the position specified by X and Y parameters, or empty string if there is nothing at this location.
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItemAt",$lb(X,Y)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNearestItem">
<Description>
Returns oref of the list item at the position specified by X and Y parameters, or of nearest item in spectified direction, or empty string if there are no items in this direction. Possible values of the Direction parameter: "sdLeft", "sdRight", "sdAbove", "sdBelow" or "sdAll".
</Description>
<FormalSpec>Point:%String,Direction:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNearestItem",$lb(Point,Direction)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNextItem">
<Description><![CDATA[
Returns oref of the next list item after the StartItem in the spectified direction, or empty string if there are no items in this direction. Possible values of the Direction parameter: "sdLeft", "sdRight", "sdAbove", "sdBelow" or "sdAll". Only items in the state matching  the States parameter are considered. Possible value of the State parameter: Cache' list where only necessary from the following strings are combined:<br>
"isNone" - default state.<br>
"isCut" - cut item.<br>
"isDropHilited" - item highlighted as a drag-and-drop target.<br>
"isFocused" - focused item.<br>
"isSelected" - selected item.<br>
"isActivating" - active item.
]]></Description>
<FormalSpec>StartItem:%TMListItem,Direction:%String,States:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNextItem",$lb(StartItem.Address,Direction,States)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetSearchString">
<Description>
Returns the search string typed by the user when the focus is at the list view.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetSearchString",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GridLinesGet">
<Description>
Method for getting 'GridLines' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridLines")
 q tmp
]]></Implementation>
</Method>

<Method name="GridLinesSet">
<Description>
Method for setting 'GridLines' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridLines",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HotTrackGet">
<Description>
Method for getting 'HotTrack' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HotTrack")
 q tmp
]]></Implementation>
</Method>

<Method name="HotTrackSet">
<Description>
Method for setting 'HotTrack' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HotTrack",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HotTrackStylesGet">
<Description>
Method for getting 'HotTrackStyles' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HotTrackStyles")
 q tmp
]]></Implementation>
</Method>

<Method name="HotTrackStylesSet">
<Description>
Method for setting 'HotTrackStyles' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HotTrackStyles",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IsEditing">
<Description>
Returns "True" if any item caption in the list is being edited, otherwise "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IsEditing",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ItemFocusedGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..GetProperty("ItemFocused"))
]]></Implementation>
</Method>

<Method name="ItemFocusedSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ItemFocused",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LargeImagesGet">
<Description>
Method for getting 'LargeImages' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("LargeImages"))
 q tmp
]]></Implementation>
</Method>

<Method name="LargeImagesSet">
<Description>
Method for setting 'LargeImages' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LargeImages",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MultiSelectGet">
<Description>
Method for getting 'MultiSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiSelectSet">
<Description>
Method for setting 'MultiSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangingGet">
<Description>
Method for getting 'OnChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChanging
]]></Implementation>
</Method>

<Method name="OnChangingSet">
<Description>
Method for setting 'OnChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChanging=Value
 d ##this.SetEvent("OnChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnColumnClickGet">
<Description>
Method for getting 'OnColumnClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnClick
]]></Implementation>
</Method>

<Method name="OnColumnClickSet">
<Description>
Method for setting 'OnColumnClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnClick=Value
 d ##this.SetEvent("OnColumnClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCompareGet">
<Description>
Method for getting 'OnCompare' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCompare
]]></Implementation>
</Method>

<Method name="OnCompareSet">
<Description>
Method for setting 'OnCompare' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCompare=Value
 d ##this.SetEvent("OnCompare",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCustomDrawGet">
<Description>
Method for getting 'OnCustomDraw' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCustomDraw
]]></Implementation>
</Method>

<Method name="OnCustomDrawItemGet">
<Description>
Method for getting 'OnCustomDrawItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCustomDrawItem
]]></Implementation>
</Method>

<Method name="OnCustomDrawItemSet">
<Description>
Method for setting 'OnCustomDrawItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCustomDrawItem=Value
 d ##this.SetEvent("OnCustomDrawItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCustomDrawSet">
<Description>
Method for setting 'OnCustomDraw' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCustomDraw=Value
 d ##this.SetEvent("OnCustomDraw",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDataFindGet">
<Description>
Method for getting 'OnDataFind' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDataFind
]]></Implementation>
</Method>

<Method name="OnDataFindSet">
<Description>
Method for setting 'OnDataFind' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDataFind=Value
 d ##this.SetEvent("OnDataFind",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDataGet">
<Description>
Method for getting 'OnData' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnData
]]></Implementation>
</Method>

<Method name="OnDataHintGet">
<Description>
Method for getting 'OnDataHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDataHint
]]></Implementation>
</Method>

<Method name="OnDataHintSet">
<Description>
Method for setting 'OnDataHint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDataHint=Value
 d ##this.SetEvent("OnDataHint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDataSet">
<Description>
Method for setting 'OnData' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnData=Value
 d ##this.SetEvent("OnData",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDeletionGet">
<Description>
Method for getting 'OnDeletion' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDeletion
]]></Implementation>
</Method>

<Method name="OnDeletionSet">
<Description>
Method for setting 'OnDeletion' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDeletion=Value
 d ##this.SetEvent("OnDeletion",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawItemGet">
<Description>
Method for getting 'OnDrawItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawItem
]]></Implementation>
</Method>

<Method name="OnDrawItemSet">
<Description>
Method for setting 'OnDrawItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawItem=Value
 d ##this.SetEvent("OnDrawItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditedGet">
<Description>
Method for getting 'OnEdited' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEdited
]]></Implementation>
</Method>

<Method name="OnEditedSet">
<Description>
Method for setting 'OnEdited' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEdited=Value
 d ##this.SetEvent("OnEdited",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditingGet">
<Description>
Method for getting 'OnEditing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditing
]]></Implementation>
</Method>

<Method name="OnEditingSet">
<Description>
Method for setting 'OnEditing' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditing=Value
 d ##this.SetEvent("OnEditing",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetImageIndexGet">
<Description>
Method for getting 'OnGetImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetImageIndex
]]></Implementation>
</Method>

<Method name="OnGetImageIndexSet">
<Description>
Method for setting 'OnGetImageIndex' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetImageIndex=Value
 d ##this.SetEvent("OnGetImageIndex",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectItemGet">
<Description>
Method for getting 'OnSelectItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectItem
]]></Implementation>
</Method>

<Method name="OnSelectItemSet">
<Description>
Method for setting 'OnSelectItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSelectItem=Value
 d ##this.SetEvent("OnSelectItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OwnerDataGet">
<Description>
Method for getting 'OwnerData' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OwnerData")
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerDataSet">
<Description>
Method for setting 'OwnerData' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OwnerData",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OwnerDrawGet">
<Description>
Method for getting 'OwnerDraw' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OwnerDraw")
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerDrawSet">
<Description>
Method for setting 'OwnerDraw' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OwnerDraw",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowSelectGet">
<Description>
Method for getting 'RowSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RowSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="RowSelectSet">
<Description>
Method for setting 'RowSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RowSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Scroll">
<Description>
Scrolls the list view contents by DX pixels in the horizontal direction and by DY pixels in vertical one.
</Description>
<FormalSpec>DX:%Integer,DY:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Scroll",$lb(DX,DY))
 q
]]></Implementation>
</Method>

<Method name="SelCountGet">
<Description>
Method for getting 'SelCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelCount")
 q tmp
]]></Implementation>
</Method>

<Method name="SelCountSet">
<Description>
Method for setting 'SelCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectedGet">
<Description>
Method for getting 'Selected' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Selected"))
 q tmp
]]></Implementation>
</Method>

<Method name="SelectedSet">
<Description>
Method for setting 'Selected' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Selected",Value.Address)
 q
]]></Implementation>
</Method>

<Method name="ShowColumnHeadersGet">
<Description>
Method for getting 'ShowColumnHeaders' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowColumnHeaders")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowColumnHeadersSet">
<Description>
Method for setting 'ShowColumnHeaders' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowColumnHeaders",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowHintGet">
<Description>
Method for getting 'ShowHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowHint")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowHintSet">
<Description>
Method for setting 'ShowHint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SmallImagesGet">
<Description>
Method for getting 'SmallImages' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("SmallImages"))
 q tmp
]]></Implementation>
</Method>

<Method name="SmallImagesSet">
<Description>
Method for setting 'SmallImages' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SmallImages",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SortTypeGet">
<Description>
Method for getting 'SortType' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SortType")
 q tmp
]]></Implementation>
</Method>

<Method name="SortTypeSet">
<Description>
Method for setting 'SortType' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SortType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StateImagesGet">
<Description>
Method for getting 'StateImages' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("StateImages"))
 q tmp
]]></Implementation>
</Method>

<Method name="StateImagesSet">
<Description>
Method for setting 'StateImages' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StateImages",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StringWidth">
<Description>
Returns the width of the specified string (in pixels), according to the current font.
</Description>
<FormalSpec>S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("StringWidth",$lb(S))
 q tmp
]]></Implementation>
</Method>

<Method name="TopItemGet">
<Description>
Method for getting 'TopItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMListItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("TopItem"))
 q tmp
]]></Implementation>
</Method>

<Method name="TopItemSet">
<Description>
Method for setting 'TopItem' property.
</Description>
<FormalSpec>Value:%TMListItem</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopItem",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateItems">
<Description>
Repaints items with indices between the FirstIndex and LastIndex (inclusive).
</Description>
<FormalSpec>FirstIndex:%Integer,LastIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("UpdateItems",$lb(FirstIndex,LastIndex))
 q
]]></Implementation>
</Method>

<Method name="ViewOriginGet">
<Description>
Method for getting 'ViewOrigin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ViewOrigin")
 q tmp
]]></Implementation>
</Method>

<Method name="ViewOriginSet">
<Description>
Method for setting 'ViewOrigin' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ViewOrigin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ViewStyleGet">
<Description>
Method for getting 'ViewStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ViewStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="ViewStyleSet">
<Description>
Method for setting 'ViewStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ViewStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleRowCountGet">
<Description>
Method for getting 'VisibleRowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleRowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleRowCountSet">
<Description>
Method for setting 'VisibleRowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleRowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Columns</Value>
</Value>
<Value name="39">
<Value>IconOptions</Value>
</Value>
<Value name="40">
<Value>Items</Value>
</Value>
<Value name="41">
<Value>OnChange</Value>
</Value>
<Value name="42">
<Value>OnChanging</Value>
</Value>
<Value name="43">
<Value>OnColumnClick</Value>
</Value>
<Value name="44">
<Value>OnCompare</Value>
</Value>
<Value name="45">
<Value>OnCustomDraw</Value>
</Value>
<Value name="46">
<Value>OnCustomDrawItem</Value>
</Value>
<Value name="47">
<Value>OnData</Value>
</Value>
<Value name="48">
<Value>OnDataFind</Value>
</Value>
<Value name="49">
<Value>OnDataHint</Value>
</Value>
<Value name="50">
<Value>OnDeletion</Value>
</Value>
<Value name="51">
<Value>OnDrawItem</Value>
</Value>
<Value name="52">
<Value>OnEdited</Value>
</Value>
<Value name="53">
<Value>OnEditing</Value>
</Value>
<Value name="54">
<Value>OnGetImageIndex</Value>
</Value>
<Value name="55">
<Value>OnSelectItem</Value>
</Value>
<Value name="56">
<Value>Query</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMLocator">
<Description><![CDATA[
Represents invisible component enabling incremental search in a
%TMButtonGrid. Appication should not call its methods and touch
its properties directly. All necessary settings are made at
design time. Just create Locator, ComboBox and single-line
editor and specify the following properties for the Locator:<br>
Grid: select the name of ButtonGrid where Locator must search
information.<br>
Edit: select the name of edit control where search substring
will be typed.<br>
Combobox: select the name of drop-down list to select a grid
column where search will be performed.<br>
All settings for the editor and combobox will be made
automatically.<br>
Note 1: the Grid property must be set first.<br>
Note 2: the Alignment property of the ButtonGrid must be
"alNone".
]]></Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73332</TimeCreated>

<Property name="ComboBox">
<Description>
Oref of the associated drop-down list, for internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Edit">
<Description>
Oref of the associated single-line editor, for internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Grid">
<Description>
Oref of the ButtonGrid, where this locator must search information, for internal use.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the locator's combobox changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFixedCellClick">
<Description>
Handler of event occuring when the fixed cell of controlled ButtonGrid is clicked and the 'FixedButtons' property is set to "True".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMLocator"
]]></Implementation>
</Method>

<Method name="ComboBoxSet">
<Description>
Method for setting 'ComboBox' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%ComboBox=Value
 d ##this.SetProperty("ComboBox",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EditSet">
<Description>
Method for setting 'Edit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%Edit=Value
 d ##this.SetProperty("Edit",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridSet">
<Description>
Method for setting 'Grid' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%Grid=Value
 d ##this.SetProperty("Grid",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFixedCellClickGet">
<Description>
Method for getting 'OnFixedCellClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFixedCellClick
]]></Implementation>
</Method>

<Method name="OnFixedCellClickSet">
<Description>
Method for setting 'OnFixedCellClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFixedCellClick=Value
 d ##this.SetEvent("OnFixedCellClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateLocator">
<Description>
Updates locator state. Should be used if locator's combobox item is selected programatically.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("UpdateLocator",$lb())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>ComboBox</Value>
</Value>
<Value name="9">
<Value>Edit</Value>
</Value>
<Value name="10">
<Value>Grid</Value>
</Value>
<Value name="11">
<Value>OnFixedCellClick</Value>
</Value>
<Value name="12">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMMainMenu">
<Description>
Represents a main menu bar with corresponding drop-down menus.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73332</TimeCreated>

<Property name="AutoMerge">
<Type>%Library.Boolean</Type>
</Property>

<Property name="Images">
<Description>
Contains oref of %TMImageList object with images for the menu items.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Items">
<Description>
Contains oref of the abstract root menu item, providing access to %TMMenuItem methods necessary to add, insert or delete top-level menu items.
</Description>
<Type>%Library.TMMenuItem</Type>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the menu is loaded into memory and when its structure is  changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMMenuItem).%New($lb(..Address,..GetProperty(""Items"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMMainMenu"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetItems">
<Description>
Returns oref of the %TMMenuItem object specified by the Index parameter, or empty string, if required item is absent.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMMenuItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItems",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="ImagesGet">
<Description>
Method for getting 'Images' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(##this.GetProperty("Images"))
]]></Implementation>
</Method>

<Method name="ImagesSet">
<Description>
Method for setting 'Images' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Images",$s(+Value:Value.Address,1:""))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Items</Value>
</Value>
<Value name="9">
<Value>OnChange</Value>
</Value>
<Value name="10">
<Value>AutoMerge</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMMemo">
<Description>
This class represents the server-side image of a windows multi-line edit control.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73332</TimeCreated>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside the rectangle aimed for this control. Possible values: "taLeftJustify", "taRightJustify", "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines, will the control have a border around the client area. Possible values:<br>
"bsSingle" - single-line border<br>
"bsNone" - no border.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="CanUndo">
<Description>
Indicates, are there changes saved in the Undo buffer. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CaretPos">
<Description>
Determines the coordinates of the cursor (in pixels) relative to the client area.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HideSelection">
<Description>
Determines, should the selected text be highlighted when the control is out of focus. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Lines">
<Description>
Collection of the text lines in this control. Use %TMString methods (Add, Insert, Move, Delete, IndexOf, Count) to operate with separate items.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="MaxLength">
<Description>
Limits the length of string the user can input in the edit portion of the drop-down list. 0 means no limitation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Modified">
<Description>
Indicates, is the text modified by the user. Possible values: "True" or "False". The code altering the 'Lines' property should set the 'Modified' property to "True".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OEMConvert">
<Description>
Determines whether characters typed in the edit control are converted from ANSI to OEM and then back to ANSI.

Description

To ensure that any characters typed in the edit control can be unambiguously converted to the OEM character set, set OEMconvert to True. This causes all characters to be converted from ANSI to OEM and then back to ANSI as they are typed. Set OEMconvert to False to avoid the overhead of this conversion when it does not matter whether the text can be unambiguously mapped to an OEM string.

OEMConvert is most useful for edit controls used to enter file names when the application does not use Unicode file names.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the text is changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Description>
Determines, should the text be protected from being changed by user. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBars">
<Description><![CDATA[
Determines, can this control have scrollbars. Possible values:<br>
"ssNone" - no scrollbars<br>
"ssHorizontal" - a horizontal scrollbar on the bottom edge<br>
"ssVertical" - a vertical scrollbar on the right edge<br>
"ssBoth" - both horizontal and vertical scrollbars.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssNone,ssHorizontal,ssVertical,ssBoth"/>
</Property>

<Property name="SelLength">
<Description>
Represents the length of the selected text in the memo control.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelStart">
<Description>
Represents the number of first symbol of selected part of text in the memo control (numbering starts from 0). If no text is selected, represents the cursor position.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelText">
<Description>
Represents the selected text in the edit control. Change of this property replaces the  selected text with new value, or inserts it at the cursor if no text is selected.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="WantReturns">
<Description>
Determines, should the Enter keystrokes insert CRLF characters into the text (if set to "True") or be handled by the form, allowing, however, user to insert CRLF typing Ctrl-Enter (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WantTabs">
<Description>
Determines, should the Tab keystrokes insert tab characters into the text (if set to "True") or move the focus to the next control (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WordWrap">
<Description>
Determines, should the too long text be wrapped and displayed in several lines (if set to "True") or displayed in single line with scrolling (if set to "False"). Affects only on the appearance rather than actual contents of the 'Lines' property.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Lines.%Close()")
 $$$GENERATE(" s ..Lines=##class(%TMStrings).%New($lb(..Address,0,""Lines""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CanUndoGet">
<Description>
Method for getting 'CanUndo' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CanUndo")
 q tmp
]]></Implementation>
</Method>

<Method name="CanUndoSet">
<Description>
Method for setting 'CanUndo' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CanUndo",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CaretPosGet">
<Description>
Method for getting 'CaretPos' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CaretPos")
 q tmp
]]></Implementation>
</Method>

<Method name="CaretPosSet">
<Description>
Method for setting 'CaretPos' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CaretPos",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMMemo"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all the text from the control.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearSelection">
<Description>
Deletes selected part of text from the memo control.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearSelection",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearUndo">
<Description>
Makes changes in the Lines property irreversible and sets the CanUndo property to "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearUndo",$lb())
 q
]]></Implementation>
</Method>

<Method name="CopyToClipboard">
<Description>
Copies the selected text into Windows Clipboard. If no text is selected, ClipBoard remains unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="CutToClipboard">
<Description>
Copies the selected text into Windows Clipboard and then deletes it from the memo control. If no text is selected, ClipBoard remains unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CutToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Lines.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Lines,""Lines"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLengthGet">
<Description>
Method for getting 'MaxLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxLength")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxLengthSet">
<Description>
Method for setting 'MaxLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModifiedGet">
<Description>
Method for getting 'Modified' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Modified")
 q tmp
]]></Implementation>
</Method>

<Method name="ModifiedSet">
<Description>
Method for setting 'Modified' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Modified",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OEMConvertGet">
<Description>
Method for getting 'OEMConvert' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OEMConvert")
 q tmp
]]></Implementation>
</Method>

<Method name="OEMConvertSet">
<Description>
Method for setting 'OEMConvert' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OEMConvert",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PasteFromClipboard">
<Description>
Replaces the selected text with the Windows ClipBoard contents. If no text is selected, inserts the Clipboard contents at the cursor. Does nothing if the Clipboard contains no text.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PasteFromClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarsGet">
<Description>
Method for getting 'ScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarsSet">
<Description>
Method for setting 'ScrollBars' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelLengthGet">
<Description>
Method for getting 'SelLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelLength")
 q tmp
]]></Implementation>
</Method>

<Method name="SelLengthSet">
<Description>
Method for setting 'SelLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelStartGet">
<Description>
Method for getting 'SelStart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelStart")
 q tmp
]]></Implementation>
</Method>

<Method name="SelStartSet">
<Description>
Method for setting 'SelStart' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelStart",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelTextGet">
<Description>
Method for getting 'SelText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelText")
 q tmp
]]></Implementation>
</Method>

<Method name="SelTextSet">
<Description>
Method for setting 'SelText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectAll">
<Description>
Marks all the text in the edit control as selected.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SelectAll",$lb())
 q
]]></Implementation>
</Method>

<Method name="Undo">
<Description>
Cancel changes in the Lines property made since the last ClearUndo call or all changes, if ClearUndo was never called.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Undo",$lb())
 q
]]></Implementation>
</Method>

<Method name="WantReturnsGet">
<Description>
Method for getting 'WantReturns' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WantReturns")
 q tmp
]]></Implementation>
</Method>

<Method name="WantReturnsSet">
<Description>
Method for setting 'WantReturns' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WantReturns",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WantTabsGet">
<Description>
Method for getting 'WantTabs' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WantTabs")
 q tmp
]]></Implementation>
</Method>

<Method name="WantTabsSet">
<Description>
Method for setting 'WantTabs' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WantTabs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WordWrapGet">
<Description>
Method for getting 'WordWrap' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WordWrap")
 q tmp
]]></Implementation>
</Method>

<Method name="WordWrapSet">
<Description>
Method for setting 'WordWrap' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WordWrap",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Lines</Value>
</Value>
<Value name="38">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMMenuItem">
<Description>
Represents an item of %TMMainMenu or %TMPopupMenu object.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73333</TimeCreated>

<Property name="Break">
<Description><![CDATA[
Determines, should the item break the menu into coumns or not, and how should the item do this. Possible values:<br>
"mbNone" - the item does not break menu (default value).<br>
"mbBarBreak" - the item starts a new menu column, separated from the old one by bar.<br>
"mbBreak" - the item starts a new menu column, separated the old one by space.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",mbNone,mbBreak,mbBarBreak"/>
</Property>

<Property name="Caption">
<Description>
Determines the text of the menu item. The text characters marked by ampersand are considered as accelerators, i.e., the menu item can be selected by pressing Alt with marked character. If the value of this property is "-", the item serves as separator.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Checked">
<Description>
Determines the state of the menu item as of a checkbox. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Count">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Default">
<Description>
If set to "True", this menu item is called on the parent item double-click.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Enabled">
<Description>
If set to "True" (default value), the menu item can be selected and the Click method is called on selection, otherwise the menu item is disabled.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GroupIndex">
<Description>
Contains the integer identifier of the logical group containig this item.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this menu item.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Hint">
<Description>
Contains the text string appearing when the mouse cursor moves over this item.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ImageIndex">
<Description>
Determines the index of the image associated with this item in the main menu Images property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MenuIndex">
<Description>
Indicates the index of the menu item within its parent menu.
Use MenuIndex to locate the menu item in the Items property of its parent menu item. Changing this value moves the menu item within its menu. MenuIndex may not correspond to the position of the item in the menu the user sees. The menu can include items that are not visible.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Name">
<Description>
Determines the name of the control as of the Cache'  object. Can be changed at design time only.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClick">
<Description>
Handler of event occuring when the menu item is selected or the Click method is called directly.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ParentMenu">
<Description>
Read ParentMenu to determine the menu item that represents the dropdown menu that contains this menu item.
If the menu item is a top level menu item in a main menu or pop-up menu,
ParentMenu is the value of that menu’s Items property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RadioItem">
<Description>
If set to "True", the menu items with the same GroupIndex acts as a radiogroup, i.e., checking one item unchecks all other items automatically. The top-level main menu items can not belong to a radiogroup.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShortCut">
<Description>
Determines the shortcut to quickly call this menu item. Can be set only at design time.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tag">
<Description>
Arbitrary text corresponding to this item.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Visible">
<Description>
If set to "True" (default value), the item appears in the menu, if set to "False", the item is hidden.

Description

Use Visible to prevent the user from seeing an item in the menu. For example, remove menu items that do not apply to the current component of a pop-up menu in an OnPopup event handler.

If Visible is True, the menu item appears. If Visible is False, the menu item is hidden.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="Add">
<Description>
Adds the subitem specified by its oref to this menu item.
</Description>
<FormalSpec>Item:%TMMenuItem</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Add",$lb(Item.Address))
 q
]]></Implementation>
</Method>

<Method name="BreakGet">
<Description>
Method for getting 'Break' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Break")
 q tmp
]]></Implementation>
</Method>

<Method name="BreakSet">
<Description>
Method for setting 'Break' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Break",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckedGet">
<Description>
Method for getting 'Checked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Checked")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckedSet">
<Description>
Method for setting 'Checked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Checked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMMenuItem"
]]></Implementation>
</Method>

<Method name="Click">
<Description>
Arises the OnClick event for the menu item.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Click",$lb())
 q
]]></Implementation>
</Method>

<Method name="Command">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Command",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="Count">
<Description>
Returns the number of subitems of this item.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Count",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="CountGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("Count")
]]></Implementation>
</Method>

<Method name="CountSet">
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultGet">
<Description>
Method for getting 'Default' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Default")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultSet">
<Description>
Method for setting 'Default' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Default",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Deletes the item specified by its Index (with all its subitems) from menu. Index may be an integer from 0 to Count()-1.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb(Index))
 q
]]></Implementation>
</Method>

<Method name="EnabledGet">
<Description>
Method for getting 'Enabled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Enabled")
 q tmp
]]></Implementation>
</Method>

<Method name="EnabledSet">
<Description>
Method for setting 'Enabled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Enabled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetItem">
<Description>
Returns oref of the subitem specified by its Index. Index may be an integer from 0 to Count()-1.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMMenuItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItem",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="GroupIndexGet">
<Description>
Method for getting 'GroupIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GroupIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="GroupIndexSet">
<Description>
Method for setting 'GroupIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GroupIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HasParent">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("HasParent",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintGet">
<Description>
Method for getting 'Hint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Hint")
 q tmp
]]></Implementation>
</Method>

<Method name="HintSet">
<Description>
Method for setting 'Hint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Hint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImageIndexGet">
<Description>
Method for getting 'ImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("ImageIndex")
]]></Implementation>
</Method>

<Method name="ImageIndexSet">
<Description>
Method for setting 'ImageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IndexOf">
<Description>
Returns index of the menu item specified by its oref.
</Description>
<FormalSpec>Item:%TMMenuItem</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IndexOf",$lb(Item.Address))
 q tmp
]]></Implementation>
</Method>

<Method name="InitiateAction">
<Description>
If the menu item has an association with an action link, updates this link, otherwise does nothing.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InitiateAction",$lb())
 q
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Inserts the subitem specified by its oref to the menu item after the item with specified Index.
</Description>
<FormalSpec>Index:%Integer,Item:%TMMenuItem</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Insert",$lb(Index,Item.Address))
 q
]]></Implementation>
</Method>

<Method name="MenuIndexGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("MenuIndex")
]]></Implementation>
</Method>

<Method name="MenuIndexSet">
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MenuIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickSet">
<Description>
Method for setting 'OnClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClick=Value
 d ##this.SetEvent("OnClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentMenuGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(##this.GetProperty("ParentMenu"))
]]></Implementation>
</Method>

<Method name="RadioItemGet">
<Description>
Method for getting 'RadioItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RadioItem")
 q tmp
]]></Implementation>
</Method>

<Method name="RadioItemSet">
<Description>
Method for setting 'RadioItem' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RadioItem",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Remove">
<Description>
Deletes the item specified by its oref (with all its subitems) from menu.
</Description>
<FormalSpec>Item:%TMMenuItem</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Remove",$lb(Item.Address))
 q
]]></Implementation>
</Method>

<Method name="ShortCutGet">
<Description>
Method for getting 'ShortCut' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShortCut")
 q tmp
]]></Implementation>
</Method>

<Method name="ShortCutSet">
<Description>
Method for setting 'ShortCut' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShortCut",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnClick</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMNotebook">
<Description>
Represents the server-side image of a standard Windows notebook.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73333</TimeCreated>

<Property name="ActivePage">
<Description>
Contains the name of the active page.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPageChanged">
<Description>
Handler of event occuring when another page becomes active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PageIndex">
<Description>
Contains the index of the active page.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Pages">
<Description>
Contains oref of %TMStrings object containing notebook pages.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Pages.%Close()")
 $$$GENERATE(" s ##this.Pages=##class(%TMStrings).%New($lb(##this.Address,##this.GetProperty(""Pages"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActivePageGet">
<Description>
Method for getting 'ActivePage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ActivePage")
 q tmp
]]></Implementation>
</Method>

<Method name="ActivePageSet">
<Description>
Method for setting 'ActivePage' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ActivePage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMNotebook"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Pages.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pages,""Pages"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPageChangedGet">
<Description>
Method for getting 'OnPageChanged' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPageChanged
]]></Implementation>
</Method>

<Method name="OnPageChangedSet">
<Description>
Method for setting 'OnPageChanged' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPageChanged=Value
 d ##this.SetEvent("OnPageChanged",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageIndexGet">
<Description>
Method for getting 'PageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="PageIndexSet">
<Description>
Method for setting 'PageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnPageChanged</Value>
</Value>
<Value name="38">
<Value>Pages</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMNumberEdit">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73333</TimeCreated>

<Property name="AutoSelect">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BeepOnError">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ButtonHint">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ButtonWidth">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CheckOnExit">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ClickKey">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DecimalPlaces">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DirectInput">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DisplayFormat">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FormatOnEditing">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GlyphKind">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",gkCustom,gkDefault,gkDropDown,gkEllipsis"/>
</Property>

<Property name="HideSelection">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxLength">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxValue">
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinValue">
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="NumGlyphs">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnButtonClick">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PopupAlign">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",epaRight,epaLeft"/>
</Property>

<Property name="ReadOnly">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Value">
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ZeroEmpty">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="AutoSelectGet">
<Description>
Method for getting 'AutoSelect' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSelectSet">
<Description>
Method for setting 'AutoSelect' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeepOnErrorGet">
<Description>
Method for getting 'BeepOnError' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BeepOnError")
 q tmp
]]></Implementation>
</Method>

<Method name="BeepOnErrorSet">
<Description>
Method for setting 'BeepOnError' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BeepOnError",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ButtonHintGet">
<Description>
Method for getting 'ButtonHint' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ButtonHint")
 q tmp
]]></Implementation>
</Method>

<Method name="ButtonHintSet">
<Description>
Method for setting 'ButtonHint' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ButtonHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ButtonWidthGet">
<Description>
Method for getting 'ButtonWidth' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ButtonWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ButtonWidthSet">
<Description>
Method for setting 'ButtonWidth' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ButtonWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckOnExitGet">
<Description>
Method for getting 'CheckOnExit' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CheckOnExit")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckOnExitSet">
<Description>
Method for setting 'CheckOnExit' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CheckOnExit",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMNumberEdit"
]]></Implementation>
</Method>

<Method name="ClickKeyGet">
<Description>
Method for getting 'ClickKey' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClickKey")
 q tmp
]]></Implementation>
</Method>

<Method name="ClickKeySet">
<Description>
Method for setting 'ClickKey' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ClickKey",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DecimalPlacesGet">
<Description>
Method for getting 'DecimalPlaces' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DecimalPlaces")
 q tmp
]]></Implementation>
</Method>

<Method name="DecimalPlacesSet">
<Description>
Method for setting 'DecimalPlaces' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DecimalPlaces",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DirectInputGet">
<Description>
Method for getting 'DirectInput' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DirectInput")
 q tmp
]]></Implementation>
</Method>

<Method name="DirectInputSet">
<Description>
Method for setting 'DirectInput' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DirectInput",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DisplayFormatGet">
<Description>
Method for getting 'DisplayFormat' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DisplayFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="DisplayFormatSet">
<Description>
Method for setting 'DisplayFormat' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DisplayFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FormatOnEditingGet">
<Description>
Method for getting 'FormatOnEditing' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FormatOnEditing")
 q tmp
]]></Implementation>
</Method>

<Method name="FormatOnEditingSet">
<Description>
Method for setting 'FormatOnEditing' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FormatOnEditing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GlyphKindGet">
<Description>
Method for getting 'GlyphKind' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GlyphKind")
 q tmp
]]></Implementation>
</Method>

<Method name="GlyphKindSet">
<Description>
Method for setting 'GlyphKind' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GlyphKind",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLengthGet">
<Description>
Method for getting 'MaxLength' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxLength")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxLengthSet">
<Description>
Method for setting 'MaxLength' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxValueGet">
<Description>
Method for getting 'MaxValue' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxValue")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxValueSet">
<Description>
Method for setting 'MaxValue' property
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxValue",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinValueGet">
<Description>
Method for getting 'MinValue' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinValue")
 q tmp
]]></Implementation>
</Method>

<Method name="MinValueSet">
<Description>
Method for setting 'MinValue' property
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinValue",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NumGlyphsGet">
<Description>
Method for getting 'NumGlyphs' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("NumGlyphs")
 q tmp
]]></Implementation>
</Method>

<Method name="NumGlyphsSet">
<Description>
Method for setting 'NumGlyphs' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("NumGlyphs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnButtonClickGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnButtonClick
]]></Implementation>
</Method>

<Method name="OnButtonClickSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnButtonClick=Value
 d ##this.SetEvent("OnButtonClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChageGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PopupAlignGet">
<Description>
Method for getting 'PopupAlign' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PopupAlign")
 q tmp
]]></Implementation>
</Method>

<Method name="PopupAlignSet">
<Description>
Method for setting 'PopupAlign' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PopupAlign",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ValueGet">
<Description>
Method for getting 'Value' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Value")
 q tmp
]]></Implementation>
</Method>

<Method name="ValueSet">
<Description>
Method for setting 'Value' property
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Value",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ZeroEmptyGet">
<Description>
Method for getting 'ZeroEmpty' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ZeroEmpty")
 q tmp
]]></Implementation>
</Method>

<Method name="ZeroEmptySet">
<Description>
Method for setting 'ZeroEmpty' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ZeroEmpty",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnButtonClick</Value>
</Value>
<Value name="38">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMOleContainer">
<Description>
%TMOleContainer is not an OLE object. It just contains such an object and gives OLE server interface of allocation and executes mediatory functions for OLE object transmission between server and form where it is allocated.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73334</TimeCreated>

<Property name="AllowActiveDoc">
<Description>
If set to "True", OLE container supports both 'IOleDocumentSite' and 'IOleClientSite' interfaces.
If set to "False", 'IOleDocumentSite' interface is not supported.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AllowInPlace">
<Description>
Determines, should the object be activated in place (if set to "True") or in a new window (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutoActivate">
<Description><![CDATA[
Determines the possible way of object activation. Possible values:<br>
"aaManual" - by calling the 'DoVerb' method (verb "ovShow");<br>
"aaGetFocus" - by getting focus by the container;<br>
"aaDoubleClick" - by double click on the container or pressing 'Enter' key when the container has focus;<br>
Default value: ""aaDoubleClick".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",aaManual,aaGetFocus,aaDoubleClick"/>
</Property>

<Property name="AutoVerbMenu">
<Description>
Determines, should the OLE container automatically create popup menu with allowed verbs (if set to "True") or leave popup menu unchanged (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BLOB">
<Description>
Setting this property results in loading OLE object from the global ^BLOB with given index.
See description of the 'SaveToBLOB' method.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BorderStyle">
<Description>
Determines, should a single-line border be drawn around the container (if set to "bsSingle")
or not (if set to "bsNone").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="CanPaste">
<Description>
Contains "True" if the clipboard contains OLE object which can be pasted to the container,
otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CopyOnSave">
<Description>
Determines, should the object be saved directly to the target (if set to "False"), or through temporary copy, compressing redundant information (if set to "True"). Default value is "True".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Iconic">
<Description>
Determines, should the object be displayed as icon (if set to "True"), or as in the corresponding application (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Linked">
<Description>
Indicates, is the loaded object linked (if set to "True") or embedded (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Modified">
<Description>
Contains "True" if OLE object has been modified since it was loaded or this property set to "False",
otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="NewInserted">
<Description>
Contains "True" if the OLE object is created in this container, otherwise (if it was pasted or linked) - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ObjectVerbs">
<Description>
Contains oref of %TMString object with verbs allowed for current state of loaded OLE object.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="OldStreamFormat">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OleClassName">
<Description>
Read only, contains the class name of loaded OLE object.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnActivate">
<Description>
Handler of event occuring when loaded OLE object is activated.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDeactivate">
<Description>
Handler of event occuring when loaded OLE object is deactivated.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnObjectMove">
<Description>
Handler of event occuring when loaded OLE object is resized or moved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PrimaryVerb">
<Description>
Determines the index of default verb for loaded OLE object.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SizeMode">
<Description><![CDATA[
Determines the mode of OLE object sizing. Possible values:<br>
"smClip" - use original size, clip all that don't fit the container area;<br>
"smCenter" - center OLE object in the container, use original size;<br>
"smScale" - stretch OLE object proportionally to fit the container area;<br>
"smStretch" - stretch without keeping proportions;<br>
"smAutoSize" - resize container to display OLE object at original size;<br>
Default value: "smClip".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",smClip,smCenter,smScale,smStretch,smAutoSize"/>
</Property>

<Property name="SourceDoc">
<Description>
Contains the name of source document for linked OLE object, or empty string for embedded.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="State">
<Description><![CDATA[
Indicates state of object in the OLE container. Possible values:<br>
"osEmpty" - container is empty;<br>
"osLoaded" - object is loaded, corresponding application is not running;<br>
"osRunning" - object is loaded, corresponding application is running;<br>
"osOpen" - object is activated in a new window;<br>
"osInPlaceActive" - intermediate state while inplace activating;<br>
"osUIActive" - object is activated in place.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",osEmpty,osLoaded,osRunning,osOpen,osInPlaceActive,osUIActive"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.ObjectVerbs.%Close()")
 $$$GENERATE(" s ##this.ObjectVerbs=##class(%TMStrings).%New($lb(##this.Address,0,""ObjectVerbs""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowActiveDocGet">
<Description>
Method for getting 'AllowActiveDoc' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowActiveDoc")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowActiveDocSet">
<Description>
Method for setting 'AllowActiveDoc' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllowActiveDoc",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowInPlaceGet">
<Description>
Method for getting 'AllowInPlace' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowInPlace")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowInPlaceSet">
<Description>
Method for setting 'AllowInPlace' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllowInPlace",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoActivateGet">
<Description>
Method for getting 'AutoActivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoActivate")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoActivateSet">
<Description>
Method for setting 'AutoActivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoActivate",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoVerbMenuGet">
<Description>
Method for getting 'AutoVerbMenu' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoVerbMenu")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoVerbMenuSet">
<Description>
Method for setting 'AutoVerbMenu' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoVerbMenu",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BLOBGet">
<Description>
Method for getting 'BLOB' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BLOB")
 q tmp
]]></Implementation>
</Method>

<Method name="BLOBSet">
<Description>
Method for setting 'BLOB' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BLOB",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CanPasteGet">
<Description>
Method for getting 'CanPaste' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CanPaste")
 q tmp
]]></Implementation>
</Method>

<Method name="CanPasteSet">
<Description>
Method for setting 'CanPaste' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CanPaste",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ChangeIconDialog">
<Description>
Enables icon selecting modal dialog for already loaded OLE object. Returns "True" if the dialog
box was successfully displayed and user clicked 'OK' button, otherwise - "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ChangeIconDialog",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMOleContainer"
]]></Implementation>
</Method>

<Method name="CloseObject">
<Description>
Deactivates loaded OLE object, saves changes and terminates corresponding application.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CloseObject",$lb())
 q
]]></Implementation>
</Method>

<Method name="Copy">
<Description>
Copies loaded OLE object to the clipboard.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Copy",$lb())
 q
]]></Implementation>
</Method>

<Method name="CopyOnSaveGet">
<Description>
Method for getting 'CopyOnSave' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CopyOnSave")
 q tmp
]]></Implementation>
</Method>

<Method name="CopyOnSaveSet">
<Description>
Method for setting 'CopyOnSave' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CopyOnSave",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CreateObject">
<Description>
Creates embedded OLE object with specified OleClassName. The 'Iconic' parameter determines,
should the object be displayed as icon (if set to "True"), or as in the corresponding application (if set to "False"). Previously loaded OLE object, if any, will be destroyed without saving changes.
</Description>
<FormalSpec>OleClassName:%String,Iconic:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CreateObject",$lb(OleClassName,Iconic))
 q
]]></Implementation>
</Method>

<Method name="DestroyObject">
<Description>
Destroys OLE object without saving changes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DestroyObject",$lb())
 q
]]></Implementation>
</Method>

<Method name="DoVerb">
<Description>
Performs action specified by the index of string in 'ObjectVerbs' property with the OLE object.
</Description>
<FormalSpec>Verb:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DoVerb",$lb(Verb))
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..ObjectVerbs.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..ObjectVerbs,""ObjectVerbs"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="IconicGet">
<Description>
Method for getting 'Iconic' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Iconic")
 q tmp
]]></Implementation>
</Method>

<Method name="IconicSet">
<Description>
Method for setting 'Iconic' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Iconic",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InsertObjectDialog">
<Description>
Enables modal dialog selecting OLE object to be inserted into the container. Returns "True" if the dialog box was successfully displayed and user clicked 'OK' button, otherwise - "False".
Previously loaded OLE object, if any, will be destroyed without saving changes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InsertObjectDialog",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="LinkedGet">
<Description>
Method for getting 'Linked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Linked")
 q tmp
]]></Implementation>
</Method>

<Method name="LinkedSet">
<Description>
Method for setting 'Linked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Linked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LoadFromStream">
<Description>
Loads OLE object from Cache stream specified by its oref. Previously loaded OLE object,
if any, will be destroyed without saving changes.
</Description>
<FormalSpec>StreamOref:%AbstractStream</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromStream",$lb(+StreamOref))
 q
]]></Implementation>
</Method>

<Method name="ModifiedGet">
<Description>
Method for getting 'Modified' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Modified")
 q tmp
]]></Implementation>
</Method>

<Method name="ModifiedSet">
<Description>
Method for setting 'Modified' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Modified",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NewInsertedGet">
<Description>
Method for getting 'NewInserted' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("NewInserted")
 q tmp
]]></Implementation>
</Method>

<Method name="NewInsertedSet">
<Description>
Method for setting 'NewInserted' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("NewInserted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ObjectPropertiesDialog">
<Description>
Enables modal dialog to view and edit properties of loaded OLE object. Returns "True" if the dialog box was successfully displayed and user clicked 'OK' button, otherwise - "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ObjectPropertiesDialog",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="OldStreamFormatGet">
<Description>
Method for getting 'OldStreamFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OldStreamFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="OldStreamFormatSet">
<Description>
Method for setting 'OldStreamFormat' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OldStreamFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OleClassNameGet">
<Description>
Method for getting 'OleClassName' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OleClassName")
 q tmp
]]></Implementation>
</Method>

<Method name="OleClassNameSet">
<Description>
Method for setting 'OleClassName' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OleClassName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnActivateGet">
<Description>
Method for getting 'OnActivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnActivate
]]></Implementation>
</Method>

<Method name="OnActivateSet">
<Description>
Method for setting 'OnActivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnActivate=Value
 d ##this.SetEvent("OnActivate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDeactivateGet">
<Description>
Method for getting 'OnDeactivate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDeactivate
]]></Implementation>
</Method>

<Method name="OnDeactivateSet">
<Description>
Method for setting 'OnDeactivate' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDeactivate=Value
 d ##this.SetEvent("OnDeactivate",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnObjectMoveGet">
<Description>
Method for getting 'OnObjectMove' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnObjectMove
]]></Implementation>
</Method>

<Method name="OnObjectMoveSet">
<Description>
Method for setting 'OnObjectMove' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnObjectMove=Value
 d ##this.SetEvent("OnObjectMove",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Paste">
<Description>
Pastes OLE object from the clipboard to container as an embedded object.
Previously loaded OLE object, if any, will be destroyed without saving changes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Paste",$lb())
 q
]]></Implementation>
</Method>

<Method name="PasteSpecialDialog">
<Description>
Enables modal dialog selecting parameters of OLE object to be pasted: format, embedded or linked, iconized or displayed as in corresponding application and pastes it to container.
Returns "True" if the dialog box was successfully displayed and user clicked 'OK' button, otherwise - "False". Previously loaded OLE object, if any, will be destroyed without saving changes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PasteSpecialDialog",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="PrimaryVerbGet">
<Description>
Method for getting 'PrimaryVerb' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrimaryVerb")
 q tmp
]]></Implementation>
</Method>

<Method name="PrimaryVerbSet">
<Description>
Method for setting 'PrimaryVerb' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrimaryVerb",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SaveToBLOB">
<Description>
Saves the OLE object in the global ^BLOB with specified index.
</Description>
<FormalSpec>BLOBIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToBLOB",$lb(BLOBIndex))
 q
]]></Implementation>
</Method>

<Method name="SaveToStream">
<Description>
Saves OLE object into specified Cache stream.
</Description>
<FormalSpec>StreamOref:%AbstractStream</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToStream",$lb(+StreamOref))
 q
]]></Implementation>
</Method>

<Method name="SizeModeGet">
<Description>
Method for getting 'SizeMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SizeMode")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeModeSet">
<Description>
Method for setting 'SizeMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SizeMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SourceDocGet">
<Description>
Method for getting 'SourceDoc' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SourceDoc")
 q tmp
]]></Implementation>
</Method>

<Method name="SourceDocSet">
<Description>
Method for setting 'SourceDoc' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SourceDoc",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StateGet">
<Description>
Method for getting 'State' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("State")
 q tmp
]]></Implementation>
</Method>

<Method name="StateSet">
<Description>
Method for setting 'State' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("State",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateObject">
<Description>
Refreshes the loaded OLE object.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("UpdateObject",$lb())
 q
]]></Implementation>
</Method>

<Method name="UpdateVerbs">
<Description>
Refreshes the alllowed verbs list for the loaded OLE object. Called automatically while
first read of 'ObjectVerbs' property. Should be called when the verbs list may change due to
change of the OLE object state.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("UpdateVerbs",$lb())
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>ObjectVerbs</Value>
</Value>
<Value name="38">
<Value>OnActivate</Value>
</Value>
<Value name="39">
<Value>OnDeactivate</Value>
</Value>
<Value name="40">
<Value>OnObjectMove</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMOleObject">
<Description>
Provides interface to a client's OLE objects.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73334</TimeCreated>

<Property name="Locale">
<Description>
Represents client's locale identifier.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Value">
<Description>
Buffer variable for some methods.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..Destroy()
 q $$$OK
]]></Implementation>
</Method>

<Method name="AssignIDispatch">
<Description>
Assigns a class instance to the specified embedded OLE object. Parameter of this method may be obtained as a result of 'GetOleProperty' method call. Sets $li(..Value,2) to $$$varDispatch if successful.
</Description>
<FormalSpec>Source:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("AssignIDispatch",$LB(Source))
 q
]]></Implementation>
</Method>

<Method name="AssignOleContainer">
<FormalSpec>OleContainerOREF:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("AssignOleContainer",$lb(OleContainerOREF.Address))
 q
]]></Implementation>
</Method>

<Method name="CallOleFunction">
<Description>
Calls OLE function with specified name and parameters.
Params is $LB() of function parameters. Each function parameter is $LB(ParamValue,ParamType),
where possible values of ParamType are specified in %Const.INC as $$$varXXX.
</Description>
<FormalSpec>Name:%String,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 q ..RunMethod("CallOleFunction",$LB(Name,Params))
]]></Implementation>
</Method>

<Method name="CallOleFunctionByID">
<Description>
Calls OLE function by Index with specified parameters.
Params is $LB() of function parameters. Each function parameter is $LB(ParamValue,ParamType),
where possible values of ParamType are specified in %Const.INC as $$$varXXX.
</Description>
<FormalSpec>Index:%Integer,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 q ..RunMethod("CallOleFunctionByID",$LB(Index,Params))
]]></Implementation>
</Method>

<Method name="CallOleFunctionNamedParams">
<Description>
Calls OLE function with specified name and parameters.
Params is $LB() of function parameters. Each function parameter is $LB(ParamValue,ParamType),
where possible values of ParamType are specified in %Const.INC as $$$varXXX. Names is $LB() of corresponding parameter names.
</Description>
<FormalSpec>Name:%String,Params:%String,Names:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("CallOleFunctionNamedParams",$LB(Name,Params,Names))
]]></Implementation>
</Method>

<Method name="CallOleFunctionNoParams">
<Description>
Calls OLE function with specified name without parameters.
</Description>
<FormalSpec>Name:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("CallOleFunctionNoParams",$LB(Name))
]]></Implementation>
</Method>

<Method name="CallOleFunctionNoParamsByID">
<Description>
Calls OLE function with specified index without parameters.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..RunMethod("CallOleFunctionNoParamsByID",$LB(Index))
]]></Implementation>
</Method>

<Method name="CallOleProcedure">
<Description>
Executes OLE procedure with specified name and parameters.
Params is $LB() of procedure parameters. Each procedure parameter is $LB(ParamValue,ParamType),
where possible values of ParamType are specified in %Const.INC as $$$varXXX.
</Description>
<FormalSpec>Name:%String,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 d ..RunMethod("CallOleProcedure",$LB(Name,Params))
 q
]]></Implementation>
</Method>

<Method name="CallOleProcedureByID">
<Description>
Executes OLE procedure with specified index and parameters.
Params is $LB() of procedure parameters. Each procedure parameter is $LB(ParamValue,ParamType),
where possible values of ParamType are specified in %Const.INC as $$$varXXX.
</Description>
<FormalSpec>Index:%Integer,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 d ..RunMethod("CallOleProcedureByID",$LB(Index,Params))
 q
]]></Implementation>
</Method>

<Method name="CallOleProcedureNamedParams">
<Description>
Calls OLE procedure with specified name and parameters.
Params is $LB() of function parameters. Each function parameter is $LB(ParamValue,ParamType),
where possible values of ParamType are specified in %Const.INC as $$$varXXX. Names is $LB() of corresponding parameter names.
</Description>
<FormalSpec>Name:%String,Params:%String,Names:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("CallOleProcedureNamedParams",$LB(Name,Params,Names))
 q
]]></Implementation>
</Method>

<Method name="CallOleProcedureNoParamsByID">
<Description>
Executes OLE procedure with specified index without parameters.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("CallOleProcedureNoParamsByID",$LB(Index))
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMOleObject"
]]></Implementation>
</Method>

<Method name="CreateObject">
<Description>
Creates new OLE object using specified OLE class name. Sets $li(..Value,2) to $$$varDispatch if successful.
</Description>
<FormalSpec>ClassName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("CreateObject",$LB(ClassName))
 q
]]></Implementation>
</Method>

<Method name="GetActiveObject">
<Description>
Searches available active OLE object with specified OLE class name and attaches to it. Sets $li(..Value,2) to $$$varDispatch if successful.
</Description>
<FormalSpec>ClassName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("GetActiveObject",$LB(ClassName))
 q
]]></Implementation>
</Method>

<Method name="GetOleProperty">
<Description><![CDATA[
Returns the value of specified property. Params is $LB() of optional parameters. Each parameter is $LB(ParamValue,ParamType), where possible values of ParamType are specified in %Const.INC as $$$varXXX. For example, the value of Excel cell may be obtained as:<br>
..GetOleProperty("Cells",$lb($lb((col,$$$varInteger),$lb((row,$$$varInteger)))
]]></Description>
<FormalSpec>PropertyName:%String,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 q ..RunMethod("GetOleProperty",$LB(PropertyName,Params))
]]></Implementation>
</Method>

<Method name="GetOlePropertyByID">
<Description>
Returns the value of property specified by index.
</Description>
<FormalSpec>Index:%Integer,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 q ..RunMethod("GetOlePropertyByID",$lb(Index,Params))
]]></Implementation>
</Method>

<Method name="LocaleGet">
<Description>
Method for getting 'Locale' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Locale")
 q tmp
]]></Implementation>
</Method>

<Method name="LocaleSet">
<Description>
Method for setting 'Locale' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Locale",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetOleProperty">
<Description><![CDATA[
Assigns the value of specified property. Params is $LB() of optional parameters. Each parameter is $LB(ParamValue,ParamType), where possible values of ParamType are specified in %Const.INC as $$$varXXX. For example, to put text string into Excel cell use:<br>
..SetOleProperty("Cells",$lb(text,$$$varOleStr),$lb($lb((col,$$$varInteger),$lb((row,$$$varInteger)))
]]></Description>
<FormalSpec>Name:%String,Value:%String,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 d ..RunMethod("SetOleProperty",$LB(Name,Value,Params))
 q
]]></Implementation>
</Method>

<Method name="SetOlePropertyByID">
<Description>
Assigns the value of property specified by index.
</Description>
<FormalSpec>Index:%Integer,Value:%String,Params:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s:'$D(Params) Params=$LB()
 d ..RunMethod("SetOlePropertyByID",$LB(Index,Value,Params))
 q
]]></Implementation>
</Method>

<Method name="ValueGet">
<Description>
Method for getting 'Value' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Value")
 q tmp
]]></Implementation>
</Method>

<Method name="ValueSet">
<Description>
Method for setting 'Value' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Value",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMOpenDialog">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73334</TimeCreated>

<Property name="Ctl3D">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultExt">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FileEditStyle">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fsEdit,fsComboBox"/>
</Property>

<Property name="FileName">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Files">
<Type>%Library.TMStrings</Type>
</Property>

<Property name="Filter">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FilterIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="InitialDir">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCanClose">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFolderChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectionChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnTypeChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(ofReadOnly,ofOverwritePrompt,ofHideReadOnly,ofNoChangeDir,ofShowHelp,ofNoValidate,ofAllowMultiSelect,ofExtensionDifferent,ofPathMustExist,ofFileMustExist,ofCreatePrompt,ofShareAware,ofNoReadOnlyReturn,ofNoTestFileCreate,ofNoNetworkButton,ofNoLongNames,ofOldStyleDialog,ofNoDereferenceLinks,ofEnableIncludeNotify,ofEnableSizing)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Title">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Files.%Close()")
 $$$GENERATE(" s ..Files=##class(%TMStrings).%New($lb(..Address,0,""Files""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMOpenDialog"
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultExtGet">
<Description>
Method for getting 'DefaultExt' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultExt")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultExtSet">
<Description>
Method for setting 'DefaultExt' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultExt",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Execute">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Execute",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="FileEditStyleGet">
<Description>
Method for getting 'FileEditStyle' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FileEditStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="FileEditStyleSet">
<Description>
Method for setting 'FileEditStyle' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FileEditStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FileNameGet">
<Description>
Method for getting 'FileName' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FileName")
 q tmp
]]></Implementation>
</Method>

<Method name="FileNameSet">
<Description>
Method for setting 'FileName' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FileName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FilterGet">
<Description>
Method for getting 'Filter' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Filter")
 q tmp
]]></Implementation>
</Method>

<Method name="FilterIndexGet">
<Description>
Method for getting 'FilterIndex' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FilterIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="FilterIndexSet">
<Description>
Method for setting 'FilterIndex' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FilterIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FilterSet">
<Description>
Method for setting 'Filter' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Filter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Files.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Files,""Files"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InitialDirGet">
<Description>
Method for getting 'InitialDir' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("InitialDir")
 q tmp
]]></Implementation>
</Method>

<Method name="InitialDirSet">
<Description>
Method for setting 'InitialDir' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("InitialDir",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCanCloseGet">
<Description>
Method for getting 'OnCanClose' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCanClose
]]></Implementation>
</Method>

<Method name="OnCanCloseSet">
<Description>
Method for setting 'OnCanClose' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCanClose=Value
 d ##this.SetEvent("OnCanClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFolderChangeGet">
<Description>
Method for getting 'OnFolderChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFolderChange
]]></Implementation>
</Method>

<Method name="OnFolderChangeSet">
<Description>
Method for setting 'OnFolderChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFolderChange=Value
 d ##this.SetEvent("OnFolderChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectionChangeGet">
<Description>
Method for getting 'OnSelectionChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectionChange
]]></Implementation>
</Method>

<Method name="OnSelectionChangeSet">
<Description>
Method for setting 'OnSelectionChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSelectionChange=Value
 d ##this.SetEvent("OnSelectionChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTypeChangeGet">
<Description>
Method for getting 'OnTypeChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTypeChange
]]></Implementation>
</Method>

<Method name="OnTypeChangeSet">
<Description>
Method for setting 'OnTypeChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTypeChange=Value
 d ##this.SetEvent("OnTypeChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleGet">
<Description>
Method for getting 'Title' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Title")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSet">
<Description>
Method for setting 'Title' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Title",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Files</Value>
</Value>
<Value name="9">
<Value>OnCanClose</Value>
</Value>
<Value name="10">
<Value>OnClose</Value>
</Value>
<Value name="11">
<Value>OnFolderChange</Value>
</Value>
<Value name="12">
<Value>OnSelectionChange</Value>
</Value>
<Value name="13">
<Value>OnShow</Value>
</Value>
<Value name="14">
<Value>OnTypeChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPage">
<Description>
For internal use. Necessary for %TMNoteBook methods.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73335</TimeCreated>

<Property name="Caption">
<Description>
Contains the text of the page caption.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPage"
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMPageControl">
<Description>
Represents the client-side image of a Windows multipage dialog. Every page of this dialog is a %TMTabSheet object. To include existing page to a %TMPageControl object just set the page Parent property to the %TMPageControl oref.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73335</TimeCreated>

<Property name="ActivePage">
<Description>
Contains oref of the currenly active page.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas which methods can be used to draw customized tabs and pages.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="HotTrack">
<Description>
If set to "True", the tabs under the mouse cursor will be highlighted, otherwise - not.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Images">
<Description>
Contains oref of the %TMImageList object with the images to be displayed on the tabs.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MultiLine">
<Description>
If set to "True", the tabs may be displayed in more than one row if necessary. Otherwise, the all tabs may occupy a single row only.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when another page has been selected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChanging">
<Description>
Handler of event occuring when the currenlty active page is about to be switched, giving opportunity to protect page from unwanted switching by setting the AllowChange handler parameter to "False".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawTab">
<Description>
Handler of event occuring when the tab is about to be displayed and the OwnerDraw property is set to "True", giving opportunity to draw customized tabs.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetImageIndex">
<Description>
Handler of event occuring when the image corresponding to a tab is about to be displayed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OwnerDraw">
<Description>
If set to "True", allows the OnDrawTab event to be raised when a tab is about to be drawn.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PageCount">
<Description>
Contains the number of pages in this control.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RaggedRight">
<Description>
Determines, should the tabs rows to be stretched correspondingly with the control width. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollOpposite">
<Description>
If set to "True", the value of the TabPosistion property determines the direction in which deselected tabs row must be moved. Otherwise, the deselected row moves to the back of all other rows.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the tabs appearance. Possible values:<br>
"tsTabs" - usual tabs.<br>
"tsButtons" - 3D buttons.<br>
"tsFlatButtons" - flat buttons.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tsTabs,tsButtons,tsFlatButtons"/>
</Property>

<Property name="TabHeight">
<Description>
Determines the tabs vertical size (in pixels). If set to 0, the tabs height corresponds to there text height.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabPosition">
<Description>
Determines the control edge where the tabs will be drawn. Possible values: "tpTop", "tpBottom", "tpLeft" or "tpRight".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tpTop,tpBottom,tpLeft,tpRight"/>
</Property>

<Property name="TabWidth">
<Description>
Determines the tabs horizontal size (in pixels). If set to 0, the tabs height corresponds to there text width.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ActivePageGet">
<Description>
Method for getting 'ActivePage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("ActivePage"))
 q tmp
]]></Implementation>
</Method>

<Method name="ActivePageSet">
<Description>
Method for setting 'ActivePage' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i Value="" s tmp=""
 e  s tmp=Value.Address
 d ##this.SetProperty("ActivePage",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPageControl"
]]></Implementation>
</Method>

<Method name="FindNextPage">
<Description>
Returns oref of the next (if the GoForward parameter is set to "True") or previous (if the GoForward value is "False") page of the page control relative to the current page specified by its oref.page. The set of pages in considered as cyclic, i.e., the fist page is the next after the last one. If the CheckTabVisible is set to "True", pages with the TabVisible property set to "False" will be skipped.
</Description>
<FormalSpec>CurPage:%TMTabSheet,GoForward:%Boolean,CheckTabVisible:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTabSheet</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("FindNextPage",$lb(CurPage.Address,GoForward,CheckTabVisible)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetPage">
<Description>
Returns oref of the page specified by its index. Indexing, as usual, starts from 0.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTabSheet</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetPage",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="HotTrackGet">
<Description>
Method for getting 'HotTrack' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HotTrack")
 q tmp
]]></Implementation>
</Method>

<Method name="HotTrackSet">
<Description>
Method for setting 'HotTrack' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HotTrack",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImagesGet">
<Description>
Method for getting 'Images' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Images"))
 q tmp
]]></Implementation>
</Method>

<Method name="ImagesSet">
<Description>
Method for setting 'Images' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i Value="" s tmp=""
 e  s tmp=Value.Address
 d ##this.SetProperty("Images",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MultiLineGet">
<Description>
Method for getting 'MultiLine' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiLine")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiLineSet">
<Description>
Method for setting 'MultiLine' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiLine",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangingGet">
<Description>
Method for getting 'OnChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChanging
]]></Implementation>
</Method>

<Method name="OnChangingSet">
<Description>
Method for setting 'OnChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChanging=Value
 d ##this.SetEvent("OnChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawTabGet">
<Description>
Method for getting 'OnDrawTab' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawTab
]]></Implementation>
</Method>

<Method name="OnDrawTabSet">
<Description>
Method for setting 'OnDrawTab' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawTab=Value
 d ##this.SetEvent("OnDrawTab",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetImageIndexGet">
<Description>
Method for getting 'OnGetImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetImageIndex
]]></Implementation>
</Method>

<Method name="OnGetImageIndexSet">
<Description>
Method for setting 'OnGetImageIndex' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetImageIndex=Value
 d ##this.SetEvent("OnGetImageIndex",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OwnerDrawGet">
<Description>
Method for getting 'OwnerDraw' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OwnerDraw")
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerDrawSet">
<Description>
Method for setting 'OwnerDraw' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OwnerDraw",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageCountGet">
<Description>
Method for getting 'PageCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageCount")
 q tmp
]]></Implementation>
</Method>

<Method name="PageCountSet">
<Description>
Method for setting 'PageCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RaggedRightGet">
<Description>
Method for getting 'RaggedRight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RaggedRight")
 q tmp
]]></Implementation>
</Method>

<Method name="RaggedRightSet">
<Description>
Method for setting 'RaggedRight' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RaggedRight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollOppositeGet">
<Description>
Method for getting 'ScrollOpposite' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollOpposite")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollOppositeSet">
<Description>
Method for setting 'ScrollOpposite' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollOpposite",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectNextPage">
<Description>
Makes active the next (if the GoForward parameter is set to "True") or previous (if the GoForward value is "False") visible page of the page control relative to the currently active one. The set of pages in considered as cyclic, i.e., the fist page is the next after the last one.
</Description>
<FormalSpec>GoForward:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SelectNextPage",$lb(GoForward))
 q
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabHeightGet">
<Description>
Method for getting 'TabHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="TabHeightSet">
<Description>
Method for setting 'TabHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabPositionGet">
<Description>
Method for getting 'TabPosition' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabPosition")
 q tmp
]]></Implementation>
</Method>

<Method name="TabPositionSet">
<Description>
Method for setting 'TabPosition' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabPosition",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabWidthGet">
<Description>
Method for getting 'TabWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="TabWidthSet">
<Description>
Method for setting 'TabWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>Images</Value>
</Value>
<Value name="39">
<Value>OnChange</Value>
</Value>
<Value name="40">
<Value>OnChanging</Value>
</Value>
<Value name="41">
<Value>OnDrawTab</Value>
</Value>
<Value name="42">
<Value>OnGetImageIndex</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPaintBox">
<Description>
Represents the graphic control allowing application to draw images using canvas methods.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73335</TimeCreated>

<Property name="Canvas">
<Description>
Contains oref of canvas which may be used for drawing on this control from the OnPaint event handler.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="OnPaint">
<Description>
Handler of event occuring when painting is required.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,##this.GetProperty(""Canvas"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPaintBox"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPaintGet">
<Description>
Method for getting 'OnPaint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPaint
]]></Implementation>
</Method>

<Method name="OnPaintSet">
<Description>
Method for setting 'OnPaint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPaint=Value
 d ##this.SetEvent("OnPaint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Canvas</Value>
</Value>
<Value name="26">
<Value>OnPaint</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPanel">
<Description>
Represents the server-side image of a generic panel control. Contains methods and properties for manupulations with child controls embedded in the panel.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73335</TimeCreated>

<Property name="Alignment">
<Description>
Determines the caption alignment within the panel. Possible values: "taLeftJustify", "taRightJustify" or "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="BorderStyle">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FullRepaint">
<Description>
If set to "True", the entire panel together with all embedded controls will be repainted when the panel is resized.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Locked">
<Description>
If set to "True", prevents the panel from being replaced by a toolbar submitted by OLE server.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("BorderStyle")
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPanel"
]]></Implementation>
</Method>

<Method name="FullRepaintGet">
<Description>
Method for getting 'FullRepaint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FullRepaint")
 q tmp
]]></Implementation>
</Method>

<Method name="FullRepaintSet">
<Description>
Method for setting 'FullRepaint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FullRepaint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LockedGet">
<Description>
Method for getting 'Locked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Locked")
 q tmp
]]></Implementation>
</Method>

<Method name="LockedSet">
<Description>
Method for setting 'Locked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Locked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMParaAttributes">
<Description>
The set of properties and methods dealing with rich text paragraphs formatting.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73335</TimeCreated>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside this paragraph. Possible values: "taLeftJustify", "taRightJustify", "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="FirstIndent">
<Description>
Determines indent of the paragraph first line from the left margin (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LeftIndent">
<Description>
Determines indent of the paragraph from the left margin (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Numbering">
<Description><![CDATA[
Determines the numbering option for the paragraph. Possible values:<br>
"nsNone"	- no numbering;<br>
"nsBullet" - place bullets on the left from the paragraph.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",nsNone,nsBullet"/>
</Property>

<Property name="RightIndent">
<Description>
Determines indent of the paragraph from the right margin (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabCount">
<Description>
Contains number of tab stops in this paragraph.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMParaAttributes"
]]></Implementation>
</Method>

<Method name="FirstIndentGet">
<Description>
Method for getting 'FirstIndent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FirstIndent")
 q tmp
]]></Implementation>
</Method>

<Method name="FirstIndentSet">
<Description>
Method for setting 'FirstIndent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FirstIndent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetTabs">
<Description>
Returns position of tab stop specified by Index (in pixels).
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetTabs",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="LeftIndentGet">
<Description>
Method for getting 'LeftIndent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LeftIndent")
 q tmp
]]></Implementation>
</Method>

<Method name="LeftIndentSet">
<Description>
Method for setting 'LeftIndent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LeftIndent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NumberingGet">
<Description>
Method for getting 'Numbering' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Numbering")
 q tmp
]]></Implementation>
</Method>

<Method name="NumberingSet">
<Description>
Method for setting 'Numbering' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Numbering",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RightIndentGet">
<Description>
Method for getting 'RightIndent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RightIndent")
 q tmp
]]></Implementation>
</Method>

<Method name="RightIndentSet">
<Description>
Method for setting 'RightIndent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RightIndent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetTabs">
<Description>
Sets position of tab stop specified by its index (in pixels).
</Description>
<FormalSpec>Index:Integer,Value:Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetTabs",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="TabCountGet">
<Description>
Method for getting 'TabCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabCount")
 q tmp
]]></Implementation>
</Method>

<Method name="TabCountSet">
<Description>
Method for setting 'TabCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMPen">
<Description>
Represents the parameters of a pen used to draw lines and outline shapes.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73335</TimeCreated>

<Property name="Color">
<Description>
Determines the color used for drawing.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Mode">
<Description><![CDATA[
Determines the interference between the pen color and the canvas color. Possible values:<br>
"pmBlack" - only black.<br>
"pmWhite" - only white.<br>
"pmNop" - no action.<br>
"pmNot" - use inverted canvas background color.<br>
"pmCopy" - use color specified in Color property.<br>
"pmNotCopy" - use inverted pen color.<br>
"pmMergePenNot" - combine the pen color and inverted canvas background color.<br>
"pmMaskPenNot" - combine the colors common to both pen and inverted canvas background..<br>
"pmMergeNotPen" - combine the canvas background color and inverted pen color.<br>
"pmMaskNotPen" - combine colors common to both canvas background and inverted pen color.<br>
"pmMerge" - combine the pen color and canvas background color.<br>
"pmNotMerge" - inverted pmMerge.<br>
"pmMask" - combine colors common to both pen and canvas background.<br>
"pmNotMask" - inverted pmMask..<br>
"pmXor" - combine colors in the pen or canvas background, but not both..<br>
"pmNotXor" - inverted pmXor.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",pmBlack,pmWhite,pmNop,pmNot,pmCopy,pmNotCopy,pmMergePenNot,pmMaskPenNot,pmMergeNotPen,pmMaskNotPen,pmMerge,pmNotMerge,pmMask,pmNotMask,pmXor,pmNotXor"/>
</Property>

<Property name="Name">
<Description>
For interrnal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the pen properties change.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the drawn lines style. Possible values:<br>
"psSolid" - solid line.<br>
"psDash" - dashed line.<br>
"psDot" - dotted line.<br>
"psDashDot" - alternating dashes and dots.<br>
"psDashDotDot" - a sequence of dash-dot-dot combinations.<br>
"psClear" - no drawing.<br>
"psInsideFrame" - solid line of dithered color.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",psSolid,psDash,psDot,psDashDot,psDashDotDot,psClear,psInsideFrame"/>
</Property>

<Property name="Width">
<Description>
Determines the width drawn lines (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPen"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModeGet">
<Description>
Method for getting 'Mode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Mode")
 q tmp
]]></Implementation>
</Method>

<Method name="ModeSet">
<Description>
Method for setting 'Mode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Mode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 ; s i%Style=Value
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPersistent">
<Description>
The base class for all SMWrap objects. Its methods should not be called directly from applications.
</Description>
<ClassType>serial</ClassType>
<IncludeCode>%occInclude,%occTransaction</IncludeCode>
<IncludeGenerator>%occInclude,%occUtility</IncludeGenerator>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%SerialObject</Super>
<TimeCreated>64314,73336</TimeCreated>

<Property name="Address">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="CloseFromClient">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<InitialExpression>"False"</InitialExpression>
</Property>

<Property name="Parent">
<Description>
For internal use.
</Description>
<Type>%Library.Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PropName">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ;  initvalue=$lb(Parent,ClientAddress)
 n bd
 i initvalue="" q $$$OK
 s ##this.Parent=$lg(initvalue,1,0)
 i $lg(initvalue,2,0)=0  d
 . i $lg(initvalue,3,"")'=""  d
 . . s ..PropName=$lg(initvalue,3,"")
 . e  d
 . . s ..Address=$$CallBack^%ZMRASD($lb("no",##this.ClassName(),+##this.Parent,+##this))
 e  d
 . s ..Address=$lg(initvalue,2,0)
 . s bd=$$CallBack^%ZMRASD($lb("so",##this.Address,+##this))
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddressGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 q:i%Address i%Address
 q:..PropName="" 0
 s i%Address=$$CallBack^%ZMRASD($lb("gpso",..Parent,..PropName,+##this))
 q i%Address
]]></Implementation>
</Method>

<Method name="AddressSet">
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%Address=Value
 q $$$OK
]]></Implementation>
</Method>

<Method name="Assign">
<Description>
For internal use.
</Description>
<FormalSpec>Oref:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Assign",$lb(Oref.Address))
 q
]]></Implementation>
</Method>

<Method name="Bind">
<FormalSpec>Address:%Integer,ParentAddress:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s ##this.Parent=ParentAddress
 s ..Address=Address
 q

]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ""
]]></Implementation>
</Method>

<Method name="CreateControl">
<ClassMethod>1</ClassMethod>
<FormalSpec>Control:%String,Parent:%Integer,ParentAddress:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 q:ParentAddress=0 $lb(+Parent,+Control,"",Control.ClassName())_Control.GetBindString(Parent)
 q $lb(+Parent,+Control,ParentAddress,Control.ClassName())_Control.GetBindString(Parent)

]]></Implementation>
</Method>

<Method name="Destroy">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i ##this.Address'=0  d
 . s tmp=$$CallBack^%ZMRASD($lb("co",##this.Address))
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ""
]]></Implementation>
</Method>

<Method name="GetBuild">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; Software version
 q "3.2.0.3"
]]></Implementation>
</Method>

<Method name="GetObjOref">
<ClassMethod>1</ClassMethod>
<FormalSpec>IntOref:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 q:+IntOref=0 ""
 q $zobjref(+IntOref)
 ; q $G(%SMWOrefs(+IntOref),"")
]]></Implementation>
</Method>

<Method name="GetProperty">
<Description>
For internal use.
</Description>
<FormalSpec>ZMRpvtName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; q:i%Address="no" ""
 q $$CallBack^%ZMRASD($lb("gp",##this.Address,ZMRpvtName))
]]></Implementation>
</Method>

<Method name="HandleEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>ZMRpvtoref:%String,ZMRpvtmethod:%String,ZMRpvtargs:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 x "d ##class(%TMPersistent).GetObjOref(ZMRpvtoref)."_ZMRpvtmethod_"(.ZMRpvtargs)"
 q ZMRpvtargs
]]></Implementation>
</Method>

<Method name="RunMethod">
<Description>
For internal use.
</Description>
<FormalSpec>ZMRpvtName:%String,ZMRpvtParams:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ; q:i%Address="no" ""
 q $$CallBack^%ZMRASD($lb("rm",##this.Address,ZMRpvtName,ZMRpvtParams))
]]></Implementation>
</Method>

<Method name="SetEvent">
<Description>
For internal use.
</Description>
<FormalSpec>ZMRpvtName:%String,ZMRpvtOREF:%String,ZMRpvtMethodName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s:i%Address'="no" tmp=$$CallBack^%ZMRASD($lb("se",##this.Address,ZMRpvtName,+ZMRpvtOREF,ZMRpvtMethodName))
 q
]]></Implementation>
</Method>

<Method name="SetMultiProperty">
<Description>
For internal use only.
</Description>
<FormalSpec>Names:%String,Values:%String,References:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,i,send,Addr
 s Addr=..Address
 s i%Address="no"
 s send=$lb("cb",$ll(Names))
 f i=1:1:$ll(Names) d
 . n Value,ValueToSend
 . s Value=$s(($lg($g(References,""),i,0)=1):..GetObjOref($lg(Values,i)),1:$lg(Values,i))
 . s ValueToSend=Value
 . s:($lg($g(References,""),i,0)=1) ValueToSend=$S(+Value:Value.Address,1:0)
 . s $zObjProperty(##this,$lg(Names,i))=Value
 . s send=send_$lb($lb("sp",Addr,$lg(Names,i),ValueToSend))
 . k Value
 s i%Address=Addr
 s tmp=$$CallBack^%ZMRASD(send)
 q
]]></Implementation>
</Method>

<Method name="SetProperty">
<Description>
For internal use.
</Description>
<FormalSpec>ZMRpvtName:%String,ZMRpvtValue:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s:i%Address'="no" tmp=$$CallBack^%ZMRASD($lb("sp",##this.Address,ZMRpvtName,ZMRpvtValue))
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>TMPersistentState</State>
<StreamLocation>^%Library.TMPersistentS</StreamLocation>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>Tag</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPieOtherSlice">
<Description>
Allows to group small slices from the %TMPieSeries collection in single 'Other' slice.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73336</TimeCreated>

<Property name="Style">
<Description>
Determines, should the values or percentage limit slices to be grouped. Possible values: "poNone", "poBelowPercent", "poBelowValue".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",poNone,poBelowPercent,poBelowValue"/>
</Property>

<Property name="Text">
<Description>
Determines text label for the 'Other' slice.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Value">
<Description>
Determines the maximal value of slice to be grouped into the 'Other' slice.
</Description>
<Type>%Library.Float</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPieOtherSlice"
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextGet">
<Description>
Method for getting 'Text' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Text")
 q tmp
]]></Implementation>
</Method>

<Method name="TextSet">
<Description>
Method for setting 'Text' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Text",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ValueGet">
<Description>
Method for getting 'Value' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Float</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Value")
 q tmp
]]></Implementation>
</Method>

<Method name="ValueSet">
<Description>
Method for setting 'Value' property.
</Description>
<FormalSpec>Value:%Float</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Value",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMPieSeries">
<Description>
Represents chart data as a set of pie slices.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMChartSeries</Super>
<TimeCreated>64314,73336</TimeCreated>

<Property name="CircleBackColor">
<Description>
Determines the pie background color (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CircleHeight">
<Description>
Indicates the pie height (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CircleWidth">
<Description>
Indicates the pie width (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CircleXCenter">
<Description>
Indicates the horizontal screen coordinate of the pie center.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CircleYCenter">
<Description>
Indicates the vertical screen coordinate of the pie center.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Circled">
<Description>
Determines, should the pie be ellipse (if set to "False") or circle.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CustomXRadius">
<Description>
Determines horizontal pie radius (in pixels). If set to 0 (default value), the radius will be calculated automatically.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CustomYRadius">
<Description>
Determines vertical pie radius (in pixels). If set to 0 (default value), the radius will be calculated automatically.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Dark3D">
<Description>
If set to "True", the pie and slices edges will look like shadowed.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ExplodeBiggest">
<Description>
Allowes to explode biggest slice out from the pie.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OtherSlice">
<Description>
Contains oref of %TMPieOtherSlice object where small slices are united as "Other".
</Description>
<Type>%Library.TMPieOtherSlice</Type>
</Property>

<Property name="PiePen">
<Description>
Contains oref of %TMChartPen object used for the pie and slices outline.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="PieValues">
<Description>
Contains oref of %TMChartValueList object with slices sizes.
</Description>
<Type>%Library.TMChartValueList</Type>
</Property>

<Property name="RotationAngle">
<Description>
Determines the offset angle (in degrees).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UsePatterns">
<Description>
Determines, should the pie slices be filled using 6 different brush styles (if set to "True") or have the same brush style (if set to "False", default value).
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="XRadius">
<Description>
Readonly, indicates horizontal pie radius (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="YRadius">
<Description>
Readonly, indicates vertical pie radius (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" d ##class(=%TMChartSeries)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.PiePen.%Close()")
 $$$GENERATE(" s ##this.PiePen=##class(%TMChartPen).%New($lb(##this.Address,0,""PiePen""))")
 $$$GENERATE(" d ##this.PieValues.%Close()")
 $$$GENERATE(" s ##this.PieValues=##class(%TMChartValueList).%New($lb(##this.Address,0,""PieValues""))")
 $$$GENERATE(" d ##this.OtherSlice.%Close()")
 $$$GENERATE(" s ##this.OtherSlice=##class(%TMPieOtherSlice).%New($lb(##this.Address,0,""OtherSlice""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="CircleBackColorGet">
<Description>
Method for getting 'CircleBackColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CircleBackColor")
 q tmp
]]></Implementation>
</Method>

<Method name="CircleBackColorSet">
<Description>
Method for setting 'CircleBackColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CircleBackColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CircleHeightGet">
<Description>
Method for getting 'CircleHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CircleHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="CircleHeightSet">
<Description>
Method for setting 'CircleHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CircleHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CircleWidthGet">
<Description>
Method for getting 'CircleWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CircleWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="CircleWidthSet">
<Description>
Method for setting 'CircleWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CircleWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CircleXCenterGet">
<Description>
Method for getting 'CircleXCenter' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CircleXCenter")
 q tmp
]]></Implementation>
</Method>

<Method name="CircleXCenterSet">
<Description>
Method for setting 'CircleXCenter' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CircleXCenter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CircleYCenterGet">
<Description>
Method for getting 'CircleYCenter' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CircleYCenter")
 q tmp
]]></Implementation>
</Method>

<Method name="CircleYCenterSet">
<Description>
Method for setting 'CircleYCenter' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CircleYCenter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CircledGet">
<Description>
Method for getting 'Circled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Circled")
 q tmp
]]></Implementation>
</Method>

<Method name="CircledSet">
<Description>
Method for setting 'Circled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Circled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPieSeries"
]]></Implementation>
</Method>

<Method name="CustomXRadiusGet">
<Description>
Method for getting 'CustomXRadius' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CustomXRadius")
 q tmp
]]></Implementation>
</Method>

<Method name="CustomXRadiusSet">
<Description>
Method for setting 'CustomXRadius' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CustomXRadius",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CustomYRadiusGet">
<Description>
Method for getting 'CustomYRadius' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CustomYRadius")
 q tmp
]]></Implementation>
</Method>

<Method name="CustomYRadiusSet">
<Description>
Method for setting 'CustomYRadius' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CustomYRadius",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Dark3DGet">
<Description>
Method for getting 'Dark3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Dark3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Dark3DSet">
<Description>
Method for setting 'Dark3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Dark3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ExplodeBiggestGet">
<Description>
Method for getting 'ExplodeBiggest' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("ExplodeBiggest")
]]></Implementation>
</Method>

<Method name="ExplodeBiggestSet">
<Description>
Mehod for setting 'ExplodeBiggest' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ExplodeBiggest",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMChartSeries")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMChartSeries")
 e  $$$GENERATE(" s result=##class(=%TMChartSeries)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..OtherSlice.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..OtherSlice,""OtherSlice"","""")_result")
 $$$GENERATE(" s result=result_..PiePen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..PiePen,""PiePen"","""")_result")
 $$$GENERATE(" s result=result_..PieValues.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..PieValues,""PieValues"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetExplodedSlice">
<Description>
Returns the value of exploded slice specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetExplodedSlice",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="Rotate">
<Description>
Increments the 'RotationAngle' property by specified value, turning the image.
</Description>
<FormalSpec>Angle:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Rotate",$lb(Angle))
 q
]]></Implementation>
</Method>

<Method name="RotationAngleGet">
<Description>
Method for getting 'RotationAngle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RotationAngle")
 q tmp
]]></Implementation>
</Method>

<Method name="RotationAngleSet">
<Description>
Method for setting 'RotationAngle' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RotationAngle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetExplodedSlice">
<Description>
Modifies the value of exploded slice specified by its index.
</Description>
<FormalSpec>Index:%Integer,Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetExplodedSlice",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="UsePatternsGet">
<Description>
Method for getting 'UsePatterns' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UsePatterns")
 q tmp
]]></Implementation>
</Method>

<Method name="UsePatternsSet">
<Description>
Method for setting 'UsePatterns' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("UsePatterns",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="XRadiusGet">
<Description>
Method for getting 'XRadius' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("XRadius")
 q tmp
]]></Implementation>
</Method>

<Method name="XRadiusSet">
<Description>
Method for setting 'XRadius' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("XRadius",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="YRadiusGet">
<Description>
Method for getting 'YRadius' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("YRadius")
 q tmp
]]></Implementation>
</Method>

<Method name="YRadiusSet">
<Description>
Method for setting 'YRadius' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("YRadius",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>AfterDrawValues</Value>
</Value>
<Value name="9">
<Value>BeforeDrawValues</Value>
</Value>
<Value name="10">
<Value>DataSource</Value>
</Value>
<Value name="11">
<Value>Marks</Value>
</Value>
<Value name="12">
<Value>OnAfterAdd</Value>
</Value>
<Value name="13">
<Value>OnBeforeAdd</Value>
</Value>
<Value name="14">
<Value>OnClearValues</Value>
</Value>
<Value name="15">
<Value>OnClick</Value>
</Value>
<Value name="16">
<Value>OnDblClick</Value>
</Value>
<Value name="17">
<Value>OnGetMarkText</Value>
</Value>
<Value name="18">
<Value>ParentChart</Value>
</Value>
<Value name="19">
<Value>XLabelsSource</Value>
</Value>
<Value name="20">
<Value>XValues</Value>
</Value>
<Value name="21">
<Value>XYValues</Value>
</Value>
<Value name="22">
<Value>YValues</Value>
</Value>
<Value name="23">
<Value>OtherSlice</Value>
</Value>
<Value name="24">
<Value>PiePen</Value>
</Value>
<Value name="25">
<Value>PieValues</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPointSeries">
<Description>
This class is derived from %TMCustomSeries and represents a series as a number of pointers.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMCustomSeries</Super>
<TimeCreated>64314,73336</TimeCreated>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPointSeries"
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMPopupMenu">
<Description>
Represents the server-side image of a menu, appearing when a control with assigned PopupMenu property is right-clicked.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73336</TimeCreated>

<Property name="Alignment">
<Description><![CDATA[
Determines the position of the popup menu relative to the mouse cusror. Possible values:<br>
"paLeft" -	top left corner of menu at the mouse cursor position (default value).<br>
"paCenter" - center of menu at the mouse cursor position.<br>
"paRight" - top right corner of menu at the mouse cursor position.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",paLeft,paRight,paCenter"/>
</Property>

<Property name="AutoPopup">
<Description>
If set to "True", the menu brings up when the corresponding control is right-clicked. Otherwise the direct call of the Popup method is necessary to make menu visible.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this menu.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Images">
<Description>
Contains oref of %TMImageList object with images for the menu items.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Items">
<Description>
Contains oref of the abstract root menu item, providing access to %TMMenuItem methods necessary to add, insert or delete top-level menu items.
</Description>
<Type>%Library.TMMenuItem</Type>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the menu structure is changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPopup">
<Description>
Handler of event occuring when the popup menu is to appear.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PopupComponent">
<Description>
Contains oref of the control last called the popup menu.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMMenuItem).%New($lb(..Address,..GetProperty(""Items"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoPopupGet">
<Description>
Method for getting 'AutoPopup' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoPopup")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoPopupSet">
<Description>
Method for setting 'AutoPopup' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoPopup",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPopupMenu"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetItems">
<Description>
Returns oref of the %TMMenuItem object specified by the Index parameter, or empty string, if required item is absent.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMMenuItem</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItems",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImagesGet">
<Description>
Method for getting 'Images' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(##this.GetProperty("Images"))
]]></Implementation>
</Method>

<Method name="ImagesSet">
<Description>
Method for setting 'Images' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Images",$s(+Value:Value.Address,1:""))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPopupGet">
<Description>
Method for getting 'OnPopup' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPopup
]]></Implementation>
</Method>

<Method name="OnPopupSet">
<Description>
Method for setting 'OnPopup' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPopup=Value
 d ##this.SetEvent("OnPopup",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="Popup">
<Description>
Forces the popup menu to appear at the specified screen coordinates.
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Popup",$lb(X,Y))
 q
]]></Implementation>
</Method>

<Method name="PopupComponentGet">
<Description>
Method for getting 'PopupComponent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(##this.GetProperty("PopupComponent"))
]]></Implementation>
</Method>

<Method name="PopupComponentSet">
<Description>
Method for setting 'PopupComponent' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PopupComponent",$s(+Value:Value,1:""))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Images</Value>
</Value>
<Value name="9">
<Value>Items</Value>
</Value>
<Value name="10">
<Value>OnChange</Value>
</Value>
<Value name="11">
<Value>OnPopup</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPrintDialog">
<Description><![CDATA[
This class enables modal dialog selecting parameters of printing. The <i>Execute</i> method activates dialog, after the dialog completed, the class properties contains values of corresponding
parameters.
]]></Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73336</TimeCreated>

<Property name="Collate">
<Description>
Indicates state of the 'Collate' checkbox: contains "True", if it is checked, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Copies">
<Description>
Contains number of copies entered in the dialog.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Ctl3D">
<Description>
Determines, should the control look three-dimensional (if set to "True") or flat (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FromPage">
<Description>
Contains number of page from which printing should begin.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this dialog.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxPage">
<Description>
Contains maximal page number which can be entered in 'From page' and 'To page' edit fields.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinPage">
<Description>
Contains minimal page number which can be entered in 'From page' and 'To page' edit fields.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnClose">
<Description>
Handler of event occuring when the dialog is about to be closed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Description>
Handler of event occuring when the dialog box is shown as a result of the 'Execute' method.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Description><![CDATA[
Determines the diaolg options. Possible value: Cache' list ($lb) where only necessary from the following strings are combined:<br>
"poDisablePrintToFile" - disable the 'Print To File' check box;<br>
"poHelp" - enable 'Help' button;<br>
"poPageNums" - allow user to specify range of pages to be printed;<br>
"poPrintToFile" - enable the 'Print To File' checkbox;<br>
"poSelection" - allow selected text printing;<br>
"poWarning" - warn about uninstalled printer;<br>
Default value: $lb().
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(poPrintToFile,poPageNums,poSelection,poWarning,poHelp,poDisablePrintToFile)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PrintRange">
<Description>
Indicates state of the 'Print Range' radiobutton: contains "True", if it is checked, otherwise - "False".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",prAllPages,prSelection,prPageNums"/>
</Property>

<Property name="PrintToFile">
<Description>
Indicates state of the 'Print To File' checkbox: contains "True", if it is checked, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ToPage">
<Description>
Contains number of page on which printing should finish.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPrintDialog"
]]></Implementation>
</Method>

<Method name="CollateGet">
<Description>
Method for getting 'Collate' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Collate")
 q tmp
]]></Implementation>
</Method>

<Method name="CollateSet">
<Description>
Method for setting 'Collate' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Collate",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CopiesGet">
<Description>
Method for getting 'Copies' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Copies")
 q tmp
]]></Implementation>
</Method>

<Method name="CopiesSet">
<Description>
Method for setting 'Copies' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Copies",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Execute">
<Description>
Activates dialog. Returns "True" if printing parameters are selected, or "False" if dialog was canceled.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Execute",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="FromPageGet">
<Description>
Method for getting 'FromPage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FromPage")
 q tmp
]]></Implementation>
</Method>

<Method name="FromPageSet">
<Description>
Method for setting 'FromPage' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FromPage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxPageGet">
<Description>
Method for getting 'MaxPage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxPage")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxPageSet">
<Description>
Method for setting 'MaxPage' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxPage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinPageGet">
<Description>
Method for getting 'MinPage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinPage")
 q tmp
]]></Implementation>
</Method>

<Method name="MinPageSet">
<Description>
Method for setting 'MinPage' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinPage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrintRangeGet">
<Description>
Method for getting 'PrintRange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrintRange")
 q tmp
]]></Implementation>
</Method>

<Method name="PrintRangeSet">
<Description>
Method for setting 'PrintRange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrintRange",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrintToFileGet">
<Description>
Method for getting 'PrintToFile' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrintToFile")
 q tmp
]]></Implementation>
</Method>

<Method name="PrintToFileSet">
<Description>
Method for setting 'PrintToFile' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrintToFile",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ToPageGet">
<Description>
Method for getting 'ToPage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ToPage")
 q tmp
]]></Implementation>
</Method>

<Method name="ToPageSet">
<Description>
Method for setting 'ToPage' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ToPage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnClose</Value>
</Value>
<Value name="9">
<Value>OnShow</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPrinter">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="Aborted">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Canvas">
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Capabilities">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(pcCopies,pcOrientation,pcCollation)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Copies">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Fonts">
<Type>%Library.TMStrings</Type>
</Property>

<Property name="Orientation">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",poPortrait,poLandscape"/>
</Property>

<Property name="PageHeight">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PageNumber">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PageWidth">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="PrinterIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Printers">
<Type>%Library.TMStrings</Type>
</Property>

<Property name="Printing">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TextMode">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Title">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Fonts.%Close()")
 $$$GENERATE(" s ..Fonts=##class(%TMStrings).%New($lb(##this.Address,0,""Fonts""))")
 $$$GENERATE(" d ..Printers.%Close()")
 $$$GENERATE(" s ..Printers=##class(%TMStrings).%New($lb(##this.Address,0,""Printers""))")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="Abort">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Abort",$lb())
 q
]]></Implementation>
</Method>

<Method name="AbortedGet">
<Description>
Method for getting 'Aborted' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Aborted")
 q tmp
]]></Implementation>
</Method>

<Method name="AbortedSet">
<Description>
Method for setting 'Aborted' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Aborted",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeginDoc">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("BeginDoc",$LB())
 q
]]></Implementation>
</Method>

<Method name="CapabilitiesGet">
<Description>
Method for getting 'Capabilities' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Capabilities")
 q tmp
]]></Implementation>
</Method>

<Method name="CapabilitiesSet">
<Description>
Method for setting 'Capabilities' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Capabilities",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPrinter"
]]></Implementation>
</Method>

<Method name="CopiesGet">
<Description>
Method for getting 'Copies' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Copies")
 q tmp
]]></Implementation>
</Method>

<Method name="CopiesSet">
<Description>
Method for setting 'Copies' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Copies",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndDoc">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("EndDoc",$LB())
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Fonts.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Fonts,""Fonts"","""")_result")
 $$$GENERATE(" s result=result_..Printers.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Printers,""Printers"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="NewPage">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("NewPage",$LB())
 q
]]></Implementation>
</Method>

<Method name="OrientationGet">
<Description>
Method for getting 'Orientation' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Orientation")
 q tmp
]]></Implementation>
</Method>

<Method name="OrientationSet">
<Description>
Method for setting 'Orientation' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Orientation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageHeightGet">
<Description>
Method for getting 'PageHeight' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="PageHeightSet">
<Description>
Method for setting 'PageHeight' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageNumberGet">
<Description>
Method for getting 'PageNumber' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageNumber")
 q tmp
]]></Implementation>
</Method>

<Method name="PageNumberSet">
<Description>
Method for setting 'PageNumber' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageNumber",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageWidthGet">
<Description>
Method for getting 'PageWidth' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="PageWidthSet">
<Description>
Method for setting 'PageWidth' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrinterIndexGet">
<Description>
Method for getting 'PrinterIndex' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PrinterIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="PrinterIndexSet">
<Description>
Method for setting 'PrinterIndex' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PrinterIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PrintingGet">
<Description>
Method for getting 'Printing' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Printing")
 q tmp
]]></Implementation>
</Method>

<Method name="PrintingSet">
<Description>
Method for setting 'Printing' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Printing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextModeGet">
<Description>
Method for getting 'TextMode' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TextMode")
 q tmp
]]></Implementation>
</Method>

<Method name="TextModeSet">
<Description>
Method for setting 'TextMode' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TextMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleGet">
<Description>
Method for getting 'Title' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Title")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSet">
<Description>
Method for setting 'Title' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Title",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("Write",$LB())
 q
]]></Implementation>
</Method>

<Method name="WriteLn">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("WriteLn",$LB(Value))
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Canvas</Value>
</Value>
<Value name="9">
<Value>Fonts</Value>
</Value>
<Value name="10">
<Value>Printers</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMPrinterSetupDialog">
<Description>
This class enables modal dialog configuring printer.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="Ctl3D">
<Description>
Determines, should the control look three-dimensional (if set to "True") or flat (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this dialog.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnClose">
<Description>
Handler of event occuring when the dialog is about to be closed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Description>
Handler of event occuring when the dialog box is shown as a result of the 'Execute' method.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMPrinterSetupDialog"
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Execute">
<Description>
Activates dialog. Returns "True" if dialog finished successfully, or "False" if dialog was canceled.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Execute",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnClose</Value>
</Value>
<Value name="9">
<Value>OnShow</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMProgressBar">
<Description>
This class represents server-side image of Windows progress bar.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="Max">
<Description>
Maximal possible value of 'Position' property. Default value is 100.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Min">
<Description>
Minimal possible value of 'Position' property. Default value is 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Position">
<Description>
Determines current position of the progress bar. If 'Min' value is 0, and 'Max' value is 100, corresponds to percentage of completed.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Step">
<Description>
Specifies the 'Position' increment, corresponding to one logical step.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMProgressBar"
]]></Implementation>
</Method>

<Method name="MaxGet">
<Description>
Method for getting 'Max' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Max")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxSet">
<Description>
Method for setting 'Max' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Max",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinGet">
<Description>
Method for getting 'Min' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Min")
 q tmp
]]></Implementation>
</Method>

<Method name="MinSet">
<Description>
Method for setting 'Min' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Min",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StepBy">
<Description>
Advances progress bar by a specified delta, increasing the value of 'Position' property.
</Description>
<FormalSpec>Delta:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("StepBy",$lb(Delta))
 q
]]></Implementation>
</Method>

<Method name="StepGet">
<Description>
Method for getting 'Step' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Step")
 q tmp
]]></Implementation>
</Method>

<Method name="StepIt">
<Description>
Advances progress bar by one logical step, adding the value of 'Step' property to the 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("StepIt",$lb())
 q
]]></Implementation>
</Method>

<Method name="StepSet">
<Description>
Method for setting 'Step' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Step",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMQuery">
<Description>
Describes all information necessary for executing queries. SMWrap controls which can be filled with data from query must supply information in their Query property.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%SerialObject</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="IdField">
<Description>
Name of Id field in %ResultSet. If it is set, value of this field is stored in Data or Object part of values.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QueryClass">
<Description>
Class of query.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QueryFields">
<Description>
List of fields (delimited with comma), that must be loaded to control. List must contain fields names.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="QueryName">
<Description>
Name of query.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="SetMultiProperty">
<Description>
For internal use only.
</Description>
<FormalSpec>Names:%String,Values:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n i
 f i=1:1:$ll(Names) d
 . s $zObjProperty(##this,$lg(Names,i))=$lg(Values,i)
 q
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>%TMQueryState</State>
<StreamLocation>^%Library.TMQueryS</StreamLocation>
<Data name="%TMQueryState">
<Value name="1">
<Value>IdField</Value>
</Value>
<Value name="2">
<Value>QueryClass</Value>
</Value>
<Value name="3">
<Value>QueryFields</Value>
</Value>
<Value name="4">
<Value>QueryName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMRadioButton">
<Description>
This class represents the server-side image of a windows radio button. Only one from radio buttons placed in the same container (%TMPanel, %TMGroupBox, %TMRadioGroup) can be checked in a time.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="Alignment">
<Description>
Determines the radio button caption alignment.
Possible values: "taLeftJustify" or "taRightJustify", default is "taLeftJustify".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="Checked">
<Description>
Represents, is the radio button checked or not. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CheckedGet">
<Description>
Method for getting 'Checked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Checked")
 q tmp
]]></Implementation>
</Method>

<Method name="CheckedSet">
<Description>
Method for setting 'Checked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Checked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMRadioButton"
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMRadioGroup">
<Description>
Represents a special group box embedding radio buttons only.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="Columns">
<Description>
Contains number of columns in which radio buttons should be arranged.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ItemIndex">
<Description>
Contains index of checked radio button (indexing starts from 0) or -1, if no radio button is checked.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Items">
<Description>
Contains oref of the %TMString object containing list of radio buttons names.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMStrings).%New($lb(..Address,..GetProperty(""Items"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMRadioGroup"
]]></Implementation>
</Method>

<Method name="ColumnsGet">
<Description>
Method for getting 'Columns' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Columns")
 q tmp
]]></Implementation>
</Method>

<Method name="ColumnsSet">
<Description>
Method for setting 'Columns' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Columns",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemIndexGet">
<Description>
Method for getting 'ItemIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ItemIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ItemIndexSet">
<Description>
Method for setting 'ItemIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ItemIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Items</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMRichEdit">
<Description>
This class represents the server-side image of a windows rich text edit control.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73337</TimeCreated>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside the rectangle aimed for this control. Possible values: "taLeftJustify", "taRightJustify", "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines, should the control have a border around the client area. Possible values:<br>
"bsSingle" - single-line border<br>
"bsNone" - no border.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="CanUndo">
<Description>
Indicates, are there changes saved in the Undo buffer. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CaretPos">
<Description>
Determines the coordinates of the cursor (in pixels) relative to the client area.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HideScrollBars">
<Description>
If set to "True", scrollbars disappear if the entire text has room in the edit window.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HideSelection">
<Description>
Determines, should the selected text be highlighted when the control is out of focus. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Lines">
<Description>
Collection of the text lines in this control. Use %TMString methods (Add, Insert, Move, Delete, IndexOf, Count) to operate with separate items.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Property name="MaxLength">
<Description>
Limits the length of string the user can input in the edit window. 0 means no limitation.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Modified">
<Description>
Indicates, is the text modified by the user. Possible values: "True" or "False". The code altering the 'Lines' property should set the 'Modified' property to "True".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the text is changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnProtectChange">
<Description>
Handler of event occuring when an attempt to change protected text has been done.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnResizeRequest">
<Description>
Handler of event occuring when the text becomes smaller or larger than the edit window.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSaveClipboard">
<Description>
Handler of event occuring when the control is about to be destroyed, but the text copying to the clipboard is not finished yet.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectionChange">
<Description>
Handler of event occuring when selection is changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PageRect">
<Description>
Determines the size of logical page ($lb(X,Y), where X and Y are horizontal and vertical sizes in 1/20 of point) for text formatting before printing.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Paragraph">
<Description>
Contains oref of %TMParaAttributes object with parameters of the current paragraph formatting.
</Description>
<Type>%Library.TMParaAttributes</Type>
</Property>

<Property name="PlainText">
<Description>
If set to "True", the 'SaveToFile', 'SaveToBLOB', 'LoadFromFile' and 'LoadFromBLOB' methods of the 'Lines' property consider the control contents as plain text, otherwise - as rich text.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ReadOnly">
<Description>
Determines, should the text be protected from being changed by user. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBars">
<Description><![CDATA[
Determines, can this control have scrollbars. Possible values:<br>
"ssNone" - no scrollbars<br>
"ssHorizontal" - a horizontal scrollbar on the bottom edge<br>
"ssVertical" - a vertical scrollbar on the right edge<br>
"ssBoth" - both horizontal and vertical scrollbars.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssNone,ssHorizontal,ssVertical,ssBoth"/>
</Property>

<Property name="SelAttributes">
<Description>
Contains oref of %TMTextAttributes object with font characteristics of selected text.
</Description>
<Type>%Library.TMTextAttributes</Type>
</Property>

<Property name="SelLength">
<Description>
Represents the length of the selected text in the control.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelStart">
<Description>
Represents the number of first symbol of selected part of text in the control (numbering starts from 0). If no text is selected, represents the cursor position.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelText">
<Description>
Represents the selected text in the edit control. Change of this property replaces the selected text with new value, or inserts it at the cursor if no text is selected.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TextAttributes">
<Description>
Contains oref of %TMTextAttributes object with font characteristics of cursor position.
</Description>
<Type>%Library.TMTextAttributes</Type>
</Property>

<Property name="WantReturns">
<Description>
Determines, should the Enter keystrokes insert CRLF characters into the text (if set to "True") or be handled by the form, allowing, however, user to insert CRLF typing Ctrl-Enter (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WantTabs">
<Description>
Determines, should the Tab keystrokes insert tab characters into the text (if set to "True") or move the focus to the next control (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WordWrap">
<Description>
Determines, should the too long text be wrapped and displayed in several lines (if set to "True") or displayed in single line with scrolling (if set to "False"). Affects only on the appearance rather than actual contents of the 'Lines' property.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Lines.%Close()")
 $$$GENERATE(" s ##this.Lines=##class(%TMStrings).%New($lb(##this.Address,0,""Lines""))")
 $$$GENERATE(" d ##this.Paragraph.%Close()")
 $$$GENERATE(" s ##this.Paragraph=##class(%TMParaAttributes).%New($lb(##this.Address,0,""Paragraph""))")
 $$$GENERATE(" d ##this.SelAttributes.%Close()")
 $$$GENERATE(" s ##this.SelAttributes=##class(%TMTextAttributes).%New($lb(##this.Address,0,""SelAttributes""))")
 $$$GENERATE(" d ##this.TextAttributes.%Close()")
 $$$GENERATE(" s ##this.TextAttributes=##class(%TMTextAttributes).%New($lb(##this.Address,0,""TextAttributes""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CanUndoGet">
<Description>
Method for getting 'CanUndo' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CanUndo")
 q tmp
]]></Implementation>
</Method>

<Method name="CanUndoSet">
<Description>
Method for setting 'CanUndo' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CanUndo",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CaretPosGet">
<Description>
Method for getting 'CaretPos' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CaretPos")
 q tmp
]]></Implementation>
</Method>

<Method name="CaretPosSet">
<Description>
Method for setting 'CaretPos' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CaretPos",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMRichEdit"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all the text from the control.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearSelection">
<Description>
Deletes selected part of text from the control.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearSelection",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClearUndo">
<Description>
Makes changes irreversible and sets the CanUndo property to "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ClearUndo",$lb())
 q
]]></Implementation>
</Method>

<Method name="CopyToClipboard">
<Description>
Copies the selected text into Windows Clipboard. If no text is selected, Clipboard remains unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CopyToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="CutToClipboard">
<Description>
Copies the selected text into Windows Clipboard and then deletes it from the control. If no text is selected, Clipboard remains unchanged.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CutToClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="FindText">
<Description>
Searches SearchStr in the range of the text specified by StartPos and Length. Possible value of 'Options' parameter: Cache list ($lb()) containing only necessary strings from the following: "stWholeWord" and "stMatchCase", their meaning is obvious. Returns the position of the found string (numbering of characters starts from 0), or -1, if the string is not found.
</Description>
<FormalSpec>SearchStr:%String,StartPos:%Integer,Length:%Integer,Options:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FindText",$lb(SearchStr,StartPos,Length,Options))
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Lines.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Lines,""Lines"","""")_result")
 $$$GENERATE(" s result=result_..Paragraph.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Paragraph,""Paragraph"","""")_result")
 $$$GENERATE(" s result=result_..SelAttributes.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..SelAttributes,""SelAttributes"","""")_result")
 $$$GENERATE(" s result=result_..TextAttributes.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..TextAttributes,""TextAttributes"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideScrollBarsGet">
<Description>
Method for getting 'HideScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="HideScrollBarsSet">
<Description>
Method for setting 'HideScrollBars' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxLengthGet">
<Description>
Method for getting 'MaxLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxLength")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxLengthSet">
<Description>
Method for setting 'MaxLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModifiedGet">
<Description>
Method for getting 'Modified' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Modified")
 q tmp
]]></Implementation>
</Method>

<Method name="ModifiedSet">
<Description>
Method for setting 'Modified' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Modified",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnProtectChangeGet">
<Description>
Method for getting 'OnProtectChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnProtectChange
]]></Implementation>
</Method>

<Method name="OnProtectChangeSet">
<Description>
Method for setting 'OnProtectChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnProtectChange=Value
 d ##this.SetEvent("OnProtectChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnResizeRequestGet">
<Description>
Method for getting 'OnResizeRequest' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnResizeRequest
]]></Implementation>
</Method>

<Method name="OnResizeRequestSet">
<Description>
Method for setting 'OnResizeRequest' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnResizeRequest=Value
 d ##this.SetEvent("OnResizeRequest",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSaveClipboardGet">
<Description>
Method for getting 'OnSaveClipboard' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSaveClipboard
]]></Implementation>
</Method>

<Method name="OnSaveClipboardSet">
<Description>
Method for setting 'OnSaveClipboard' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSaveClipboard=Value
 d ##this.SetEvent("OnSaveClipboard",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectionChangeGet">
<Description>
Method for getting 'OnSelectionChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectionChange
]]></Implementation>
</Method>

<Method name="OnSelectionChangeSet">
<Description>
Method for setting 'OnSelectionChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSelectionChange=Value
 d ##this.SetEvent("OnSelectionChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageRectGet">
<Description>
Method for getting 'PageRect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageRect")
 q tmp
]]></Implementation>
</Method>

<Method name="PageRectSet">
<Description>
Method for setting 'PageRect' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageRect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PasteFromClipboard">
<Description>
Replaces the selected text with the Windows Clipboard contents. If no text is selected, inserts the Clipboard contents at the cursor. Does nothing if the Clipboard contains no rich text.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("PasteFromClipboard",$lb())
 q
]]></Implementation>
</Method>

<Method name="PlainTextGet">
<Description>
Method for getting 'PlainText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PlainText")
 q tmp
]]></Implementation>
</Method>

<Method name="PlainTextSet">
<Description>
Method for setting 'PlainText' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PlainText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Print">
<Description>
Prints contents of the rich edit control. The 'Caption' parameter determines the printed document header.
</Description>
<FormalSpec>Caption:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Print",$lb(Caption))
 q
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarsGet">
<Description>
Method for getting 'ScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarsSet">
<Description>
Method for setting 'ScrollBars' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelLengthGet">
<Description>
Method for getting 'SelLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelLength")
 q tmp
]]></Implementation>
</Method>

<Method name="SelLengthSet">
<Description>
Method for setting 'SelLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelStartGet">
<Description>
Method for getting 'SelStart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelStart")
 q tmp
]]></Implementation>
</Method>

<Method name="SelStartSet">
<Description>
Method for setting 'SelStart' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelStart",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelTextGet">
<Description>
Method for getting 'SelText' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelText")
 q tmp
]]></Implementation>
</Method>

<Method name="SelTextSet">
<Description>
Method for setting 'SelText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectAll">
<Description>
Marks all the text in the control as selected.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SelectAll",$lb())
 q
]]></Implementation>
</Method>

<Method name="Undo">
<Description>
Cancels changes of the control contents made since the last ClearUndo call or all changes, if ClearUndo was never called.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Undo",$lb())
 q
]]></Implementation>
</Method>

<Method name="WantReturnsGet">
<Description>
Method for getting 'WantReturns' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WantReturns")
 q tmp
]]></Implementation>
</Method>

<Method name="WantReturnsSet">
<Description>
Method for setting 'WantReturns' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WantReturns",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WantTabsGet">
<Description>
Method for getting 'WantTabs' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WantTabs")
 q tmp
]]></Implementation>
</Method>

<Method name="WantTabsSet">
<Description>
Method for setting 'WantTabs' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WantTabs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WordWrapGet">
<Description>
Method for getting 'WordWrap' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WordWrap")
 q tmp
]]></Implementation>
</Method>

<Method name="WordWrapSet">
<Description>
Method for setting 'WordWrap' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WordWrap",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Lines</Value>
</Value>
<Value name="38">
<Value>OnChange</Value>
</Value>
<Value name="39">
<Value>OnProtectChange</Value>
</Value>
<Value name="40">
<Value>OnResizeRequest</Value>
</Value>
<Value name="41">
<Value>OnSaveClipboard</Value>
</Value>
<Value name="42">
<Value>OnSelectionChange</Value>
</Value>
<Value name="43">
<Value>Paragraph</Value>
</Value>
<Value name="44">
<Value>SelAttributes</Value>
</Value>
<Value name="45">
<Value>TextAttributes</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMRxDrawGrid">
<Description>
Represents the server-side image of control allowing to display information in tabular form.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73338</TimeCreated>

<Property name="BorderStyle">
<Description><![CDATA[
Determines the appearance of the grid border. Possible values:<br>
"bsSingle" - single-line border (not resizeable).<br>
"bsNone" - no border (not resizeable).<br>
"bsDialog" - usual dialog box border (not resizeable).<br>
"bsSizeable" - usual resizeable border.<br>
"bsToolWindow" - 	single-line border, smaller caption (not resizeable).<br>
"bsSizeToolWin" - usual resizeable border, smaller caption.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of %TMCanvas object to be used to display owner-drawn items.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Col">
<Description>
Determines the index of column containing selected cell. Possible values: integers from 0 to ColCount-1.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColCount">
<Description>
Represents the total number of the grid columns.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColWidths">
<Description>
Contains Cache' list ($lb()) built from widths of columns (in pixels).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DefaultColWidth">
<Description>
Determines horizontal size (in pixels) for all columns before they are resized.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultDrawing">
<Description>
Determines, should the cells be painted automatically (if set to "True") or manually, using the 'DrawCell' method (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultRowHeight">
<Description>
Determines vertical size (in pixels) for all rows before they are resized.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EditorMode">
<Description>
Determines, is the grid is in the edit mode (user can edit cells values) (if set to "True") or not (if set to "False". Setting this property has no effect if the 'Options' property disables the edit mode toggle.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedButtons">
<Description>
Determines, should the 'OnFixedCellClick' event occur when the fixed cell is clicked (if set to "True"), or double clicks only are detectable (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedColor">
<Description>
Determines background color (in hexadecimal RGB format) for the fixed cells.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedCols">
<Description>
Determines the number of fixed (leftmost and non-scrollable) columns in the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedRows">
<Description>
Determines the number of fixed (topmost and non-scrollable) rows in the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridLineWidth">
<Description>
Determines the thickness (in pixels) of the line separating the grid cells. 0 is allowed, more than 3 is not recommended.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="IniStorage">
<Description>
For use in future.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="InplaceEditorText">
<Description><![CDATA[
Text string contained in the inplace editor when it is active. Inplace editor can be assigned in the
'OnGetEditStyle' event handler. Possible styles are:<br>
"ieSimple" - simplest one-string editor;<br>
"ieEllipsis" -  simplest one-string editor and ellispsis button;<br>
"iePickList" -  drop-down list with an edit region for custom text input. Options of this
dropdown list can be assigned in the 'OnGetPicklist' event handler.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LeftCol">
<Description>
Represents index of the leftmost visible scrollable column.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnAcceptEditKey">
<Description>
Handler of event occuring when a key is entered in edit mode. Allows to accept or reject keys.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCancelEdit">
<Description>
Handler of event occuring when a cell editor is terminated.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChangeFocus">
<Description>
Handler of event occuring when the grid gets focus or becomes blur.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCheckButton">
<Description>
Handler of event occuring when 'Enable' status of a fixed cell is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnColumnSized">
<Description>
Handler of event occuring when a column has been 1st time resized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawCell">
<Description>
Handler of event occuring when a cell needs to be repainted.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditButtonClick">
<Description>
Handler of event occuring when the ellipsis button in the ellipsis-style inplace editor is clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditChange">
<Description>
Handler for event occuring when the text the edit region changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFixedCellClick">
<Description>
Handler of event occuring when the fixed cell is clicked and the 'FixedButtons' property is set to "True".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditAlign">
<Description>
Handler of event occuring when inplace editor alignment is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditLimit">
<Description>
Handler of event occuring when the maximum text length for inplace editor is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditStyle">
<Description>
Handler of event occuring when inplace editor style is retrieved. Possible styles are listed in the 'InplaceEditorText' property description.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetPicklist">
<Description>
Handler of event ocuring when options for inplace dropdown list are retrieved. The 'PickList' parameter must contain CRLF-delimited options.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRowSized">
<Description>
Handler of event occuring when a row has been 1st time resized.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShowEditor">
<Description>
Handler of event occuring immediately before inplace editor start.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Description><![CDATA[
Determines the grid appearance and capabilities. Possible value: Cache list ($lb()) where only necessary from the following strings are combined:<br>
"goFixedVertLine" - draw vertical lines between the fixed (non-scrolling) columns;<br>
"goFixedHorzLine" - draw horizontal lines between the fixed (non-scrolling) rows;<br>
"goVertLine" - draw vertical lines between usual (scrollable) columns;<br>
"goHorzLine" - draw horizontal lines between usual (scrollable) rows;<br>
"goRangeSelect" - allow to select ranges of cells (for read-only grids);<br>
"goDrawFocusSelected" - highlight cells with input focus;<br>
"goRowSizing" - allow to resize separate scrollable rows;<br>
"goColSizing" - allow to resize separate scrollable columns;<br>
"goRowMoving" - allow to move scrollable rows by the mouse;<br>
"goColMoving" - allow to move scrollable columns by the mouse;<br>
"goEditing" - allows to enter edit mode for the cells;<br>
"goTabs" - the 'Tab' and 'Shift-Tab' keys moves focus between the columns;<br>
"goRowSelect" - select entire row rather than single cell;<br>
"goAlwaysShowEditor" - the edit mode is always on;<br>
"goThumbTracking" - update the grid image while the scrollbar thumb is being dragged, do not wait for the thumb release.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(goFixedVertLine,goFixedHorzLine,goVertLine,goHorzLine,goRangeSelect,goDrawFocusSelected,goRowSizing,goColSizing,goRowMoving,goColMoving,goEditing,goTabs,goRowSelect,goAlwaysShowEditor,goThumbTracking)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Row">
<Description>
Determines the index of row containing selected cell. Possible values: integers from 0 to RowCount-1.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RowCount">
<Description>
Represents the total number of the grid rows.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBars">
<Description>
Determines, what scrollbars should be shown if there are invisible rows or columns. Possible values: "ssNone", "ssHorizontal", "ssVertical" or "ssBoth".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssNone,ssHorizontal,ssVertical,ssBoth"/>
</Property>

<Property name="Selection">
<Description>
Represents the range of selected cells (in format $lb(Left,Top,Right,Bottom)).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TopRow">
<Description>
Represents index of the topmost visible scrollable row.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleColCount">
<Description>
Indicates the number of visible columns (excluding fixed columns).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleRowCount">
<Description>
Indicates the number of visible rows (excluding fixed rows).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CellRect">
<Description>
Returns the screen coordinates of the specified cell (in format $lb(Left,Top,Right,Bottom)).
</Description>
<FormalSpec>ACol:%Integer,ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CellRect",$lb(ACol,ARow))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMRxDrawGrid"
]]></Implementation>
</Method>

<Method name="ColCountGet">
<Description>
Method for getting 'ColCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="ColCountSet">
<Description>
Method for setting 'ColCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColGet">
<Description>
Method for getting 'Col' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Col")
 q tmp
]]></Implementation>
</Method>

<Method name="ColSet">
<Description>
Method for setting 'Col' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Col",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColWidthsGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ColWidths")
]]></Implementation>
</Method>

<Method name="ColWidthsSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ColWidths",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultColWidthGet">
<Description>
Method for getting 'DefaultColWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultColWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultColWidthSet">
<Description>
Method for setting 'DefaultColWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultColWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultDrawingGet">
<Description>
Method for getting 'DefaultDrawing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultDrawing")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultDrawingSet">
<Description>
Method for setting 'DefaultDrawing' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultDrawing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultRowHeightGet">
<Description>
Method for getting 'DefaultRowHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultRowHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultRowHeightSet">
<Description>
Method for setting 'DefaultRowHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultRowHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DrawMultiline">
<Description>
Draws multiline text on the grid canvas in the specified rectangle (format $lb(Left,Top,Right,Bottom)) with specified alignment.
</Description>
<FormalSpec>ARect:%String,Text:%String,Align:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DrawMultiline",$lb(ARect,Text,Align))
 q
]]></Implementation>
</Method>

<Method name="DrawStr">
<Description>
Draws text string on the grid canvas in the specified rectangle (format $lb(Left,Top,Right,Bottom)) with specified alignment.
</Description>
<FormalSpec>ARect:%String,S:%String,Align:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DrawStr",$lb(ARect,S,Align))
 q
]]></Implementation>
</Method>

<Method name="EditorModeGet">
<Description>
Method for getting 'EditorMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EditorMode")
 q tmp
]]></Implementation>
</Method>

<Method name="EditorModeSet">
<Description>
Method for setting 'EditorMode' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("EditorMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedButtonsGet">
<Description>
Method for getting 'FixedButtons' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedButtonsSet">
<Description>
Method for setting 'FixedButtons' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColorGet">
<Description>
Method for getting 'FixedColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedColor")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColorSet">
<Description>
Method for setting 'FixedColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColsGet">
<Description>
Method for getting 'FixedCols' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedCols")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColsSet">
<Description>
Method for setting 'FixedCols' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedCols",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedRowsGet">
<Description>
Method for getting 'FixedRows' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedRows")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedRowsSet">
<Description>
Method for setting 'FixedRows' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedRows",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetColWidths">
<Description>
Returns the width (in pixels) of the column specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetColWidths",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetRowHeights">
<Description>
Returns the height (in pixels) of the row specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetRowHeights",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetTabStops">
<Description>
Returns "True" if the focus can be moved to the specified column by the 'Tab' key, otherwise - "False".
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetTabStops",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GridLineWidthGet">
<Description>
Method for getting 'GridLineWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridLineWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridLineWidthSet">
<Description>
Method for setting 'GridLineWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridLineWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IniStorageGet">
<Description>
Method for getting 'IniStorage' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("IniStorage")
 q tmp
]]></Implementation>
</Method>

<Method name="IniStorageSet">
<Description>
Method for setting 'IniStorage' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("IniStorage",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InplaceEditorTextGet">
<Description>
Method for getting 'InplaceEditorText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("InplaceEditorText")
]]></Implementation>
</Method>

<Method name="InplaceEditorTextSet">
<Description>
Method for setting 'InplaceEditorText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("InplaceEditorText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InvalidateCell">
<Description>
Repaints the specified cell.
</Description>
<FormalSpec>ACol:%Integer,ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InvalidateCell",$lb(ACol,ARow))
 q
]]></Implementation>
</Method>

<Method name="InvalidateCol">
<Description>
Repaints the specified column.
</Description>
<FormalSpec>ACol:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InvalidateCol",$lb(ACol))
 q
]]></Implementation>
</Method>

<Method name="InvalidateRow">
<Description>
Repaints the specified row.
</Description>
<FormalSpec>ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InvalidateRow",$lb(ARow))
 q
]]></Implementation>
</Method>

<Method name="LeftColGet">
<Description>
Method for getting 'LeftCol' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LeftCol")
 q tmp
]]></Implementation>
</Method>

<Method name="LeftColSet">
<Description>
Method for setting 'LeftCol' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LeftCol",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MouseCoord">
<Description>
Converts the specified screen coordinate into corresponding cell indices ($lb(Column,Row)).
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MouseCoord",$lb(X,Y))
 q tmp
]]></Implementation>
</Method>

<Method name="OnAcceptEditKeyGet">
<Description>
Method for getting 'OnAcceptEditKey' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnAcceptEditKey
]]></Implementation>
</Method>

<Method name="OnAcceptEditKeySet">
<Description>
Method for setting 'OnAcceptEditKey' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnAcceptEditKey=Value
 d ##this.SetEvent("OnAcceptEditKey",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCancelEditGet">
<Description>
Method for getting 'OnCancelEdit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCancelEdit
]]></Implementation>
</Method>

<Method name="OnCancelEditSet">
<Description>
Method for setting 'OnCancelEdit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnCancelEdit=Value
 d ##this.SetEvent("OnCancelEdit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeFocusGet">
<Description>
Method for getting 'OnChangeFocus' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChangeFocus
]]></Implementation>
</Method>

<Method name="OnChangeFocusSet">
<Description>
Method for setting 'OnChangeFocus' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChangeFocus=Value
 d ##this.SetEvent("OnChangeFocus",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCheckButtonGet">
<Description>
Method for getting 'OnCheckButton' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCheckButton
]]></Implementation>
</Method>

<Method name="OnCheckButtonSet">
<Description>
Method for setting 'OnCheckButton' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCheckButton=Value
 d ##this.SetEvent("OnCheckButton",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnColumnSizedGet">
<Description>
Method for getting 'OnColumnSized' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnSized
]]></Implementation>
</Method>

<Method name="OnColumnSizedSet">
<Description>
Method for setting 'OnColumnSized' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnSized=Value
 d ##this.SetEvent("OnColumnSized",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawCellGet">
<Description>
Method for getting 'OnDrawCell' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawCell
]]></Implementation>
</Method>

<Method name="OnDrawCellSet">
<Description>
Method for setting 'OnDrawCell' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawCell=Value
 d ##this.SetEvent("OnDrawCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditButtonClickGet">
<Description>
Method for getting 'OnEditButtonClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditButtonClick
]]></Implementation>
</Method>

<Method name="OnEditButtonClickSet">
<Description>
Method for setting 'OnEditButtonClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditButtonClick=Value
 d ##this.SetEvent("OnEditButtonClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditChangeGet">
<Description>
Method for getting 'OnEditChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditChange
]]></Implementation>
</Method>

<Method name="OnEditChangeSet">
<Description>
Method for setting 'OnEditChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditChange=Value
 d ##this.SetEvent("OnEditChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFixedCellClickGet">
<Description>
Method for getting 'OnFixedCellClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFixedCellClick
]]></Implementation>
</Method>

<Method name="OnFixedCellClickSet">
<Description>
Method for setting 'OnFixedCellClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFixedCellClick=Value
 d ##this.SetEvent("OnFixedCellClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditAlignGet">
<Description>
Method for getting 'OnGetEditAlign' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditAlign
]]></Implementation>
</Method>

<Method name="OnGetEditAlignSet">
<Description>
Method for setting 'OnGetEditAlign' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditAlign=Value
 d ##this.SetEvent("OnGetEditAlign",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditLimitGet">
<Description>
Method for getting 'OnGetEditLimit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditLimit
]]></Implementation>
</Method>

<Method name="OnGetEditLimitSet">
<Description>
Method for setting 'OnGetEditLimit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditLimit=Value
 d ##this.SetEvent("OnGetEditLimit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditStyleGet">
<Description>
Method for getting 'OnGetEditStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditStyle
]]></Implementation>
</Method>

<Method name="OnGetEditStyleSet">
<Description>
Method for setting 'OnGetEditStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditStyle=Value
 d ##this.SetEvent("OnGetEditStyle",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetPicklistGet">
<Description>
Method for getting 'OnGetPicklist' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetPicklist
]]></Implementation>
</Method>

<Method name="OnGetPicklistSet">
<Description>
Method for setting 'OnGetPicklist' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetPicklist=Value
 d ##this.SetEvent("OnGetPicklist",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRowSizedGet">
<Description>
Method for getting 'OnRowSized' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRowSized
]]></Implementation>
</Method>

<Method name="OnRowSizedSet">
<Description>
Method for setting 'OnRowSized' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRowSized=Value
 d ##this.SetEvent("OnRowSized",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowEditorGet">
<Description>
Method for getting 'OnShowEditor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShowEditor
]]></Implementation>
</Method>

<Method name="OnShowEditorSet">
<Description>
Method for setting 'OnShowEditor' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShowEditor=Value
 d ##this.SetEvent("OnShowEditor",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowCountGet">
<Description>
Method for getting 'RowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="RowCountSet">
<Description>
Method for setting 'RowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowGet">
<Description>
Method for getting 'Row' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Row")
 q tmp
]]></Implementation>
</Method>

<Method name="RowSet">
<Description>
Method for setting 'Row' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Row",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarsGet">
<Description>
Method for getting 'ScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarsSet">
<Description>
Method for setting 'ScrollBars' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectionGet">
<Description>
Method for getting 'Selection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Selection")
 q tmp
]]></Implementation>
</Method>

<Method name="SelectionSet">
<Description>
Method for setting 'Selection' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Selection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetColWidths">
<Description>
Resizes column specified by its index to the width (in pixels) specified in the 'Value' parameter.
</Description>
<FormalSpec>Index:%Integer,Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetColWidths",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetRowHeights">
<Description>
Resizes row specified by its index to the height (in pixels) specified in the 'Value' parameter.
</Description>
<FormalSpec>Index:%Integer,Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetRowHeights",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetTabStops">
<Description>
Determines, can the focus be moved to the specified column by the 'Tab' key.
</Description>
<FormalSpec>Index:%Integer,Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetTabStops",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="TopRowGet">
<Description>
Method for getting 'TopRow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopRow")
 q tmp
]]></Implementation>
</Method>

<Method name="TopRowSet">
<Description>
Method for setting 'TopRow' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopRow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleColCountGet">
<Description>
Method for getting 'VisibleColCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleColCountSet">
<Description>
Method for setting 'VisibleColCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleRowCountGet">
<Description>
Method for getting 'VisibleRowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleRowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleRowCountSet">
<Description>
Method for setting 'VisibleRowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleRowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>IniStorage</Value>
</Value>
<Value name="39">
<Value>OnAcceptEditKey</Value>
</Value>
<Value name="40">
<Value>OnCancelEdit</Value>
</Value>
<Value name="41">
<Value>OnChangeFocus</Value>
</Value>
<Value name="42">
<Value>OnCheckButton</Value>
</Value>
<Value name="43">
<Value>OnColumnSized</Value>
</Value>
<Value name="44">
<Value>OnDrawCell</Value>
</Value>
<Value name="45">
<Value>OnEditButtonClick</Value>
</Value>
<Value name="46">
<Value>OnEditChange</Value>
</Value>
<Value name="47">
<Value>OnFixedCellClick</Value>
</Value>
<Value name="48">
<Value>OnGetEditAlign</Value>
</Value>
<Value name="49">
<Value>OnGetEditLimit</Value>
</Value>
<Value name="50">
<Value>OnGetEditStyle</Value>
</Value>
<Value name="51">
<Value>OnGetPicklist</Value>
</Value>
<Value name="52">
<Value>OnRowSized</Value>
</Value>
<Value name="53">
<Value>OnShowEditor</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMSaveDialog">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73339</TimeCreated>

<Property name="Ctl3D">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultExt">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FileEditStyle">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fsEdit,fsComboBox"/>
</Property>

<Property name="FileName">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Files">
<Type>%Library.TMStrings</Type>
</Property>

<Property name="Filter">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FilterIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="InitialDir">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCanClose">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnFolderChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectionChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnTypeChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(ofReadOnly,ofOverwritePrompt,ofHideReadOnly,ofNoChangeDir,ofShowHelp,ofNoValidate,ofAllowMultiSelect,ofExtensionDifferent,ofPathMustExist,ofFileMustExist,ofCreatePrompt,ofShareAware,ofNoReadOnlyReturn,ofNoTestFileCreate,ofNoNetworkButton,ofNoLongNames,ofOldStyleDialog,ofNoDereferenceLinks,ofEnableIncludeNotify,ofEnableSizing)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Title">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Files.%Close()")
 $$$GENERATE(" s ..Files=##class(%TMStrings).%New($lb(..Address,0,""Files""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMSaveDialog"
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultExtGet">
<Description>
Method for getting 'DefaultExt' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultExt")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultExtSet">
<Description>
Method for setting 'DefaultExt' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultExt",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Execute">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Execute",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="FileEditStyleGet">
<Description>
Method for getting 'FileEditStyle' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FileEditStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="FileEditStyleSet">
<Description>
Method for setting 'FileEditStyle' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FileEditStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FileNameGet">
<Description>
Method for getting 'FileName' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FileName")
 q tmp
]]></Implementation>
</Method>

<Method name="FileNameSet">
<Description>
Method for setting 'FileName' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FileName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FilterGet">
<Description>
Method for getting 'Filter' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Filter")
 q tmp
]]></Implementation>
</Method>

<Method name="FilterIndexGet">
<Description>
Method for getting 'FilterIndex' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FilterIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="FilterIndexSet">
<Description>
Method for setting 'FilterIndex' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FilterIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FilterSet">
<Description>
Method for setting 'Filter' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Filter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Files.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Files,""Files"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InitialDirGet">
<Description>
Method for getting 'InitialDir' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("InitialDir")
 q tmp
]]></Implementation>
</Method>

<Method name="InitialDirSet">
<Description>
Method for setting 'InitialDir' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("InitialDir",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCanCloseGet">
<Description>
Method for getting 'OnCanClose' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCanClose
]]></Implementation>
</Method>

<Method name="OnCanCloseSet">
<Description>
Method for setting 'OnCanClose' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCanClose=Value
 d ##this.SetEvent("OnCanClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnFolderChangeGet">
<Description>
Method for getting 'OnFolderChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnFolderChange
]]></Implementation>
</Method>

<Method name="OnFolderChangeSet">
<Description>
Method for setting 'OnFolderChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnFolderChange=Value
 d ##this.SetEvent("OnFolderChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectionChangeGet">
<Description>
Method for getting 'OnSelectionChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectionChange
]]></Implementation>
</Method>

<Method name="OnSelectionChangeSet">
<Description>
Method for setting 'OnSelectionChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s i%OnSelectionChange=Value
 d ##this.SetEvent("OnSelectionChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTypeChangeGet">
<Description>
Method for getting 'OnTypeChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTypeChange
]]></Implementation>
</Method>

<Method name="OnTypeChangeSet">
<Description>
Method for setting 'OnTypeChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTypeChange=Value
 d ##this.SetEvent("OnTypeChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TitleGet">
<Description>
Method for getting 'Title' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Title")
 q tmp
]]></Implementation>
</Method>

<Method name="TitleSet">
<Description>
Method for setting 'Title' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Title",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Files</Value>
</Value>
<Value name="9">
<Value>OnCanClose</Value>
</Value>
<Value name="10">
<Value>OnClose</Value>
</Value>
<Value name="11">
<Value>OnFolderChange</Value>
</Value>
<Value name="12">
<Value>OnSelectionChange</Value>
</Value>
<Value name="13">
<Value>OnShow</Value>
</Value>
<Value name="14">
<Value>OnTypeChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMScrollBar">
<Description>
Represents a Windows scroll bar for manipulations with scrollable controls and windows.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73339</TimeCreated>

<Property name="Kind">
<Description>
Determines, is the scroll bar horizontal (if set to "sbHorizontal") or vertical (if set to "sbVertical").

Set Kind to indicate the orientation of the scrollbar. These are the possible values:
"sbHorizontal"
"sbVertical"
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",sbHorizontal,sbVertical"/>
</Property>

<Property name="LargeChange">
<Description>
Contains value of the 'Position' property increment or decrement for per-page scrolling.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Max">
<Description>
Contains the maximal value of the 'Position' property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Min">
<Description>
Contains the maximal value of the 'Position' property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when the 'Position' property changes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnScroll">
<Description>
Handler of event occuring when the scrollbar is scrolled with mouse or keyboard.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PageSize">
<Description>
Determines the size of the thumb tab (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Position">
<Description>
Contains the current scrollbar position.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SmallChange">
<Description>
Contains value of the 'Position' property increment or decrement for per-line scrolling.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMScrollBar"
]]></Implementation>
</Method>

<Method name="KindGet">
<Description>
Method for getting 'Kind' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Kind")
 q tmp
]]></Implementation>
</Method>

<Method name="KindSet">
<Description>
Method for setting 'Kind' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Kind",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LargeChangeGet">
<Description>
Method for getting 'LargeChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LargeChange")
 q tmp
]]></Implementation>
</Method>

<Method name="LargeChangeSet">
<Description>
Method for setting 'LargeChange' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LargeChange",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxGet">
<Description>
Method for getting 'Max' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Max")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxSet">
<Description>
Method for setting 'Max' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Max",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinGet">
<Description>
Method for getting 'Min' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Min")
 q tmp
]]></Implementation>
</Method>

<Method name="MinSet">
<Description>
Method for setting 'Min' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Min",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnScrollGet">
<Description>
Method for getting 'OnScroll' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnScroll
]]></Implementation>
</Method>

<Method name="OnScrollSet">
<Description>
Method for setting 'OnScroll' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnScroll=Value
 d ##this.SetEvent("OnScroll",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageSizeGet">
<Description>
Method for getting 'PageSize' property
.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageSize")
 q tmp
]]></Implementation>
</Method>

<Method name="PageSizeSet">
<Description>
Method for setting 'PageSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetParams">
<Description>
Assigns the values to the 'Position', 'Max', and 'Min' properties in one method call.
</Description>
<FormalSpec>APosition:%Integer,AMax:%Integer,AMin:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetParams",$lb(APosition,AMax,AMin))
 q
]]></Implementation>
</Method>

<Method name="SmallChangeGet">
<Description>
Method for getting 'SmallChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SmallChange")
 q tmp
]]></Implementation>
</Method>

<Method name="SmallChangeSet">
<Description>
Method for setting 'SmallChange' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SmallChange",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnChange</Value>
</Value>
<Value name="38">
<Value>OnScroll</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMScrollBox">
<Description>
Represents scrolling area, which may contain other controls, in a window.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73339</TimeCreated>

<Property name="AutoScroll">
<Description>
Determines, should scrollbars appear automatically when necessary (if set to "True"),
or they should be displayed or hidden by setting 'HorzScrollBar' and/or 'VertScrollBar'
properties (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines, should the scrollbox have a border around it. Possible values:<br>
"bsSingle" - single-line border<br>
"bsNone" - no border.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="HorzScrollBar">
<Description>
Contains oref of %TMControlScrollBar object used for manipulations with the horizontal scrollbar.
</Description>
<Type>%Library.TMControlScrollBar</Type>
</Property>

<Property name="VertScrollBar">
<Description>
Contains oref of %TMControlScrollBar object used for manipulations with the vertical scrollbar.
</Description>
<Type>%Library.TMControlScrollBar</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.HorzScrollBar.%Close()")
 $$$GENERATE(" s ##this.HorzScrollBar=##class(%TMControlScrollBar).%New($lb(##this.Address,0,""HorzScrollBar""))")
 $$$GENERATE(" d ##this.VertScrollBar.%Close()")
 $$$GENERATE(" s ##this.VertScrollBar=##class(%TMControlScrollBar).%New($lb(##this.Address,0,""VertScrollBar""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoScrollGet">
<Description>
Method for getting 'AutoScroll' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoScroll")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoScrollSet">
<Description>
Method for setting 'AutoScroll' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoScroll",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMScrollBox"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..HorzScrollBar.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..HorzScrollBar,""HorzScrollBar"","""")_result")
 $$$GENERATE(" s result=result_..VertScrollBar.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..VertScrollBar,""VertScrollBar"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>HorzScrollBar</Value>
</Value>
<Value name="38">
<Value>VertScrollBar</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMSeriesMarks">
<Description>
This class allows to control the series marks (text annotations for each series point) appearance.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73339</TimeCreated>

<Property name="Arrow">
<Description>
Contains oref of %TMChartPen object used to draw lines between the marks and corresponding points.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="ArrowLength">
<Description>
Determines the length (in pixels) of the lines between the marks and corresponding points. Default value is 16.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BackColor">
<Description>
Determines color (in hexadecimal RGB format) for filling marks background.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Clip">
<Description>
Determines, should the marks outside the chart region be displayed (if set to "False") or not (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Font">
<Description>
Contains oref of %TMFont object used to display text annotations.
</Description>
<Type>%Library.TMFont</Type>
</Property>

<Property name="Frame">
<Description>
Contains oref of %TMChartPen object used to draw rectangle around the marks.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines, what information should be displayed in the marks. Possible values:<br>
"smsValue" - the point value (usually vertical, for %TMHorizBarSeries - horizontal);<br>
"smsPercent" - the point value in percent format;<br>
"smsLabel" - the point label;<br>
"smsLabelValue" - the point label followed by the value;<br>
"smsLabelPercent" - the point label followed by the value in percent format;<br>
"smsLegend" - the same information as in the series legend;<br>
"smsPercentTotal" - the point value as percents of total;<br>
"smsLabelPercentTotal" - the point label followed by the value as percents of total;<br>
"smsXValue" - the point horizontal value.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",smsValue,smsPercent,smsLabel,smsLabelPercent,smsLabelValue,smsLegend,smsPercentTotal,smsLabelPercentTotal,smsXValue"/>
</Property>

<Property name="Transparent">
<Description>
Determines, should the mark background be filled (if set to "False", default value) or transparent (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines, should the marks be shown (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Arrow.%Close()")
 $$$GENERATE(" s ##this.Arrow=##class(%TMChartPen).%New($lb(##this.Address,0,""Arrow""))")
 $$$GENERATE(" d ##this.Font.%Close()")
 $$$GENERATE(" s ##this.Font=##class(%TMFont).%New($lb(##this.Address,0,""Font""))")
 $$$GENERATE(" d ##this.Frame.%Close()")
 $$$GENERATE(" s ##this.Frame=##class(%TMChartPen).%New($lb(##this.Address,0,""Frame""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ArrowLengthGet">
<Description>
Method for getting 'ArrowLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ArrowLength")
 q tmp
]]></Implementation>
</Method>

<Method name="ArrowLengthSet">
<Description>
Method for setting 'ArrowLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ArrowLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackColorGet">
<Description>
Method for getting 'BackColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackColor")
 q tmp
]]></Implementation>
</Method>

<Method name="BackColorSet">
<Description>
Method for setting 'BackColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BackColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMSeriesMarks"
]]></Implementation>
</Method>

<Method name="ClipGet">
<Description>
Method for getting 'Clip' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Clip")
 q tmp
]]></Implementation>
</Method>

<Method name="ClipSet">
<Description>
Method for setting 'Clip' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Clip",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Arrow.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Arrow,""Arrow"","""")_result")
 $$$GENERATE(" s result=result_..Font.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Font,""Font"","""")_result")
 $$$GENERATE(" s result=result_..Frame.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Frame,""Frame"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TransparentGet">
<Description>
Method for getting 'Transparent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Transparent")
 q tmp
]]></Implementation>
</Method>

<Method name="TransparentSet">
<Description>
Method for setting 'Transparent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Transparent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Arrow</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>Frame</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMSeriesPointer">
<Description>
This class allows to control the series pointers (shapes drawn near vertical coordinates of each series points) appearance.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73340</TimeCreated>

<Property name="Brush">
<Description>
Contains oref of %TMBrush object used for pointers filling.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="Draw3D">
<Description>
Determines, should the pointers edges look like shadowed (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HorizSize">
<Description>
Determines the pointers width (in logical pixels), default value - 4.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="InflateMargins">
<Description>
Determines, should the axis limits be expanded to display full pointers (if set to "True") or remain unchanged so that pointers near the chart edges will be cut (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Pen">
<Description>
Contains oref of %TMChartPen object used for drawing shapes outlines.
</Description>
<Type>%Library.TMChartPen</Type>
</Property>

<Property name="Style">
<Description>
Determines the shape of the pointers. Possible values: "psRectangle" (default value), "psCircle", "psTriangle", "psDownTriangle", "psCross", "psDiagCross" or "psStar".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",psRectangle,psCircle,psTriangle,psDownTriangle,psCross,psDiagCross,psStar,psDiamond,psSmallDot"/>
</Property>

<Property name="VertSize">
<Description>
Determines the pointers height (in logical pixels), default value - 4.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Visible">
<Description>
Determines, should the pointers be shown (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Brush.%Close()")
 $$$GENERATE(" s ##this.Brush=##class(%TMBrush).%New($lb(##this.Address,0,""Brush""))")
 $$$GENERATE(" d ##this.Pen.%Close()")
 $$$GENERATE(" s ##this.Pen=##class(%TMChartPen).%New($lb(##this.Address,0,""Pen""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMSeriesPointer"
]]></Implementation>
</Method>

<Method name="Draw3DGet">
<Description>
Method for getting 'Draw3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Draw3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Draw3DSet">
<Description>
Method for setting 'Draw3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Draw3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" s result=result_..Pen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pen,""Pen"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HorizSizeGet">
<Description>
Method for getting 'HorizSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HorizSize")
 q tmp
]]></Implementation>
</Method>

<Method name="HorizSizeSet">
<Description>
Method for setting 'HorizSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HorizSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="InflateMarginsGet">
<Description>
Method for getting 'InflateMargins' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("InflateMargins")
 q tmp
]]></Implementation>
</Method>

<Method name="InflateMarginsSet">
<Description>
Method for setting 'InflateMargins' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("InflateMargins",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VertSizeGet">
<Description>
Method for getting 'VertSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VertSize")
 q tmp
]]></Implementation>
</Method>

<Method name="VertSizeSet">
<Description>
Method for setting 'VertSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VertSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleGet">
<Description>
Method for getting 'Visible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Visible")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleSet">
<Description>
Method for setting 'Visible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Visible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Brush</Value>
</Value>
<Value name="9">
<Value>Pen</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMShape">
<Description>
%TMShape represents a geometric shape that can be drawn on a form.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73340</TimeCreated>

<Property name="Brush">
<Description>
Specifies the color and pattern used for filling the shape control.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="Pen">
<Description>
Specifies the pen used to outline the shape control.
</Description>
<Type>%Library.TMPen</Type>
</Property>

<Property name="Shape">
<Description><![CDATA[
Specifies the shape of the control.<br>
Set Shape to the geometric shape that should be drawn on the form. The Shape property has these possible values:<br>
Value	Meaning<br>
stCircle - The shape is a circle.<br>
stEllipse - The shape is an ellipse.<br>
stRectangle - The shape is a rectangle.<br>
stRoundRect - The shape is a rectangle with rounded corners.<br>
stRoundSquare - The shape is a square with rounded corners.<br>
stSquare - The shape is a square.<br>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",stRectangle,stSquare,stRoundRect,stRoundSquare,stEllipse,stCircle"/>
</Property>

<Method name="%OnClose">
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Brush.%Close()")
 $$$GENERATE(" s ##this.Brush=##class(%TMBrush).%New($lb(##this.Address,0,""Brush""))")
 $$$GENERATE(" d ##this.Pen.%Close()")
 $$$GENERATE(" s ##this.Pen=##class(%TMPen).%New($lb(##this.Address,0,""Pen""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMShape"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" s result=result_..Pen.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Pen,""Pen"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShapeGet">
<Description>
Method for getting 'Shape' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Shape")
 q tmp
]]></Implementation>
</Method>

<Method name="ShapeSet">
<Description>
Method for setting 'Shape' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Shape",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>Pen</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMSizeConstraints">
<Description>
Datatype class corresponding to the Constraints property of classes derived from %TMControl.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73340</TimeCreated>

<Property name="MaxHeight">
<Description>
Determines the maximum vertical size for the control (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MaxWidth">
<Description>
Determines the maximum horizontal size for the control (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinHeight">
<Description>
Determines the mimum vartical size for the control (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MinWidth">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMSizeConstraints"
]]></Implementation>
</Method>

<Method name="MaxHeightGet">
<Description>
Method for getting 'MaxHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxHeightSet">
<Description>
Method for setting 'MaxHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxWidthGet">
<Description>
Method for getting 'MaxWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MaxWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxWidthSet">
<Description>
Method for setting 'MaxWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MaxWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinHeightGet">
<Description>
Method for getting 'MinHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="MinHeightSet">
<Description>
Method for setting 'MinHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinWidthGet">
<Description>
Method for getting 'MinWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="MinWidthSet">
<Description>
Method for setting 'MinWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMSpeedButton">
<Description>
Represents a button on which graphic images and texts can be arranged and dynamically changed.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73340</TimeCreated>

<Property name="Alignment">
<Description><![CDATA[
Alignment can be one of the following values:<br>
<dl>
<dt>taLeftJustify</dt>
<dd>Text is left-justified: Lines all begin at the left edge of the control.</dd>
<dt>taCenter</dt>
<dd>Text is centered in the control.</dd>
<dt>taRightJustify</dt>
<dd>Text is right-justified: Lines all end at the right edge of the control.</dd>
</dl>
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AllowAllUp">
<Description>
Determines, can all speedbuttons belongind to one radiogroup (having the same 'GroupIndex' property) be unselected (if set to ""True""), or one of the button must be selected (if set to ""False"").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Cancel">
<Description>
Determines, should the OnClick event for this button occur when the Escape key is pressed. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Default">
<Description>
Determines, should the OnClick event for this button occur when the Enter key is pressed and focus is not set on another button. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DisplayMode">
<Description>
Determines, should the glyph, text caption, or both be displayed at the button face.
Possible values: "dmGlyphOnly", "dmTextOnly", or "dmBoth".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dmBoth,dmGlyphOnly,dmTextOnly"/>
</Property>

<Property name="Down">
<Description>
Contains ""True"" if the button is selected (pressed down), otherwise - ""False""."
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropdownAlways">
<Description>
If set to "True", the button always functions in dropdown mode. If set to "False", the mode
depends on the 'DropDownMenu' property.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropdownArrow">
<Description>
Determines, should the arrow be displayed when the button is in dropdown mode (if set to "True"),
or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropdownArrowWidth">
<Description>
Contains the number of pixels reserved for displaying dropdown arrow (default value is 9).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropdownCombo">
<Description>
If set to "True", the button is splitted into 2 parts: the left part acts like button, the right one -
like dropdown list.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropdownMenu">
<Description>
Contains oref of %TMPopupMenu object to popup when the button is clicked. If unassigned,
the OnClick event occurs.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Flat">
<Description>
If set to "False", a 3D border is displayed around the control, so the control looks like
lowered or raised. If set to "False", the button looks like flat.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Glyph">
<Description>
Contains oref of %TMBitMap object with one or upto five (according to the value of 'NumGlyphs'
property') images to be drawn at the button face. The 1st image corresponds to unselected button state, the 2nd one - to disabled button, the 3rd one - to clicked state, the 4th - to selected (pressed down) state, and the 5th is displayed on mouse over.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="GlyphMask">
<Description>
Optional, contains oref of %TMBitMap object with monochrome image used as the transparent mask.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="GroupIndex">
<Description>
Determines, is the button independent (if set to 0), or forms radiogroup together with other buttons
with the same value of this property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Description>
Contains the context ID of the help system screen related to this speedbutton.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HighlightWhenDown">
<Description>
Determines, should the button image be dithered when the button is down (if set to "True"),
or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ImageIndex">
<Description>
Specifies index of the image in the imagelist, oref of which is contained in the 'Image' property,
to be painted at the button face.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Images">
<Description>
Contains oref of %TMImageList object with collection of images for the button face.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Layout">
<Description><![CDATA[
Specifies the glyph or text caption layout on the button. Possible values:<br>
"blGlyphLeft", "blGlyphRight", "blGlyphTop" or "blGlyphBottom".
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",blGlyphLeft,blGlyphRight,blGlyphTop,blGlyphBottom"/>
</Property>

<Property name="Margin">
<Description>
Determines the distance (in pixels) between the button edge and glyph or text caption.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ModalResult">
<Description>
For modal forms, if the value of this property is not empty, clicking the button closes the form and sets the  ModalResult property of the parent form to this value.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="NoBorder">
<Description>
If set to "True", the value of the 'Flat' property is ignored and border is not displayed.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="NumGlyphs">
<Description>
Contains number of images in the 'Glyph' bitmap. Possible values are integers from 1 to 5.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OldDisabledStyle">
<Description>
For internal use.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnDropdown">
<Description>
Handler of event occuring when the button in dropdown mode is clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseEnter">
<Description>
Handler of event occuring when the mouse cursor enters inside the button.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseExit">
<Description>
Handler of event occuring when the mouse cursor leaves the button.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Opaque">
<Description>
Determines, is the button opaque (if set to "True"), or transparent (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RepeatDelay">
<Description>
Specifies delay (in milliseconds) between button click and repeating OnClick event.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RepeatInterval">
<Description>
Specifies interval (in milliseconds) between sequential OnClick events when the button is pressed
and held down longer, than the time specified in the 'RepeatDelay' property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Repeating">
<Description>
If set to "True", the sequence of OnClick events occurs when the button is pressed
and held down longer, than the time specified in the 'RepeatDelay' property.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowBorderWhenInactive">
<Description>
Determines, should the borders of flat buttons be displayed when the application is inactive
(if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Spacing">
<Description>
Determines the distance (in pixels) between the glyph and the text caption.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WordWrap">
<Description>
Determines, should the long text caption be wrapped and displayed in several lines (if set to "True") or displayed in single line (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Glyph.%Close()")
 $$$GENERATE(" s ##this.Glyph=##class(%TMBitmap).%New($lb(##this.Address,0,""Glyph""))")
 $$$GENERATE(" d ##this.GlyphMask.%Close()")
 $$$GENERATE(" s ##this.GlyphMask=##class(%TMBitmap).%New($lb(##this.Address,0,""GlyphMask""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("Alignment")
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AllowAllUpGet">
<Description>
Method for getting 'AllowAllUp' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AllowAllUp")
 q tmp
]]></Implementation>
</Method>

<Method name="AllowAllUpSet">
<Description>
Method for setting 'AllowAllUp' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AllowAllUp",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CancelGet">
<Description>
Method for getting 'Cancel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Cancel")
 q tmp
]]></Implementation>
</Method>

<Method name="CancelSet">
<Description>
Method for setting 'Cancel' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Cancel",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMSpeedButton"
]]></Implementation>
</Method>

<Method name="DefaultGet">
<Description>
Method for getting 'Default' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Default")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultSet">
<Description>
Method for setting 'Default' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Default",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DisplayModeGet">
<Description>
Method for getting 'DisplayMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DisplayMode")
 q tmp
]]></Implementation>
</Method>

<Method name="DisplayModeSet">
<Description>
Method for setting 'DisplayMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DisplayMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DownGet">
<Description>
Method for getting 'Down' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Down")
 q tmp
]]></Implementation>
</Method>

<Method name="DownSet">
<Description>
Method for setting 'Down' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Down",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DropdownAlwaysGet">
<Description>
Method for getting 'DropdownAlways' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DropdownAlways")
 q tmp
]]></Implementation>
</Method>

<Method name="DropdownAlwaysSet">
<Description>
Method for setting 'DropdownAlways' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropdownAlways",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DropdownArrowGet">
<Description>
Method for getting 'DropdownArrow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DropdownArrow")
 q tmp
]]></Implementation>
</Method>

<Method name="DropdownArrowSet">
<Description>
Method for setting 'DropdownArrow' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropdownArrow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DropdownArrowWidthGet">
<Description>
Method for getting 'DropdownArrowWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DropdownArrowWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="DropdownArrowWidthSet">
<Description>
Method for setting 'DropdownArrowWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropdownArrowWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DropdownComboGet">
<Description>
Method for getting 'DropdownCombo' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DropdownCombo")
 q tmp
]]></Implementation>
</Method>

<Method name="DropdownComboSet">
<Description>
Method for setting 'DropdownCombo' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropdownCombo",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DropdownMenuGet">
<Description>
Method for getting 'DropdownMenu' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DropdownMenu"))
 q tmp
]]></Implementation>
</Method>

<Method name="DropdownMenuSet">
<Description>
Method for setting 'DropdownMenu' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value'=0 s Value=Value.Address
 d ##this.SetProperty("DropdownMenu",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FlatGet">
<Description>
Method for getting 'Flat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Flat")
 q tmp
]]></Implementation>
</Method>

<Method name="FlatSet">
<Description>
Method for setting 'Flat' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Flat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Glyph.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Glyph,""Glyph"","""")_result")
 $$$GENERATE(" s result=result_..GlyphMask.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..GlyphMask,""GlyphMask"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GroupIndexGet">
<Description>
Method for getting 'GroupIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GroupIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="GroupIndexSet">
<Description>
Method for setting 'GroupIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GroupIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HighlightWhenDownGet">
<Description>
Method for getting 'HighlightWhenDown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HighlightWhenDown")
 q tmp
]]></Implementation>
</Method>

<Method name="HighlightWhenDownSet">
<Description>
Method for setting 'HighlightWhenDown' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HighlightWhenDown",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImageIndexGet">
<Description>
Method for getting 'ImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ImageIndexSet">
<Description>
Method for setting 'ImageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImagesGet">
<Description>
Method for getting 'Images' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Images"))
 q tmp
]]></Implementation>
</Method>

<Method name="ImagesSet">
<Description>
Method for setting 'Images' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i +Value'=0 s Value=Value.Address
 d ##this.SetProperty("Images",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LayoutGet">
<Description>
Method for getting 'Layout' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Layout")
 q tmp
]]></Implementation>
</Method>

<Method name="LayoutSet">
<Description>
Method for setting 'Layout' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Layout",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MarginGet">
<Description>
Method for getting 'Margin' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Margin")
 q tmp
]]></Implementation>
</Method>

<Method name="MarginSet">
<Description>
Method for setting 'Margin' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Margin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ModalResultGet">
<Description>
Method for getting 'ModalResult' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ModalResult")
 q tmp
]]></Implementation>
</Method>

<Method name="ModalResultSet">
<Description>
Method for setting 'ModalResult' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ModalResult",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NoBorderGet">
<Description>
Method for getting 'NoBorder' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("NoBorder")
 q tmp
]]></Implementation>
</Method>

<Method name="NoBorderSet">
<Description>
Method for setting 'NoBorder' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("NoBorder",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="NumGlyphsGet">
<Description>
Method for getting 'NumGlyphs' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("NumGlyphs")
 q tmp
]]></Implementation>
</Method>

<Method name="NumGlyphsSet">
<Description>
Method for setting 'NumGlyphs' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("NumGlyphs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OldDisabledStyleGet">
<Description>
Method for getting 'OldDisabledStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OldDisabledStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="OldDisabledStyleSet">
<Description>
Method for setting 'OldDisabledStyle' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OldDisabledStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDropdownGet">
<Description>
Method for getting 'OnDropdown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDropdown
]]></Implementation>
</Method>

<Method name="OnDropdownSet">
<Description>
Method for setting 'OnDropdown' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDropdown=Value
 d ##this.SetEvent("OnDropdown",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseEnterGet">
<Description>
Method for getting 'OnMouseEnter' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseEnter
]]></Implementation>
</Method>

<Method name="OnMouseEnterSet">
<Description>
Method for setting 'OnMouseEnter' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseEnter=Value
 d ##this.SetEvent("OnMouseEnter",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseExitGet">
<Description>
Method for getting 'OnMouseExit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseExit
]]></Implementation>
</Method>

<Method name="OnMouseExitSet">
<Description>
Method for setting 'OnMouseExit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseExit=Value
 d ##this.SetEvent("OnMouseExit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OpaqueGet">
<Description>
Method for getting 'Opaque' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Opaque")
 q tmp
]]></Implementation>
</Method>

<Method name="OpaqueSet">
<Description>
Method for setting 'Opaque' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Opaque",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RepeatDelayGet">
<Description>
Method for getting 'RepeatDelay' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RepeatDelay")
 q tmp
]]></Implementation>
</Method>

<Method name="RepeatDelaySet">
<Description>
Method for setting 'RepeatDelay' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RepeatDelay",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RepeatIntervalGet">
<Description>
Method for getting 'RepeatInterval' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RepeatInterval")
 q tmp
]]></Implementation>
</Method>

<Method name="RepeatIntervalSet">
<Description>
Method for setting 'RepeatInterval' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RepeatInterval",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RepeatingGet">
<Description>
Method for getting 'Repeating' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Repeating")
 q tmp
]]></Implementation>
</Method>

<Method name="RepeatingSet">
<Description>
Method for setting 'Repeating' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Repeating",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowBorderWhenInactiveGet">
<Description>
Method for getting 'ShowBorderWhenInactive' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowBorderWhenInactive")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowBorderWhenInactiveSet">
<Description>
Method for setting 'ShowBorderWhenInactive' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowBorderWhenInactive",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SpacingGet">
<Description>
Method for getting 'Spacing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Spacing")
 q tmp
]]></Implementation>
</Method>

<Method name="SpacingSet">
<Description>
Method for setting 'Spacing' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Spacing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WordWrapGet">
<Description>
Method for getting 'WordWrap' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WordWrap")
 q tmp
]]></Implementation>
</Method>

<Method name="WordWrapSet">
<Description>
Method for setting 'WordWrap' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WordWrap",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Glyph</Value>
</Value>
<Value name="26">
<Value>GlyphMask</Value>
</Value>
<Value name="27">
<Value>Images</Value>
</Value>
<Value name="28">
<Value>OnDropdown</Value>
</Value>
<Value name="29">
<Value>OnMouseEnter</Value>
</Value>
<Value name="30">
<Value>OnMouseExit</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMSplitter">
<Description>
Represents a splitter dividing the entire form of panel into 2 resizeable frames. Each frame should contain a single control or panel, one of which (together with splitter itself) must be anchored to the edge, and the second will occupy the rest of the client area.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73341</TimeCreated>

<Property name="Beveled">
<Description>
Determines, should the splitter to have beveled edges when moved. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas which methods can be used to draw customized graphic control.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="MinSize">
<Description>
Determines the miminum size (in pixels) which the splitter must leave for neighboring resizeable controls.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnCanResize">
<Description>
Handler of event occuring when the splitter is about to be moved by mouse.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMoved">
<Description>
Handler of event occuring when the splitter dragging is finished.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnPaint">
<Description>
Handler of event occuring when it is necessary to paint the splitter, giving opportunity to customize the splitter appearance with methods available through the Canvas property.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ResizeStyle">
<Description><![CDATA[
Determines the action made by moving splitter. Possible values:<br>
"rsNone" - no actions.<br>
"rsLine" -	a line simulating the moving splitter is drawn, without actual splitter moving.<br>
"rsUpdate" - default behaviour: the splitter can be dragged by mouse and corresponding controls can be resized.<br>
"rsPattern" - similar to "rsLine", but a pattern is shown instead of line.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",rsNone,rsLine,rsUpdate,rsPattern"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="BeveledGet">
<Description>
Method for getting 'Beveled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Beveled")
 q tmp
]]></Implementation>
</Method>

<Method name="BeveledSet">
<Description>
Method for setting 'Beveled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Beveled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMSplitter"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinSizeGet">
<Description>
Method for getting 'MinSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MinSize")
 q tmp
]]></Implementation>
</Method>

<Method name="MinSizeSet">
<Description>
Method for setting 'MinSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MinSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCanResizeGet">
<Description>
Method for getting 'OnCanResize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCanResize
]]></Implementation>
</Method>

<Method name="OnCanResizeSet">
<Description>
Method for setting 'OnCanResize' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCanResize=Value
 d ##this.SetEvent("OnCanResize",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMovedGet">
<Description>
Method for getting 'OnMoved' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnResize
]]></Implementation>
</Method>

<Method name="OnMovedSet">
<Description>
Method for setting 'OnMoved' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnResize=Value
 d ##this.SetEvent("OnResize",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnPaintGet">
<Description>
Method for getting 'OnPaint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnPaint
]]></Implementation>
</Method>

<Method name="OnPaintSet">
<Description>
Method for setting 'OnPaint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnPaint=Value
 d ##this.SetEvent("OnPaint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ResizeStyleGet">
<Description>
Method for getting 'ResizeStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ResizeStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="ResizeStyleSet">
<Description>
Method for setting 'ResizeStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ResizeStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Canvas</Value>
</Value>
<Value name="26">
<Value>OnMoved</Value>
</Value>
<Value name="27">
<Value>OnPaint</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMStatusBar">
<Description>
Represents a row of panels or single panel for output information about the application state.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73341</TimeCreated>

<Property name="AutoHint">
<Description>
Determines, should the text on the status bar be automatically set to the current hint
(if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnDrawPanel">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnHint">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Panels">
<Description>
Contains oref of %TMStatusPanels object with collection of panels to be arranged on the status bar.
</Description>
<Type>%Library.TMStatusPanels</Type>
</Property>

<Property name="SimplePanel">
<Description>
If set to "True", the status bar consists of a signge panel with text from the 'SimpleText' property.
If set to "False", the "Panels" property is used.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SimpleText">
<Description>
Specifies the text to be displayed on the status bar if the 'SimplePanel' is set to "True".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SizeGrip">
<Description>
Determines, can the status bar be resized by user (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UseSystemFont">
<Description>
Determines, should the system font be used for text on the status bar (if set to "True"),
or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Panels.%Close()")
 $$$GENERATE(" s ##this.Panels=##class(%TMStatusPanels).%New($lb(##this.Address,##this.GetProperty(""Panels"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoHintGet">
<Description>
Method for getting 'AutoHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoHint")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoHintSet">
<Description>
Method for setting 'AutoHint' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoHint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMStatusBar"
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Panels.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Panels,""Panels"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawPanelGet">
<Description>
Method for getting 'OnDrawPanel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawPanel
]]></Implementation>
</Method>

<Method name="OnDrawPanelSet">
<Description>
Method for setting 'OnDrawPanel' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawPanel=Value
 d ##this.SetEvent("OnDrawPanel",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHintGet">
<Description>
Method for getting 'OnHint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHint
]]></Implementation>
</Method>

<Method name="OnHintSet">
<Description>
Method for setting 'OnHint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHint=Value
 d ##this.SetEvent("OnHint",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SimplePanelGet">
<Description>
Method for getting 'SimplePanel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SimplePanel")
 q tmp
]]></Implementation>
</Method>

<Method name="SimplePanelSet">
<Description>
Method for setting 'SimplePanel' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SimplePanel",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SimpleTextGet">
<Description>
Method for getting 'SimpleText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SimpleText")
 q tmp
]]></Implementation>
</Method>

<Method name="SimpleTextSet">
<Description>
Method for setting 'SimpleText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SimpleText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGripGet">
<Description>
Method for getting 'SizeGrip' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SizeGrip")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeGripSet">
<Description>
Method for setting 'SizeGrip' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SizeGrip",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UseSystemFontGet">
<Description>
Method for getting 'UseSystemFont' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UseSystemFont")
 q tmp
]]></Implementation>
</Method>

<Method name="UseSystemFontSet">
<Description>
Method for setting 'UseSystemFont' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("UseSystemFont",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnDrawPanel</Value>
</Value>
<Value name="38">
<Value>OnHint</Value>
</Value>
<Value name="39">
<Value>Panels</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMStatusPanel">
<Description>
Represents a single panel of the Windows status bar.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73341</TimeCreated>

<Property name="Alignment">
<Description>
Detemines horizontal text alignment inside the rectangle aimed for this control. Possible values: "taLeftJustify", "taRightJustify", "taCenter".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",taLeftJustify,taRightJustify,taCenter"/>
</Property>

<Property name="AutoFit">
<Description>
Determines, should the width of the panel to be increased automatically to display
entire text (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Bevel">
<Description>
Determines edges of the control to be bevelled. Possible value: Cache' list ($lb) where only necessary from these strings: ""beLeft"", ""beTop"", ""beRight"" and ""beBottom"" are combined, or $lb() to cancel bevelling.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",pbNone,pbLowered,pbRaised"/>
</Property>

<Property name="BiDiMode">
<Description>
Specifies the bi-directional mode, controlling the direction in which text appears (left-to-right or right-to-left) and (optional) the default text alignment.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bdLeftToRight,bdRightToLeft,bdRightToLeftNoAlign,bdRightToLeftReadingOnly"/>
</Property>

<Property name="DateFormat">
<Description><![CDATA[
Contains a date format string for panels of "sptDate" and "sptDateTime" types. May contain
the following specifiers:<br>
"d" - the day as a number without leading zero;<br>
"dd" - the day as a number with leading zero;<br>
"ddd" - the day of week as 3-characters abbreviation;<br>
"dddd" - the day of week;<br>
"ddddd" - the date in short format;<br>
"dddddd" - the date in long format;<br>
"m" - the month as a number without leading zero;<br>
"mm" - the month as a number with leading zero;<br>
"mmm" - the month as 3-characters abbreviation;<br>
"mmmm" - the full month name;<br>
"yy" - the year as 2-digit number;<br>
"yyyy" - the year as 4-digit number;<br>
"/" - the date separator;<br>
Quoted characters are shown as is.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Enabled">
<Description>
Determines, should the panel be enabled (if set to "True") or not (if set to "False"). The only way to output something to disabled panel is 'OnOwnerDraw' handler.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GaugeAttrs">
<Description>
Contains oref of %TMGaugeAttrs object, allowing the progressmeter customization.
</Description>
<Type>%Library.TMGaugeAttrs</Type>
</Property>

<Property name="Glyph">
<Description>
Contains oref of %TMBitMap object with image to be painted on a panel of "sptGlyph" type.
</Description>
<Type>%Library.TMBitmap</Type>
</Property>

<Property name="Hint">
<Description>
Determines hint text to be shown on this panel.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClick">
<Description>
Handler of event occuring when the user clicks on the panel.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawPanel">
<Description>
Handler of event occuring when a panel of "sptOwnerDraw" type is to be redrawn.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnHintText">
<Description>
Handler of event occuring when a hint text is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PanelType">
<Description><![CDATA[
Determines the type of the panel. Possible values:<br>
"sptNormal" - regular status panel;<br>
"sptCapsLoc" - indicator of caps lock status;<br>
"sptNumLock" - indicator of num lock status;<br>
"sptScrollLock" - indicator of scroll lock status;<br>
"sptDate" - displays current date;<br>
"sptTime" - displays current time;<br>
"sptDateTime" - displays both date and time;<br>
"sptEllipsisText" - replaces end of too long text by '...';<br>
"sptEllipsisPath" - relpaces beginning of too long by '...';<br>
"sptGlyph" - paints "%TMBitMap" image;<br>
"sptGauge" - displays a progressmeter;<br>
"sptOwnerDraw" - draw the panel contents by %TMStatusBar canvas mehtods.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",sptNormal,sptCapsLock,sptNumLock,sptScrollLock,sptDate,sptTime,sptDateTime,sptEllipsisText,sptEllipsisPath,sptGlyph,sptGauge,sptOwnerDraw"/>
</Property>

<Property name="ParentBiDiMode">
<Description>
If set to "True", the panel uses its parent Bi-Directional mode, if set to "False" - not.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Text">
<Description>
Determines a text string to be displayed at the panel.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimeFormat">
<Description><![CDATA[
Contains a time format string for panels of "sptDate" and "sptDateTime" types. May contain
the following specifiers:<br>
"h" - the hours without leading zero;<br>
"hh" - the hours with leading zero;<br>
"n" - the minutes without leading zero (0-59);<br>
"nn" - the minutes with leading zero;<br>
"s" - the seconds without leading zero;<br>.
"ss" - the seconds with leading zero;<br>
"t" - the time in short format;<br>
"tt" - the time in long format;<br>
"am/pm" or "a/p" - use the 12-hour clock;<br>
":" - the time separator;<br>
Quoted characters are shown as is.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Width">
<Description>
Specifies the horizontal size of the panel (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" s %SMWOrefs(+##this)=##this")
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" s ##this.GaugeAttrs=##class(%TMGaugeAttrs).%New($lb(##this.Address,0,""GaugeAttrs""))")
 $$$GENERATE(" s ##this.Glyph=##class(%TMBitmap).%New($lb(##this.Address,0,""Glyph""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlignmentGet">
<Description>
Method for getting 'Alignment' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Alignment")
 q tmp
]]></Implementation>
</Method>

<Method name="AlignmentSet">
<Description>
Method for setting 'Alignment' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Alignment",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoFitGet">
<Description>
Method for getting 'AutoFit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoFit")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoFitSet">
<Description>
Method for setting 'AutoFit' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoFit",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BevelGet">
<Description>
Method for getting 'Bevel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Bevel")
 q tmp
]]></Implementation>
</Method>

<Method name="BevelSet">
<Description>
Method for setting 'Bevel' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Bevel",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BiDiModeGet">
<Description>
Method for getting 'BiDiMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BiDiMode")
 q tmp
]]></Implementation>
</Method>

<Method name="BiDiModeSet">
<Description>
Method for setting 'BiDiMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BiDiMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMStatusPanel"
]]></Implementation>
</Method>

<Method name="DateFormatGet">
<Description>
Method for getting 'DateFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DateFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="DateFormatSet">
<Description>
Method for setting 'DateFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DateFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EnabledGet">
<Description>
Method for getting 'Enabled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Enabled")
 q tmp
]]></Implementation>
</Method>

<Method name="EnabledSet">
<Description>
Method for setting 'Enabled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Enabled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" s result=##class(=%TMPersistent)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..GaugeAttrs.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..GaugeAttrs,""GaugeAttrs"","""")_result")
 $$$GENERATE(" s result=result_..Glyph.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Glyph,""Glyph"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HintGet">
<Description>
Method for getting 'Hint' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Hint")
 q tmp
]]></Implementation>
</Method>

<Method name="HintSet">
<Description>
Method for setting 'Hint' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Hint",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnClickGet">
<Description>
Method for getting 'OnClick' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClick
]]></Implementation>
</Method>

<Method name="OnClickSet">
<Description>
Method for setting 'OnClick' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClick=Value
 d ##this.SetEvent("OnClick",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawPanelGet">
<Description>
Method for getting 'OnDrawPanel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawPanel
]]></Implementation>
</Method>

<Method name="OnDrawPanelSet">
<Description>
Method for setting 'OnDrawPanel' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawPanel=Value
 d ##this.SetEvent("OnDrawPanel",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHintTextGet">
<Description>
Method for getting 'OnHintText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHintText
]]></Implementation>
</Method>

<Method name="OnHintTextSet">
<Description>
Method for setting 'OnHintText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHintText=Value
 d ##this.SetEvent("OnHintText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PanelTypeGet">
<Description>
Method for getting 'PanelType' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PanelType")
 q tmp
]]></Implementation>
</Method>

<Method name="PanelTypeSet">
<Description>
Method for setting 'PanelType' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PanelType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentBiDiModeGet">
<Description>
Method for getting 'ParentBiDiMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ParentBiDiMode")
 q tmp
]]></Implementation>
</Method>

<Method name="ParentBiDiModeSet">
<Description>
Method for setting 'ParentBiDiMode' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ParentBiDiMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextGet">
<Description>
Method for getting 'Text' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Text")
 q tmp
]]></Implementation>
</Method>

<Method name="TextSet">
<Description>
Method for setting 'Text' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Text",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TimeFormatGet">
<Description>
Method for getting 'TimeFormat' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TimeFormat")
 q tmp
]]></Implementation>
</Method>

<Method name="TimeFormatSet">
<Description>
Method for setting 'TimeFormat' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TimeFormat",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WidthGet">
<Description>
Method for getting 'Width' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Width")
 q tmp
]]></Implementation>
</Method>

<Method name="WidthSet">
<Description>
Method for setting 'Width' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Width",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>GaugeAttrs</Value>
</Value>
<Value name="9">
<Value>Glyph</Value>
</Value>
<Value name="10">
<Value>OnClick</Value>
</Value>
<Value name="11">
<Value>OnDrawPanel</Value>
</Value>
<Value name="12">
<Value>OnHintText</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMStatusPanels">
<Description>
Represents collection of %TMStatusPanel objects to be displayed as status bar.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73341</TimeCreated>

<Property name="Count">
<Description>
Contains number of items in the collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="Add">
<Description>
Creates a new %TMStatusPanel instance and adds it to the end of array, returns oref of created item.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.TMStatusPanel</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,wait
 s wait=$G(%ZoMRi(2153))
 s %ZoMRi(2153)=""
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("Add",$lb()))
 s %ZoMRi(2153)=wait
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMStatusPanels"
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetItem">
<Description>
Returns oref of the collection item specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMStatusPanel</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetItem",$lb(Index)))
 q tmp
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Creates a new %TMStatusPanel instance and inserts it to specified place of the array,
returns oref of the created collection item.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMStatusPanel</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Insert",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMStringGrid">
<Description>
Strings-oriented variation of %TMButtonGrid with slightly reduced set of properties and events.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73341</TimeCreated>

<Property name="BorderStyle">
<Description><![CDATA[
Determines the appearance of the grid border. Possible values:<br>
"bsSingle" - single-line border (not resizeable).<br>
"bsNone" - no border (not resizeable).<br>
"bsDialog" - usual dialog box border (not resizeable).<br>
"bsSizeable" - usual resizeable border.<br>
"bsToolWindow" - 	single-line border, smaller caption (not resizeable).<br>
"bsSizeToolWin" - usual resizeable border, smaller caption.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of %TMCanvas object to be used to display owner-drawn items.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="Col">
<Description>
Determines the index of column containing selected cell. Possible values: integers from 0 to ColCount-1.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColCount">
<Description>
Represents the total number of the grid columns.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ColWidths">
<Description>
Contains Cache' list ($lb()) of widths (in pixels) of each grid column.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DefaultColWidth">
<Description>
Determines horizontal size (in pixels) for all columns before they are resized.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultDrawing">
<Description>
Determines, should the cells be painted automatically (if set to "True") or manually, using the 'DrawCell' method (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultRowHeight">
<Description>
Determines vertical size (in pixels) for all rows before they are resized.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EditorMode">
<Description>
Determines, is the grid is in the edit mode (user can edit cells values) (if set to "True") or not (if set to "False". Setting this property has no effect if the 'Options' property disables the edit mode toggle.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedColor">
<Description>
Determines background color (in hexadecimal RGB format) for the fixed cells.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedCols">
<Description>
Determines the number of fixed (leftmost and non-scrollable) columns in the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FixedRows">
<Description>
Determines the number of fixed (topmost and non-scrollable) rows in the grid.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridHeight">
<Description>
Represents the grid client area height (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridLineWidth">
<Description>
Determines the thickness of grid line (in pixels, default value is 1).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="GridWidth">
<Description>
Represents the grid client area width (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LeftCol">
<Description>
Represents the number of the leftmost visible column of the grid. The columns numeration starts from 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnColumnMoved">
<Description>
Handler of event occuring when the user moved a grid column.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawCell">
<Description>
Handler of event occuring when a cell needs to be repainted.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditMask">
<Description>
Handler of event occuring when the text pattern for inplace editor is retrieved.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetEditText">
<Description>
Handler of event occuring when user starts the cell text editing. Allows to prepare initial text for editing.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRowMoved">
<Description>
Handler of event occuring when the user moved a grid row.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSelectCell">
<Description>
Handler of event occuring when another cell has been selected.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnSetEditText">
<Description>
Handler of event occuring when user finishes the cell text editing.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnTopLeftChanged">
<Description>
Handler of event occuring when the grid has been scrolled.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Options">
<Description><![CDATA[
Determines the grid appearance and capabilities. Possible value: Cache list ($lb()) where only necessary from the following strings are combined:<br>
"goFixedVertLine" - draw vertical lines between the fixed (non-scrolling) columns;<br>
"goFixedHorzLine" - draw horizontal lines between the fixed (non-scrolling) rows;<br>
"goVertLine" - draw vertical lines between usual (scrollable) columns;<br>
"goHorzLine" - draw horizontal lines between usual (scrollable) rows;<br>
"goRangeSelect" - allow to select ranges of cells (for read-only grids);<br>
"goDrawFocusSelected" - highlight cells with input focus;<br>
"goRowSizing" - allow to resize separate scrollable rows;<br>
"goColSizing" - allow to resize separate scrollable columns;<br>
"goRowMoving" - allow to move scrollable rows by the mouse;<br>
"goColMoving" - allow to move scrollable columns by the mouse;<br>
"goEditing" - allows to enter edit mode for the cells;<br>
"goTabs" - the 'Tab' and 'Shift-Tab' keys moves focus between the columns;<br>
"goRowSelect" - select entire row rather than single cell;<br>
"goAlwaysShowEditor" - the edit mode is always on;<br>
"goThumbTracking" - update the grid image while the scrollbar thumb is being dragged, do not wait for the thumb release.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(goFixedVertLine,goFixedHorzLine,goVertLine,goHorzLine,goRangeSelect,goDrawFocusSelected,goRowSizing,goColSizing,goRowMoving,goColMoving,goEditing,goTabs,goRowSelect,goAlwaysShowEditor,goThumbTracking)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Row">
<Description>
Determines the index of row containing selected cell. Possible values: integers from 0 to RowCount-1.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RowCount">
<Description>
Represents the total number of the grid rows.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollBars">
<Description>
Determines, what scrollbars should be shown if there are invisible rows or columns. Possible values: "ssNone", "ssHorizontal", "ssVertical" or "ssBoth".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",ssNone,ssHorizontal,ssVertical,ssBoth"/>
</Property>

<Property name="TopRow">
<Description>
Represents index of the topmost visible scrollable row.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleColCount">
<Description>
Indicates the number of visible columns (excluding fixed columns).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleRowCount">
<Description>
Indicates the number of visible rows (excluding fixed rows).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CellRect">
<Description>
Returns the screen coordinates of the specified cell (in format $lb(Left,Top,Right,Bottom)).
</Description>
<FormalSpec>ACol:%Integer,ARow:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CellRect",$lb(ACol,ARow))
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMStringGrid"
]]></Implementation>
</Method>

<Method name="ColCountGet">
<Description>
Method for getting 'ColCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="ColCountSet">
<Description>
Method for setting 'ColCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColGet">
<Description>
Method for getting 'Col' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Col")
 q tmp
]]></Implementation>
</Method>

<Method name="ColSet">
<Description>
Method for setting 'Col' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Col",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ColWidthsGet">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ..GetProperty("ColWidths")
]]></Implementation>
</Method>

<Method name="ColWidthsSet">
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..SetProperty("ColWidths",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultColWidthGet">
<Description>
Method for getting 'DefaultColWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultColWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultColWidthSet">
<Description>
Method for setting 'DefaultColWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultColWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultDrawingGet">
<Description>
Method for getting 'DefaultDrawing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultDrawing")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultDrawingSet">
<Description>
Method for setting 'DefaultDrawing' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultDrawing",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultRowHeightGet">
<Description>
Method for getting 'DefaultRowHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DefaultRowHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultRowHeightSet">
<Description>
Method for setting 'DefaultRowHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DefaultRowHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EditorModeGet">
<Description>
Method for getting 'EditorMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EditorMode")
 q tmp
]]></Implementation>
</Method>

<Method name="EditorModeSet">
<Description>
Method for setting 'EditorMode' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("EditorMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColorGet">
<Description>
Method for getting 'FixedColor' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedColor")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColorSet">
<Description>
Method for setting 'FixedColor' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedColsGet">
<Description>
Method for getting 'FixedCols' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedCols")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedColsSet">
<Description>
Method for setting 'FixedCols' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedCols",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FixedRowsGet">
<Description>
Method for getting 'FixedRows' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FixedRows")
 q tmp
]]></Implementation>
</Method>

<Method name="FixedRowsSet">
<Description>
Method for setting 'FixedRows' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FixedRows",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetCells">
<Description>
Returns the value of the specified cell. Columns and rows numbering starts from 0.
</Description>
<FormalSpec>Col:%Integer,Row:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetCells",$lb(Col,Row))
 q tmp
]]></Implementation>
</Method>

<Method name="GetColWidth">
<Description>
Returns the width (in pixels) of the column specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetColWidth",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetObjects">
<Description>
Returns oref of the object stored in the specified row.
</Description>
<FormalSpec>Col:%Integer,Row:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetObjects",$lb(Col,Row))
 q tmp
]]></Implementation>
</Method>

<Method name="GetRowHeight">
<Description>
Returns the height (in pixels) of the row specified by its index.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetRowHeight",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetTabStop">
<Description>
Returns "True" if the focus can be moved to the specified column by the 'Tab' key, otherwise - "False".
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetTabStop",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GridHeightGet">
<Description>
Method for getting 'GridHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="GridHeightSet">
<Description>
Method for setting 'GridHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridLineWidthGet">
<Description>
Method for getting 'GridLineWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridLineWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridLineWidthSet">
<Description>
Method for setting 'GridLineWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridLineWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GridWidthGet">
<Description>
Method for getting 'GridWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("GridWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="GridWidthSet">
<Description>
Method for setting 'GridWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("GridWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LeftColGet">
<Description>
Method for getting 'LeftCol' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LeftCol")
 q tmp
]]></Implementation>
</Method>

<Method name="LeftColSet">
<Description>
Method for setting 'LeftCol' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LeftCol",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MouseCoord">
<Description>
Converts the specified screen coordinate into corresponding cell indices ($lb(Column,Row)).
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MouseCoord",$lb(X,Y))
 q tmp
]]></Implementation>
</Method>

<Method name="OnColumnMovedGet">
<Description>
Method for getting 'OnColumnMoved' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnColumnMoved
]]></Implementation>
</Method>

<Method name="OnColumnMovedSet">
<Description>
Method for setting 'OnColumnMoved' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnColumnMoved=Value
 d ##this.SetEvent("OnColumnMoved",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawCellGet">
<Description>
Method for getting 'OnDrawCell' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawCell
]]></Implementation>
</Method>

<Method name="OnDrawCellSet">
<Description>
Method for setting 'OnDrawCell' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawCell=Value
 d ##this.SetEvent("OnDrawCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditMaskGet">
<Description>
Method for getting 'OnGetEditMask' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditMask
]]></Implementation>
</Method>

<Method name="OnGetEditMaskSet">
<Description>
Method for setting 'OnGetEditMask' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditMask=Value
 d ##this.SetEvent("OnGetEditMask",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetEditTextGet">
<Description>
Method for getting 'OnGetEditText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetEditText
]]></Implementation>
</Method>

<Method name="OnGetEditTextSet">
<Description>
Method for setting 'OnGetEditText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetEditText=Value
 d ##this.SetEvent("OnGetEditText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRowMovedGet">
<Description>
Method for getting 'OnRowMoved' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRowMoved
]]></Implementation>
</Method>

<Method name="OnRowMovedSet">
<Description>
Method for setting 'OnRowMoved' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRowMoved=Value
 d ##this.SetEvent("OnRowMoved",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSelectCellGet">
<Description>
Method for getting 'OnSelectCell' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSelectCell
]]></Implementation>
</Method>

<Method name="OnSelectCellSet">
<Description>
Method for setting 'OnSelectCell' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSelectCell=Value
 d ##this.SetEvent("OnSelectCell",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnSetEditTextGet">
<Description>
Method for getting 'OnSetEditText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnSetEditText
]]></Implementation>
</Method>

<Method name="OnSetEditTextSet">
<Description>
Method for setting 'OnSetEditText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnSetEditText=Value
 d ##this.SetEvent("OnSetEditText",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTopLeftChangedGet">
<Description>
Method for getting 'OnTopLeftChanged' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTopLeftChanged
]]></Implementation>
</Method>

<Method name="OnTopLeftChangedSet">
<Description>
Method for setting 'OnTopLeftChanged' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTopLeftChanged=Value
 d ##this.SetEvent("OnTopLeftChanged",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OptionsGet">
<Description>
Method for getting 'Options' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Options")
 q tmp
]]></Implementation>
</Method>

<Method name="OptionsSet">
<Description>
Method for setting 'Options' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Options",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowCountGet">
<Description>
Method for getting 'RowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="RowCountSet">
<Description>
Method for setting 'RowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowGet">
<Description>
Method for getting 'Row' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Row")
 q tmp
]]></Implementation>
</Method>

<Method name="RowSet">
<Description>
Method for setting 'Row' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Row",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollBarsGet">
<Description>
Method for getting 'ScrollBars' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollBars")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollBarsSet">
<Description>
Method for setting 'ScrollBars' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollBars",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetCells">
<Description>
Assigns the value for the specified cell. Columns and rows numbering starts from 0.
</Description>
<FormalSpec>Col:%Integer,Row:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetCells",$lb(Col,Row,Value))
 q
]]></Implementation>
</Method>

<Method name="SetColWidth">
<Description>
Changes the width (in pixels) of the column specified by its index.
</Description>
<FormalSpec>Index:%Integer,Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetColWidth",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetObjects">
<Description>
Stores oref of the object in the specified row.
</Description>
<FormalSpec>Col:%Integer,Row:%Integer,Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetObjects",$lb(Col,Row,Value))
 q
]]></Implementation>
</Method>

<Method name="SetRowCells">
<Description>
Set all cells of row into values specified in RowValue as $LB(Cell1,Cell2,Cell3...)
</Description>
<FormalSpec>Row:%Integer,RowValue:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ..RunMethod("SetRowCells",$lb(Row,RowValue))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetRowHeight">
<Description>
Changes the height (in pixels) of the row specified by its index.
</Description>
<FormalSpec>Index:%Integer,Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetRowHeight",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetTabStop">
<Description>
Determines, can the focus be moved to the specified column by the 'Tab' key.
</Description>
<FormalSpec>Index:%Integer,Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetTabStop",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="TopRowGet">
<Description>
Method for getting 'TopRow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TopRow")
 q tmp
]]></Implementation>
</Method>

<Method name="TopRowSet">
<Description>
Method for setting 'TopRow' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopRow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleColCountGet">
<Description>
Method for getting 'VisibleColCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleColCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleColCountSet">
<Description>
Method for setting 'VisibleColCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleColCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleRowCountGet">
<Description>
Method for getting 'VisibleRowCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleRowCount")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleRowCountSet">
<Description>
Method for setting 'VisibleRowCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleRowCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>OnColumnMoved</Value>
</Value>
<Value name="39">
<Value>OnDrawCell</Value>
</Value>
<Value name="40">
<Value>OnGetEditMask</Value>
</Value>
<Value name="41">
<Value>OnGetEditText</Value>
</Value>
<Value name="42">
<Value>OnRowMoved</Value>
</Value>
<Value name="43">
<Value>OnSelectCell</Value>
</Value>
<Value name="44">
<Value>OnSetEditText</Value>
</Value>
<Value name="45">
<Value>OnTopLeftChanged</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMStringList">
<Description>
Represents a list of strings. This class is derived from %TMStrings and provides events handlers allowing to respond to strings adding, deleting or modifying.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMStrings</Super>
<TimeCreated>64314,73342</TimeCreated>

<Property name="OnChange">
<Description>
Handler of event occuring when the contents of the string list has been changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChanging">
<Description>
Handler of event occuring immediately before changing the contents of the string list.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMStringList"
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangingGet">
<Description>
Method for getting 'OnChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChanging
]]></Implementation>
</Method>

<Method name="OnChangingSet">
<Description>
Method for setting 'OnChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChanging=Value
 d ##this.SetEvent("OnChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnChange</Value>
</Value>
<Value name="9">
<Value>OnChanging</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMStrings">
<Description>
Datatype class representing a collection of text strings and methods to operate with these strings.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73342</TimeCreated>

<Property name="Capacity">
<Description>
On read: the same as the Count property. On write: no sense.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CommaText">
<Description>
Contains all strings in the collection delimited by commas. Inadequate if the total strings size exceeds 32K.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Count">
<Description>
Represents the number of strings in the collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Strings">
<Description>
Alias of the Text property.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Text">
<Description>
Contains all strings in the collection delimited by CRLFs. Inadequate if the total strings size exceeds 32K.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="Add">
<Description>
Adds the specified text string to the end of the collection, returns the index of added string.
</Description>
<FormalSpec>S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Add",$lb(S))
 q tmp
]]></Implementation>
</Method>

<Method name="AddObject">
<Description>
Adds the specified text string with associated object specified by its oref to the end of the collection. Returns the index of added string.
</Description>
<FormalSpec>S:%String,AObject:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddObject",$lb(S,AObject))
 q tmp
]]></Implementation>
</Method>

<Method name="AddStrings">
<Description>
Adds all strings (with associated objects, if present) from the specified %TMStrings collection to the end of the current collection.
</Description>
<FormalSpec>Strings:%TMStrings</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddStrings",$lb(Strings))
 q
]]></Implementation>
</Method>

<Method name="Append">
<Description>
Similar to the Add method, but returns nothing.
</Description>
<FormalSpec>S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Append",$lb(S))
 q
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
This method is called automatically every time when some method starts to change the strings collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="CapacityGet">
<Description>
Method for getting 'Capacity' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Capacity")
 q tmp
]]></Implementation>
</Method>

<Method name="CapacitySet">
<Description>
Method for setting 'Capacity' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Capacity",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMStrings"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Removes all strings from the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="CommaTextGet">
<Description>
Method for getting 'CommaText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CommaText")
 q tmp
]]></Implementation>
</Method>

<Method name="CommaTextSet">
<Description>
Method for setting 'CommaText' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CommaText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Deletes the string specified by its index from the collection. Indexing starts from 0.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb(Index))
 q
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
This method is called automatically every time when some method completes changing the strings collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="Equals">
<Description>
Returns "True" if the current and specified by its oref collections are identical (disregarding associated objects), or "False" if the collections differ in length, in at least one string, or in the strings order.
</Description>
<FormalSpec>Strings:%TMStrings</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Equals",$lb(Strings))
 q tmp
]]></Implementation>
</Method>

<Method name="Exchange">
<Description>
Exchanges indices (positions) of specified strings.
</Description>
<FormalSpec>Index1:%Integer,Index2:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Exchange",$lb(Index1,Index2))
 q
]]></Implementation>
</Method>

<Method name="GetNames">
<Description>
Returns the name part of the string specified by its index, if the string contains a substring like "Name=Value", otherwise - empty string.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetNames",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetObjects">
<Description>
Returns oref of the object associated with the string specified by its index, if present, otherwise - empty string.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetObjects",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetStrings">
<Description>
Returns the string specified by its index. Possible values of index are integers from 0 to Count-1.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetStrings",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="GetText">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetText",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetValues">
<Description>
Returns the value part of the string specified by its index, if the string contains a substring like "Name=Value", otherwise - empty string.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetValues",$lb(Index))
 q tmp
]]></Implementation>
</Method>

<Method name="IndexOf">
<Description>
Returns the index of the first occurrence of the specified string (case-insencitive!), or -1 if the string not found.
</Description>
<FormalSpec>S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IndexOf",$lb(S))
 q tmp
]]></Implementation>
</Method>

<Method name="IndexOfName">
<Description>
Returns the index of the first occurrence of the string containing a substring like "Name=Value" with specified name part, or -1 if such string not found.
</Description>
<FormalSpec>Name:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IndexOfName",$lb(Name))
 q tmp
]]></Implementation>
</Method>

<Method name="IndexOfObject">
<Description>
Returns the index of the first occurrence of the string containing the associated object specified by its oref, or -1 if such string not found.
</Description>
<FormalSpec>AObject:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IndexOfObject",$lb(AObject))
 q tmp
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Inserts the specified text string at the specified position in the collection.
</Description>
<FormalSpec>Index:%Integer,S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Insert",$lb(Index,S))
 q
]]></Implementation>
</Method>

<Method name="InsertObject">
<Description>
Inserts the specified text string with associated object specified by its oref at the specified position in the collection.
</Description>
<FormalSpec>Index:%Integer,S:%String,AObject:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("InsertObject",$lb(Index,S,AObject))
 q
]]></Implementation>
</Method>

<Method name="LoadFromBLOB">
<FormalSpec>BLOBIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromBLOB",$lb(BLOBIndex))
 q
]]></Implementation>
</Method>

<Method name="LoadFromFile">
<Description>
Adds all strings containg in the specified file to the end of the collection.
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromFile",$lb(FileName))
 q
]]></Implementation>
</Method>

<Method name="LoadFromStream">
<FormalSpec>StreamOref:%AbstractStream</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("LoadFromStream",$lb(+StreamOref))
 q
]]></Implementation>
</Method>

<Method name="Move">
<Description>
Changes the position of the specified string (with associated object, if present).
</Description>
<FormalSpec>CurIndex:%Integer,NewIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Move",$lb(CurIndex,NewIndex))
 q
]]></Implementation>
</Method>

<Method name="SaveToBLOB">
<FormalSpec>BLOBIndex:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToBLOB",$lb(BLOBIndex))
 q
]]></Implementation>
</Method>

<Method name="SaveToFile">
<Description>
Saves all strings from the collection in the specified file.
</Description>
<FormalSpec>FileName:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToFile",$lb(FileName))
 q
]]></Implementation>
</Method>

<Method name="SaveToStream">
<FormalSpec>StreamOref:%AbstractStream</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SaveToStream",$lb(+StreamOref))
 q
]]></Implementation>
</Method>

<Method name="SetObjects">
<Description>
See the GetObjects method description.
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetObjects",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetStrings">
<Description>
See the GetStrings method description.
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetStrings",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="SetText">
<Description>
Removes all strings from the collection and adds strings from the Text parameter (delimited by CRLF).
</Description>
<FormalSpec>Text:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetText",$lb(Text))
 q
]]></Implementation>
</Method>

<Method name="SetValues">
<Description>
See the GetValues method description.
</Description>
<FormalSpec>Index:%Integer,Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetValues",$lb(Index,Value))
 q
]]></Implementation>
</Method>

<Method name="StringsGet">
<Description>
Method for getting 'Strings' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("Text")
]]></Implementation>
</Method>

<Method name="StringsSet">
<Description>
Method for setting 'Strings' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Text",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextGet">
<Description>
Method for getting 'Text' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##this.GetProperty("Text")
]]></Implementation>
</Method>

<Method name="TextSet">
<Description>
Method for setting 'Text' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Text",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMTabControl">
<Description>
Represents a control with dynamic contents depending on the tab selected.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73342</TimeCreated>

<Property name="Canvas">
<Description>
Contains oref of canvas which methods can be used to draw customized tabs and to repaint the page.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="DisplayRect">
<Description>
Determines rectangle confining client area of the control. Format: $lb(Left,Top,Right,Bottom).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HotTrack">
<Description>
If set to "True", the tabs under the mouse cursor will be highlighted, otherwise - not.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Images">
<Description>
Contains oref of the %TMImageList object with the images to be displayed on the tabs.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MultiLine">
<Description>
If set to "True", the tabs may be displayed in more than one row if necessary. Otherwise, the all tabs may occupy a single row only.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="MultiSelect">
<Description>
If set to "True" and the Style property contains "tsButtons" or "tsFlatButtons", multiple tabs can be selected, otherwise only one tab can be selected in a time.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when another tab has been selected, giving opportunity to update the control contents.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChanging">
<Description>
Handler of event occuring when the currenlty selected tab is about to be switched, giving opportunity to protect it from unwanted switching by setting the AllowChange handler parameter to "False".
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawTab">
<Description>
Handler of event occuring when the tab is about to be displayed and the OwnerDraw property is set to "True", giving opportunity to draw customized tabs.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetImageIndex">
<Description>
Handler of event occuring when the image corresponding to a tab is about to be displayed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OwnerDraw">
<Description>
If set to "True", allows the OnDrawTab event to be raised when a tab is about to be drawn.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RaggedRight">
<Description>
Determines, should the tabs rows to be stretched correspondingly with the control width. Possible values: "True" or "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScrollOpposite">
<Description>
If set to "True", the value of the TabPosistion property determines the direction in which deselected tabs row must be moved. Otherwise, the deselected row moves to the back of all other rows.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description><![CDATA[
Determines the tabs appearance. Possible values:<br>
"tsTabs" - usual tabs.<br>
"tsButtons" - 3D buttons.<br>
"tsFlatButtons" - flat buttons.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tsTabs,tsButtons,tsFlatButtons"/>
</Property>

<Property name="TabHeight">
<Description>
Determines the tabs vertical size (in pixels). If set to 0, the tabs height corresponds to there text height.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabIndex">
<Description>
Contains index of selected tab (indexing starts from 0) or -1, if no tab is selected.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabPosition">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tpTop,tpBottom,tpLeft,tpRight"/>
</Property>

<Property name="TabWidth">
<Description>
Determines the tabs horizontal size (in pixels). If set to 0, the tabs height corresponds to there text width.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tabs">
<Description>
Contains oref of the collection of tabs captions as of %TMStrings object.
</Description>
<Type>%Library.TMStrings</Type>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" d ##this.Tabs.%Close()")
 $$$GENERATE(" s ##this.Tabs=##class(%TMStrings).%New($lb(##this.Address,##this.GetProperty(""Tabs"")))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTabControl"
]]></Implementation>
</Method>

<Method name="DisplayRectGet">
<Description>
Method for getting 'DisplayRect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DisplayRect")
 q tmp
]]></Implementation>
</Method>

<Method name="DisplayRectSet">
<Description>
Method for setting 'DisplayRect' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DisplayRect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Tabs.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Tabs,""Tabs"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HotTrackGet">
<Description>
Method for getting 'HotTrack' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HotTrack")
 q tmp
]]></Implementation>
</Method>

<Method name="HotTrackSet">
<Description>
Method for setting 'HotTrack' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HotTrack",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImagesGet">
<Description>
Method for getting 'Images' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Images"))
 q tmp
]]></Implementation>
</Method>

<Method name="ImagesSet">
<Description>
Method for setting 'Images' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 i Value="" s tmp=""
 e  s tmp=Value.Address
 d ##this.SetProperty("Images",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MultiLineGet">
<Description>
Method for getting 'MultiLine' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiLine")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiLineSet">
<Description>
Method for setting 'MultiLine' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiLine",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MultiSelectGet">
<Description>
Method for getting 'MultiSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("MultiSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="MultiSelectSet">
<Description>
Method for setting 'MultiSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("MultiSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangingGet">
<Description>
Method for getting 'OnChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChanging
]]></Implementation>
</Method>

<Method name="OnChangingSet">
<Description>
Method for setting 'OnChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChanging=Value
 d ##this.SetEvent("OnChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawTabGet">
<Description>
Method for getting 'OnDrawTab' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawTab
]]></Implementation>
</Method>

<Method name="OnDrawTabSet">
<Description>
Method for setting 'OnDrawTab' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawTab=Value
 d ##this.SetEvent("OnDrawTab",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetImageIndexGet">
<Description>
Method for getting 'OnGetImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetImageIndex
]]></Implementation>
</Method>

<Method name="OnGetImageIndexSet">
<Description>
Method for setting 'OnGetImageIndex' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetImageIndex=Value
 d ##this.SetEvent("OnGetImageIndex",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OwnerDrawGet">
<Description>
Method for getting 'OwnerDraw' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OwnerDraw")
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerDrawSet">
<Description>
Method for setting 'OwnerDraw' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OwnerDraw",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RaggedRightGet">
<Description>
Method for getting 'RaggedRight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RaggedRight")
 q tmp
]]></Implementation>
</Method>

<Method name="RaggedRightSet">
<Description>
Method for setting 'RaggedRight' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RaggedRight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScrollOppositeGet">
<Description>
Method for getting 'ScrollOpposite' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScrollOpposite")
 q tmp
]]></Implementation>
</Method>

<Method name="ScrollOppositeSet">
<Description>
Method for setting 'ScrollOpposite' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScrollOpposite",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabHeightGet">
<Description>
Method for getting 'TabHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="TabHeightSet">
<Description>
Method for setting 'TabHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabIndexGet">
<Description>
Method for getting 'TabIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="TabIndexSet">
<Description>
Method for setting 'TabIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabPositionGet">
<Description>
Method for getting 'TabPosition' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabPosition")
 q tmp
]]></Implementation>
</Method>

<Method name="TabPositionSet">
<Description>
Method for setting 'TabPosition' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabPosition",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabWidthGet">
<Description>
Method for getting 'TabWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="TabWidthSet">
<Description>
Method for setting 'TabWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>OnChange</Value>
</Value>
<Value name="39">
<Value>OnChanging</Value>
</Value>
<Value name="40">
<Value>OnDrawTab</Value>
</Value>
<Value name="41">
<Value>OnGetImageIndex</Value>
</Value>
<Value name="42">
<Value>Tabs</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMTabSet">
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73343</TimeCreated>

<Property name="AutoScroll">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BackgroundColor">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Canvas">
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="DitherBackground">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="EndMargin">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="FirstIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDrawTab">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMeasureTab">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SelectedColor">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StartMargin">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tsStandard,tsOwnerDraw"/>
</Property>

<Property name="TabHeight">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tabs">
<Type>%Library.TMStrings</Type>
</Property>

<Property name="UnselectedColor">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VisibleTabs">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ##this.Canvas.%Close()")
 $$$GENERATE(" s ##this.Canvas=##class(%TMCanvas).%New($lb(##this.Address,0,""Canvas""))")
 $$$GENERATE(" d ##this.Tabs.%Close()")
 $$$GENERATE(" s ##this.Tabs=##class(%TMStrings).%New($lb(##this.Address,0,""Tabs""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoScrollGet">
<Description>
Method for getting 'AutoScroll' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoScroll")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoScrollSet">
<Description>
Method for setting 'AutoScroll' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoScroll",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BackgroundColorGet">
<Description>
Method for getting 'BackgroundColor' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BackgroundColor")
 q tmp
]]></Implementation>
</Method>

<Method name="BackgroundColorSet">
<Description>
Method for setting 'BackgroundColor' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BackgroundColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTabSet"
]]></Implementation>
</Method>

<Method name="DitherBackgroundGet">
<Description>
Method for getting 'DitherBackground' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DitherBackground")
 q tmp
]]></Implementation>
</Method>

<Method name="DitherBackgroundSet">
<Description>
Method for setting 'DitherBackground' property
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DitherBackground",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndMarginGet">
<Description>
Method for getting 'EndMargin' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("EndMargin")
 q tmp
]]></Implementation>
</Method>

<Method name="EndMarginSet">
<Description>
Method for setting 'EndMargin' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("EndMargin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FirstIndexGet">
<Description>
Method for getting 'FirstIndex' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FirstIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="FirstIndexSet">
<Description>
Method for setting 'FirstIndex' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FirstIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Tabs.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Tabs,""Tabs"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="ItemAtPos">
<Description>
Returns the index of the tab set item indicated by the coordinates
of a point on the control.
</Description>
<FormalSpec>Pos:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ItemAtPos",$lb(Pos))
 q tmp
]]></Implementation>
</Method>

<Method name="ItemRect">
<Description>
Returns the rectangle that surrounds the item specified in the Item parameter.
</Description>
<FormalSpec>Item:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("ItemRect",$lb(Item))
 q tmp
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDrawTabGet">
<Description>
Method for getting 'OnDrawTab' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDrawTab
]]></Implementation>
</Method>

<Method name="OnDrawTabSet">
<Description>
Method for setting 'OnDrawTab' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDrawTab=Value
 d ##this.SetEvent("OnDrawTab",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMeasureTabGet">
<Description>
Method for getting 'OnMeasureTab' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMeasureTab
]]></Implementation>
</Method>

<Method name="OnMeasureTabSet">
<Description>
Method for setting 'OnMeasureTab' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMeasureTab=Value
 d ##this.SetEvent("OnMeasureTab",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectNext">
<Description>
Moves the input focus from the current tab to the next one.
</Description>
<FormalSpec>Direction:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SelectNext",$lb(Direction))
 q
]]></Implementation>
</Method>

<Method name="SelectedColorGet">
<Description>
Method for getting 'SelectedColor' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelectedColor")
 q tmp
]]></Implementation>
</Method>

<Method name="SelectedColorSet">
<Description>
Method for setting 'SelectedColor' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelectedColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StartMarginGet">
<Description>
Method for getting 'StartMargin' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StartMargin")
 q tmp
]]></Implementation>
</Method>

<Method name="StartMarginSet">
<Description>
Method for setting 'StartMargin' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StartMargin",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabHeightGet">
<Description>
Method for getting 'TabHeight' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="TabHeightSet">
<Description>
Method for setting 'TabHeight' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabIndexGet">
<Description>
Method for getting 'TabIndex' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="TabIndexSet">
<Description>
Method for setting 'TabIndex' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UnselectedColorGet">
<Description>
Method for getting 'UnselectedColor' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UnselectedColor")
 q tmp
]]></Implementation>
</Method>

<Method name="UnselectedColorSet">
<Description>
Method for setting 'UnselectedColor' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("UnselectedColor",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VisibleTabsGet">
<Description>
Method for getting 'VisibleTabs' property
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VisibleTabs")
 q tmp
]]></Implementation>
</Method>

<Method name="VisibleTabsSet">
<Description>
Method for setting 'VisibleTabs' property
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VisibleTabs",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>OnChange</Value>
</Value>
<Value name="39">
<Value>OnDrawTab</Value>
</Value>
<Value name="40">
<Value>OnMeasureTab</Value>
</Value>
<Value name="41">
<Value>Tabs</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMTabSheet">
<Description>
Represents a page of a Windows multipage dialog (see description of the %TMPageControl class).
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73343</TimeCreated>

<Property name="Caption">
<Description>
Represents the label of this page.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ClientHeight">
<Description>
Determines the height (in pixels) of the client area.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ClientWidth">
<Description>
Determines the width (in pixels) of the client area.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ImageIndex">
<Description>
Contains the index of the tab image in the Images property of the corresponding %TMPageControl class.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnHide">
<Description>
Handler of event occuring when the page becomes invisible.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnShow">
<Description>
Handler of event occuring when the page becomes visible again.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PageControl">
<Description>
Contains oref of the %TMPageControl object embedding this page.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="PageIndex">
<Description>
Determines the index of the page in the corresponging %TMPageControl object. Indexing starts from 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabIndex">
<Description>
Determines the position of the page tab in the row of visible tabs in the corresponging %TMPageControl object. Indexing starts from 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabVisible">
<Description>
If set to "True", the tab of this page is visible and the page can be selected. Otherwise, the tab is invisible and the TabIndex property contains -1.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="CaptionGet">
<Description>
Method for getting 'Caption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Caption")
 q tmp
]]></Implementation>
</Method>

<Method name="CaptionSet">
<Description>
Method for setting 'Caption' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Caption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTabSheet"
]]></Implementation>
</Method>

<Method name="ClientHeightGet">
<Description>
Method for getting 'ClientHeight' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClientHeight")
 q tmp
]]></Implementation>
</Method>

<Method name="ClientHeightSet">
<Description>
Method for setting 'ClientHeight' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ClientHeight",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClientWidthGet">
<Description>
Method for getting 'ClientWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ClientWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="ClientWidthSet">
<Description>
Method for setting 'ClientWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ClientWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImageIndexGet">
<Description>
Method for getting 'ImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ImageIndexSet">
<Description>
Method for setting 'ImageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnHideGet">
<Description>
Method for getting 'OnHide' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnHide
]]></Implementation>
</Method>

<Method name="OnHideSet">
<Description>
Method for setting 'OnHide' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnHide=Value
 d ##this.SetEvent("OnHide",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnShowGet">
<Description>
Method for getting 'OnShow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnShow
]]></Implementation>
</Method>

<Method name="OnShowSet">
<Description>
Method for setting 'OnShow' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnShow=Value
 d ##this.SetEvent("OnShow",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageControlGet">
<Description>
Method for getting 'PageControl' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("PageControl"))
 q tmp
]]></Implementation>
</Method>

<Method name="PageControlSet">
<Description>
Method for setting 'PageControl' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageControl",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageIndexGet">
<Description>
Method for getting 'PageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="PageIndexSet">
<Description>
Method for setting 'PageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabIndexGet">
<Description>
Method for getting 'TabIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="TabIndexSet">
<Description>
Method for setting 'TabIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabVisibleGet">
<Description>
Method for getting 'TabVisible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabVisible")
 q tmp
]]></Implementation>
</Method>

<Method name="TabVisibleSet">
<Description>
Method for setting 'TabVisible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabVisible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnHide</Value>
</Value>
<Value name="38">
<Value>OnShow</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMTextAttributes">
<Description>
The set of properties and methods dealing with rich text styles and attributes.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73343</TimeCreated>

<Property name="Charset">
<Description>
Contains identifier of font character set. Possible values are listed in the %Const.INC.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Color">
<Description>
Contains foreground text color (in hexadecimal RGB format).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ConsistentAttributes">
<Description><![CDATA[
Represents the set of text attributes which are the same for all selected text. Possible value:
Cache' list ($lb()) where only vaild of the following strings are combined:<br>
"caBold" - all characters are either bold, either regular;<br>
"caColor" - all characters have the same color;<br>
"caFace" - all characters have the same font face;<br>
"caItalic" - all characters are either italic, either non-italic;<br>
"caSize" -  all characters have the same size;<br>
"caStrikeout" - all characters have the same or absent strikeout style;<br>
"caUnderline" - all characters are either underlined or not underlined;<br>
"caProtected" - all selected text is either protected or not protected.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(caBold,caColor,caFace,caItalic,caSize,caStrikeOut,caUnderline,caProtected)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FontName">
<Description>
Contains name of the font face.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Height">
<Description>
Contains the font size in pixels.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Pitch">
<Description><![CDATA[
Specifies the font pitch (fixed or proportional). Possible values:<br>
"fpDefault" - default value for the given font face;<br>
"fpFixed" - fixed characters width;<br>
"fpVariable" - proportional characters widths.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fpDefault,fpVariable,fpFixed"/>
</Property>

<Property name="Protected">
<Description>
Indicates, may user change the text (if set to "False") or it is protected (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Size">
<Description>
Contains the font size in points.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Style">
<Description>
Represents the text style (for selection or for cursor position). Possible value:
Cache' list ($lb()) where only vaild of the following strings are combined:
"fsBold", "fsItalic", "fsUnderline", and "fsStrikeout".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(fsBold,fsItalic,fsUnderline,fsStrikeOut)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="CharsetGet">
<Description>
Method for getting 'Charset' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Charset")
 q tmp
]]></Implementation>
</Method>

<Method name="CharsetSet">
<Description>
Method for setting 'Charset' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Charset",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTextAttributes"
]]></Implementation>
</Method>

<Method name="ColorGet">
<Description>
Method for getting 'Color' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Color")
 q tmp
]]></Implementation>
</Method>

<Method name="ColorSet">
<Description>
Method for setting 'Color' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Color",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ConsistentAttributesGet">
<Description>
Method for getting 'ConsistentAttributes' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ConsistentAttributes")
 q tmp
]]></Implementation>
</Method>

<Method name="ConsistentAttributesSet">
<Description>
Method for setting 'ConsistentAttributes' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ConsistentAttributes",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FontNameGet">
<Description>
Method for getting 'FontName' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FontName")
 q tmp
]]></Implementation>
</Method>

<Method name="FontNameSet">
<Description>
Method for setting 'FontName' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FontName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HeightGet">
<Description>
Method for getting 'Height' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Height")
 q tmp
]]></Implementation>
</Method>

<Method name="HeightSet">
<Description>
Method for setting 'Height' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Height",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PitchGet">
<Description>
Method for getting 'Pitch' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Pitch")
 q tmp
]]></Implementation>
</Method>

<Method name="PitchSet">
<Description>
Method for setting 'Pitch' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Pitch",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ProtectedGet">
<Description>
Method for getting 'Protected' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Protected")
 q tmp
]]></Implementation>
</Method>

<Method name="ProtectedSet">
<Description>
Method for setting 'Protected' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Protected",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeGet">
<Description>
Method for getting 'Size' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Size")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeSet">
<Description>
Method for setting 'Size' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Size",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StyleGet">
<Description>
Method for getting 'Style' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Style")
 q tmp
]]></Implementation>
</Method>

<Method name="StyleSet">
<Description>
Method for setting 'Style' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Style",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMTimer">
<Description>
Represents an invisible control enabling timer functions.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73343</TimeCreated>

<Property name="Enabled">
<Description>
If set to "True" (default value"), the OnTimer event is handled, otherwise ignored.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Interval">
<Description>
Determines the time period (in milliseconds) of OnTimer event occuring.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnTimer">
<Description>
Handler of event occuring every time when the period specified in the Interval property elapses.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Tag">
<Description>
Arbitrary text associated with this control.
</Description>
<Type>%Library.String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTimer"
]]></Implementation>
</Method>

<Method name="EnabledGet">
<Description>
Method for getting 'Enabled' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Enabled")
 q tmp
]]></Implementation>
</Method>

<Method name="EnabledSet">
<Description>
Method for setting 'Enabled' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Enabled",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IntervalGet">
<Description>
Method for getting 'Interval' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Interval")
 q tmp
]]></Implementation>
</Method>

<Method name="IntervalSet">
<Description>
Method for setting 'Interval' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Interval",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnTimerGet">
<Description>
Method for getting 'OnTimer' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnTimer
]]></Implementation>
</Method>

<Method name="OnTimerSet">
<Description>
Method for setting 'OnTimer' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnTimer=Value
 d ##this.SetEvent("OnTimer",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>OnTimer</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMToolbar">
<Description>
Represents server-side image of a Windows toolbar (dockable row of buttons with glyphs).
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73344</TimeCreated>

<Property name="ActivateParent">
<Description>
If set to "True", the parent form is activated when user clicks on the toolbar.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderStyle">
<Description><![CDATA[
Determines, will the control have a border around the client area. Possible values:<br>
"bsSingle" - single-line border<br>
"bsNone" - no border.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="CloseButton">
<Description>
If set to "True", enables 'Close' button ot the floating toolbar, if set to "False" - disables it.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="CloseButtonWhenDocked">
<Description>
If set to "True", enables 'Close' button ot the docked toolbar, if set to "False" - disables it.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DefaultDock">
<Description>
Contains oref of %TMDock object to dock the floating toolbar if the 'LastDock' property is not assigned.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DockMode">
<Description><![CDATA[
Possible values:<br>
"dmCanFloat" - toolbar can float or be docked to any dock meeting the 'DockingTo' value.
"dmCannotFloat" - toolbar cannot float but can be docked to any dock meeting the 'DockingTo' value.
"dmCannotFloatOrChangeDocks" - toolbar cannot leave its current dock.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dmCanFloat,dmCannotFloat,dmCannotFloatOrChangeDocks"/>
</Property>

<Property name="DockPos">
<Description>
If the toolbar is docked, contains the position of toolbar (horizontal or vertical) in pixels.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DockRow">
<Description>
Contains the number of row where the toolbar is docked.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DockableTo">
<Description>
Contains Cache' list ($lb()) where the possible positions for docking from the following are included:
"dpTop", "dpBottom", "dpLeft" and "dpRight".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(dpTop,dpBottom,dpLeft,dpRight)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Docked">
<Description>
Contains "True" if the toolbar is docked, or "False" if it floats.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DockedTo">
<Description>
Contains oref of %TMDock object at which the toolbar is docked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="DragHandleStyle">
<Description>
Specifies style for the drag handle og docked toolbar.
Possible values: "dhSingle", "dhDouble" or "dhNone".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",dhDouble,dhNone,dhSingle"/>
</Property>

<Property name="FloatingMode">
<Description>
Determines, should the floating toolbar be on top of tis parent form only (if set to "fmOnTopOfParentForm"), or of all forms of the project (if set to "fmOnTopOfAllForms").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",fmOnTopOfParentForm,fmOnTopOfAllForms"/>
</Property>

<Property name="FullSize">
<Description>
If set to "True", the toolbar will be automatically expanded to entire width (if docked horizontally) or height (if docked vertically) of the dock.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HideWhenInactive">
<Description>
Determines, should the toolbar disappear when application becomes inactive (if set to "True"), or remain visible (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LastDock">
<Description>
Contains oref of %TMDock object last used for docking or where the toolbar is currently docked. Overrides value of 'DefaultDock' property.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnClose">
<Description>
Handler of event occuring when the toolbar is about to be closed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCloseQuery">
<Description>
Handler of event occuring when the 'Close' button is clicked.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDockChanged">
<Description>
Handler of event occuring immediately after the dock or floating state change.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDockChanging">
<Description>
Handler of event occuring immediately before the dock or floating state change.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDockChangingEx">
<Description>
Handler of event occuring immediately after the dock, floating state, or 'DockedTo' property change.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDockChangingHidden">
<Description>
Handler of event occuring when the toolbar becomes invisible in the process dock changing.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMove">
<Description>
Handler of event occuring when the toolbar position is changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRecreated">
<Description>
Handler of event occuring immediately after the toobar recreation.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnRecreating">
<Description>
Handler of event occuring immediately before the toobar recreation.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnVisibleChanged">
<Description>
Handler of event occuring immediately after the toobar becomes visible or invisible.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShowCaption">
<Description>
Determines, should the caption bar be displayed for floating toolbar (if set to "True"), or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UseLastDock">
<Description>
If set to "False", the 'LastDock' property is not work. Default value is "True".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ActivateParentGet">
<Description>
Method for getting 'ActivateParent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ActivateParent")
 q tmp
]]></Implementation>
</Method>

<Method name="ActivateParentSet">
<Description>
Method for setting 'ActivateParent' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ActivateParent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AddDockForm">
<Description>
Adds %TMForm object specified by its oref to the list of forms where the toolbar can be docked to in addition to its parent form.
</Description>
<FormalSpec>Form:%TMForm</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AddDockForm",$lb(Form.Address))
 q
]]></Implementation>
</Method>

<Method name="BeginMoving">
<Description>
For internal use.
</Description>
<FormalSpec>InitX:%Integer,InitY:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginMoving",$lb(InitX,InitY))
 q
]]></Implementation>
</Method>

<Method name="BeginSizing">
<Description>
For internal use.
</Description>
<FormalSpec>ASizeHandle:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginSizing",$lb(ASizeHandle))
 q
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
Disables controls arrangements, recommended to use before multiple controls moving to avoid flickering.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMToolbar"
]]></Implementation>
</Method>

<Method name="CloseButtonGet">
<Description>
Method for getting 'CloseButton' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CloseButton")
 q tmp
]]></Implementation>
</Method>

<Method name="CloseButtonSet">
<Description>
Method for setting 'CloseButton' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CloseButton",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CloseButtonWhenDockedGet">
<Description>
Method for getting 'CloseButtonWhenDocked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("CloseButtonWhenDocked")
 q tmp
]]></Implementation>
</Method>

<Method name="CloseButtonWhenDockedSet">
<Description>
Method for setting 'CloseButtonWhenDocked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("CloseButtonWhenDocked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DefaultDockGet">
<Description>
Method for getting 'DefaultDock' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DefaultDock"))
 q tmp
]]></Implementation>
</Method>

<Method name="DefaultDockSet">
<Description>
Method for setting 'DefaultDock' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%DefaultDock=Value
 s tmp=$s(Value:Value.Address,1:0)
 d ##this.SetProperty("DefaultDock",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockModeGet">
<Description>
Method for getting 'DockMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DockMode")
 q tmp
]]></Implementation>
</Method>

<Method name="DockModeSet">
<Description>
Method for setting 'DockMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DockMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockPosGet">
<Description>
Method for getting 'DockPos' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DockPos")
 q tmp
]]></Implementation>
</Method>

<Method name="DockPosSet">
<Description>
Method for setting 'DockPos' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DockPos",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockRowGet">
<Description>
Method for getting 'DockRow' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DockRow")
 q tmp
]]></Implementation>
</Method>

<Method name="DockRowSet">
<Description>
Method for setting 'DockRow' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DockRow",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockableToGet">
<Description>
Method for getting 'DockableTo' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DockableTo")
 q tmp
]]></Implementation>
</Method>

<Method name="DockableToSet">
<Description>
Method for setting 'DockableTo' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DockableTo",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockedGet">
<Description>
Method for getting 'Docked' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Docked")
 q tmp
]]></Implementation>
</Method>

<Method name="DockedSet">
<Description>
Method for setting 'Docked' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Docked",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockedToGet">
<Description>
Method for getting 'DockedTo' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DockedTo"))
 q tmp
]]></Implementation>
</Method>

<Method name="DockedToSet">
<Description>
Method for setting 'DockedTo' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%DockedTo=Value
 s tmp=$s(Value'=$$$NULLOREF:Value.Address,1:0)
 d ##this.SetProperty("DockedTo",tmp)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DragHandleStyleGet">
<Description>
Method for getting 'DragHandleStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("DragHandleStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="DragHandleStyleSet">
<Description>
Method for setting 'DragHandleStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DragHandleStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
Re-enables controls arrangements after BeginUpdate call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="FloatingModeGet">
<Description>
Method for getting 'FloatingMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FloatingMode")
 q tmp
]]></Implementation>
</Method>

<Method name="FloatingModeSet">
<Description>
Method for setting 'FloatingMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FloatingMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FullSizeGet">
<Description>
Method for getting 'FullSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("FullSize")
 q tmp
]]></Implementation>
</Method>

<Method name="FullSizeSet">
<Description>
Method for setting 'FullSize' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("FullSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HideWhenInactiveGet">
<Description>
Method for getting 'HideWhenInactive' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideWhenInactive")
 q tmp
]]></Implementation>
</Method>

<Method name="HideWhenInactiveSet">
<Description>
Method for setting 'HideWhenInactive' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideWhenInactive",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LastDockGet">
<Description>
Method for getting 'LastDock' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("LastDock"))
 q tmp
]]></Implementation>
</Method>

<Method name="LastDockSet">
<Description>
Method for setting 'LastDock' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LastDock",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseGet">
<Description>
Method for getting 'OnClose' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnClose
]]></Implementation>
</Method>

<Method name="OnCloseQueryGet">
<Description>
Method for getting 'OnCloseQuery' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCloseQuery
]]></Implementation>
</Method>

<Method name="OnCloseQuerySet">
<Description>
Method for setting 'OnCloseQuery' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCloseQuery=Value
 d ##this.SetEvent("OnCloseQuery",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCloseSet">
<Description>
Method for setting 'OnClose' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnClose=Value
 d ##this.SetEvent("OnClose",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDockChangedGet">
<Description>
Method for getting 'OnDockChanged' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDockChanged
]]></Implementation>
</Method>

<Method name="OnDockChangedSet">
<Description>
Method for setting 'OnDockChanged' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDockChanged=Value
 d ##this.SetEvent("OnDockChanged",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDockChangingExGet">
<Description>
Method for getting 'OnDockChangingEx' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDockChangingEx
]]></Implementation>
</Method>

<Method name="OnDockChangingExSet">
<Description>
Method for setting 'OnDockChangingEx' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDockChangingEx=Value
 d ##this.SetEvent("OnDockChangingEx",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDockChangingGet">
<Description>
Method for getting 'OnDockChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDockChanging
]]></Implementation>
</Method>

<Method name="OnDockChangingHiddenGet">
<Description>
Method for getting 'OnDockChangingHidden' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDockChangingHidden
]]></Implementation>
</Method>

<Method name="OnDockChangingHiddenSet">
<Description>
Method for setting 'OnDockChangingHidden' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDockChangingHidden=Value
 d ##this.SetEvent("OnDockChangingHidden",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDockChangingSet">
<Description>
Method for setting 'OnDockChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDockChanging=Value
 d ##this.SetEvent("OnDockChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMoveGet">
<Description>
Method for getting 'OnMove' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMove
]]></Implementation>
</Method>

<Method name="OnMoveSet">
<Description>
Method for setting 'OnMove' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMove=Value
 d ##this.SetEvent("OnMove",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRecreatedGet">
<Description>
Method for getting 'OnRecreated' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRecreated
]]></Implementation>
</Method>

<Method name="OnRecreatedSet">
<Description>
Method for setting 'OnRecreated' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRecreated=Value
 d ##this.SetEvent("OnRecreated",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnRecreatingGet">
<Description>
Method for getting 'OnRecreating' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnRecreating
]]></Implementation>
</Method>

<Method name="OnRecreatingSet">
<Description>
Method for setting 'OnRecreating' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnRecreating=Value
 d ##this.SetEvent("OnRecreating",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnVisibleChangedGet">
<Description>
Method for getting 'OnVisibleChanged' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnVisibleChanged
]]></Implementation>
</Method>

<Method name="OnVisibleChangedSet">
<Description>
Method for setting 'OnVisibleChanged' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnVisibleChanged=Value
 d ##this.SetEvent("OnVisibleChanged",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="RemoveDockForm">
<Description>
Removes %TMForm object specified by its oref from the list of forms where the toolbar can be docked to.
</Description>
<FormalSpec>Form:%TMForm</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("RemoveDockForm",$lb(Form.Address))
 q
]]></Implementation>
</Method>

<Method name="SetSlaveControl">
<Description>
Assigns the top/bottom-docked and the left/right-docked version of a control on the toolbar.
</Description>
<FormalSpec>ATopBottom:%TMControl,ALeftRight:%TMControl</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetSlaveControl",$lb(ATopBottom.Address,ALeftRight.Address))
 q
]]></Implementation>
</Method>

<Method name="ShowCaptionGet">
<Description>
Method for getting 'ShowCaption' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowCaption")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowCaptionSet">
<Description>
Method for setting 'ShowCaption' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowCaption",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UseLastDockGet">
<Description>
Method for getting 'UseLastDock' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UseLastDock")
 q tmp
]]></Implementation>
</Method>

<Method name="UseLastDockSet">
<Description>
Method for setting 'UseLastDock' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("UseLastDock",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>DefaultDock</Value>
</Value>
<Value name="38">
<Value>DockedTo</Value>
</Value>
<Value name="39">
<Value>LastDock</Value>
</Value>
<Value name="40">
<Value>OnClose</Value>
</Value>
<Value name="41">
<Value>OnCloseQuery</Value>
</Value>
<Value name="42">
<Value>OnDockChanged</Value>
</Value>
<Value name="43">
<Value>OnDockChanging</Value>
</Value>
<Value name="44">
<Value>OnDockChangingEx</Value>
</Value>
<Value name="45">
<Value>OnDockChangingHidden</Value>
</Value>
<Value name="46">
<Value>OnMove</Value>
</Value>
<Value name="47">
<Value>OnRecreated</Value>
</Value>
<Value name="48">
<Value>OnRecreating</Value>
</Value>
<Value name="49">
<Value>OnVisibleChanged</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMToolbarSep">
<Description>
Enables a separator between groups of buttons on the parent toolbar.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73344</TimeCreated>

<Property name="Blank">
<Description>
Determines, should the separator be beveled (if set to "False") or look like blank space (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SizeHorz">
<Description>
The width (in pixels) of separator for horizontally docked toolbar. Default value is 6.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SizeVert">
<Description>
The height (in pixels) of separator for vertically docked toolbar. Default value is 6.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="BlankGet">
<Description>
Method for getting 'Blank' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Blank")
 q tmp
]]></Implementation>
</Method>

<Method name="BlankSet">
<Description>
Method for setting 'Blank' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Blank",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMToolbarSep"
]]></Implementation>
</Method>

<Method name="SizeHorzGet">
<Description>
Method for getting 'SizeHorz' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SizeHorz")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeHorzSet">
<Description>
Method for setting 'SizeHorz' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SizeHorz",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SizeVertGet">
<Description>
Method for getting 'SizeVert' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SizeVert")
 q tmp
]]></Implementation>
</Method>

<Method name="SizeVertSet">
<Description>
Method for setting 'SizeVert' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SizeVert",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMTrackBar">
<Description>
Represents the server-side image of a Windows trackbar (bar with moving slider).
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73344</TimeCreated>

<Property name="Frequency">
<Description>
Determines the distance between tick marks (in logical units).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="LineSize">
<Description>
Contains the slider shift (in ticks) for left and right arrows keystrokes. Up and down keystrikes increment and decrement this property value.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Max">
<Description>
Contain the maximal value of the 'Position' property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Min">
<Description>
Contain the minimal value of the 'Position' property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when a user has moved the slider.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Orientation">
<Description>
Determines, should be the trackbar be horizontal (if set to "trHorizontal") or vertical (if set to "trVertical").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",trHorizontal,trVertical"/>
</Property>

<Property name="PageSize">
<Description>
Contains the slider shift (in ticks) for PgUp and PgDn keystrokes.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Position">
<Description>
Contains the current value represented by the trackbar, this value corresponds to the slider position.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelEnd">
<Description>
Contains the ending point of selected range. The value of 'Position' must belong to the selected range.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelStart">
<Description>
Contains the starting point of selected range. The value of 'Position' must belong to the selected range.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SliderVisible">
<Description>
Determines, should the slider be visible (if set to "True") or hidden (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ThumbLength">
<Description>
Represents the size of the slider (in pixels).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TickMarks">
<Description><![CDATA[
Specifies the place for tick marks. Possible values:<br>
"tmBottomRight" - bottom (for horizontal trackbar) or right (for vertical trackbar) side of the trackbar;<br>
"tmTopLeft" - top (for horizontal trackbar) or left (for vertical trackbar) side of the trackbar;<br>
"tmBoth" - both sides of the trackbar.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tmBottomRight,tmTopLeft,tmBoth"/>
</Property>

<Property name="TickStyle">
<Description><![CDATA[
Specifies, how should be tick marks set. Possible values:<br>
"tsAuto" - automatically, according to the value of 'Frequncy' property.<br>
"tsManual" - at the 'Min' and 'Max' values - automatically, other - from the 'SetTick' method.
"tsNone" - no tick marks.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",tsNone,tsAuto,tsManual"/>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTrackBar"
]]></Implementation>
</Method>

<Method name="FrequencyGet">
<Description>
Method for getting 'Frequency' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Frequency")
 q tmp
]]></Implementation>
</Method>

<Method name="FrequencySet">
<Description>
Method for setting 'Frequency' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Frequency",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LineSizeGet">
<Description>
Method for getting 'LineSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("LineSize")
 q tmp
]]></Implementation>
</Method>

<Method name="LineSizeSet">
<Description>
Method for setting 'LineSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("LineSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MaxGet">
<Description>
Method for getting 'Max' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Max")
 q tmp
]]></Implementation>
</Method>

<Method name="MaxSet">
<Description>
Method for setting 'Max' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Max",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MinGet">
<Description>
Method for getting 'Min' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Min")
 q tmp
]]></Implementation>
</Method>

<Method name="MinSet">
<Description>
Method for setting 'Min' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Min",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OrientationGet">
<Description>
Method for getting 'Orientation' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Orientation")
 q tmp
]]></Implementation>
</Method>

<Method name="OrientationSet">
<Description>
Method for setting 'Orientation' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Orientation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PageSizeGet">
<Description>
Method for getting 'PageSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("PageSize")
 q tmp
]]></Implementation>
</Method>

<Method name="PageSizeSet">
<Description>
Method for setting 'PageSize' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("PageSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PositionGet">
<Description>
Method for getting 'Position' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Position")
 q tmp
]]></Implementation>
</Method>

<Method name="PositionSet">
<Description>
Method for setting 'Position' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Position",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelEndGet">
<Description>
Method for getting 'SelEnd' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelEnd")
 q tmp
]]></Implementation>
</Method>

<Method name="SelEndSet">
<Description>
Method for setting 'SelEnd' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelEnd",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelStartGet">
<Description>
Method for getting 'SelStart' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelStart")
 q tmp
]]></Implementation>
</Method>

<Method name="SelStartSet">
<Description>
Method for setting 'SelStart' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelStart",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetTick">
<Description>
Creates a tick mark at a specified position of the trackbar.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetTick",$lb(Value))
 q
]]></Implementation>
</Method>

<Method name="SliderVisibleGet">
<Description>
Method for getting 'SliderVisible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SliderVisible")
 q tmp
]]></Implementation>
</Method>

<Method name="SliderVisibleSet">
<Description>
Method for setting 'SliderVisible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SliderVisible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ThumbLengthGet">
<Description>
Method for getting 'ThumbLength' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ThumbLength")
 q tmp
]]></Implementation>
</Method>

<Method name="ThumbLengthSet">
<Description>
Method for setting 'ThumbLength' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ThumbLength",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TickMarksGet">
<Description>
Method for getting 'TickMarks' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TickMarks")
 q tmp
]]></Implementation>
</Method>

<Method name="TickMarksSet">
<Description>
Method for setting 'TickMarks' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TickMarks",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TickStyleGet">
<Description>
Method for getting 'TickStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TickStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="TickStyleSet">
<Description>
Method for setting 'TickStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TickStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>OnChange</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMTreeNode">
<Description>
Represents a single element of a hierarchical items collection (%TMTreeNodes).
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73344</TimeCreated>

<Property name="AbsoluteIndex">
<Description>
Determines the absolute node position in the tree view.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Count">
<Description>
Contains the number of next-level subnodes for this node.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Cut">
<Description>
Contains "True" if the node is marked for 'Cut' operation, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Data">
<Description>
Contains the data associated with the node.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Deleting">
<Description>
Contains "True" if the Delete method for this node has been invoked, put the node has not been actually deleted yet.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropTarget">
<Description>
Contains "True" if the node is marked as a drag-and-drop target, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Expanded">
<Description>
Containes "True" if the node is expanded or "False" if it is collapsed.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Focused">
<Description>
Contains "True" if the node has a focus, otherwise - "False". If the application sets this property to "True" for one node, it must enable this property to be "False" for all other nodes in the tree view.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HasChildren">
<Description>
Containes "True" if the node has at least one subnode, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ImageIndex">
<Description>
Determines the index of the image associated with this item in the tree view Images property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Index">
<Description>
Determines the index of the node in the %TMTreeNodes collection.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="IsVisible">
<Description>
Contains "True" if the node has no parent or all its parents are expanded, or "False" if some of its parents is collapsed, so the node is invisible.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Level">
<Description>
Contains the level of the node. The top-level nodes have Level equal to 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="OverlayIndex">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Owner">
<Description>
Contains oref of the %TMTreeNodes collection embedding this node.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ParentNode">
<Description>
Contains oref of the parent for this node.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Selected">
<Description>
Contains "True" if this node is selected, otherwise - "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SelectedIndex">
<Description>
Contains the index of the selected node. Indexing starts from 0.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="StateIndex">
<Description>
Determines the index of the overlay image associated with this item in the tree view StateImages property.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Text">
<Description>
Contains the text label of the node.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TreeView">
<Description>
Contains oref of the tree view containing this node.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnNew">
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" s %SMWOrefs(+##this)=##this")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMPersistent")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMPersistent")
 e  $$$GENERATE(" d ##class(=%TMPersistent)##this.%OnNew(initvalue)")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AbsoluteIndexGet">
<Description>
Method for getting 'AbsoluteIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AbsoluteIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="AbsoluteIndexSet">
<Description>
Method for setting 'AbsoluteIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AbsoluteIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlphaSort">
<Description>
Sorts the subnodes of this node in accordance with the value of the SortType property and OnCompare event handler. Returns "True" if successful, or "False" if failed.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AlphaSort",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTreeNode"
]]></Implementation>
</Method>

<Method name="Collapse">
<Description>
Collapses a node, hiding all its subnodes and displaying the '+' button (if ShowButtons property is set to "True").
</Description>
<FormalSpec>Recurse:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Collapse",$lb(Recurse))
 q
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CutGet">
<Description>
Method for getting 'Cut' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Cut")
 q tmp
]]></Implementation>
</Method>

<Method name="CutSet">
<Description>
Method for setting 'Cut' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Cut",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DataGet">
<Description>
Method for getting 'Data' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Data")
 q tmp
]]></Implementation>
</Method>

<Method name="DataSet">
<Description>
Method for setting 'Data' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Data",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Deletes the node with all its subnodes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Delete",$lb())
 q
]]></Implementation>
</Method>

<Method name="DeleteChildren">
<Description>
Deletes all subnodes of this node.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DeleteChildren",$lb())
 q
]]></Implementation>
</Method>

<Method name="DeletingGet">
<Description>
Method for getting 'Deleting' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Deleting")
 q tmp
]]></Implementation>
</Method>

<Method name="DeletingSet">
<Description>
Method for setting 'Deleting' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Deleting",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DisplayRect">
<Description><![CDATA[
Returns the coordinates of the rectangle ($lb(Left,Top,Right,Bottom)) confining the item.
The value of the TextOnly parameter determines, what part of the item the rectangle confines. Possible values: <br>
"True" - the node label only.<br>
"False" -  entire line occupied by the node in the tree view.
]]></Description>
<FormalSpec>TextOnly:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("DisplayRect",$lb(TextOnly))
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetGet">
<Description>
Method for getting 'DropTarget' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DropTarget"))
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetSet">
<Description>
Method for setting 'DropTarget' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropTarget",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="EditText">
<Description>
Puts a single-line editor at the place of the node label and raises the OnEditing event.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EditText",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="EndEdit">
<Description>
Terminates the mode turned on by the EditText method call, saving changes and arising the OnEdited event if the Cancel parameter is "False", or discarding changes if Cancel equals to "True".
</Description>
<FormalSpec>Cancel:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndEdit",$lb(Cancel))
 q
]]></Implementation>
</Method>

<Method name="Expand">
<Description>
Expands the node, showing the next-level subnodes and displaying the '-' button (if ShowButtons property is set to "True").
</Description>
<FormalSpec>Recurse:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Expand",$lb(Recurse))
 q
]]></Implementation>
</Method>

<Method name="ExpandedGet">
<Description>
Method for getting 'Expanded' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Expanded")
 q tmp
]]></Implementation>
</Method>

<Method name="ExpandedSet">
<Description>
Method for setting 'Expanded' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Expanded",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FocusedGet">
<Description>
Method for getting 'Focused' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Focused")
 q tmp
]]></Implementation>
</Method>

<Method name="FocusedSet">
<Description>
Method for setting 'Focused' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Focused",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetFirstChild">
<Description>
Returns oref of the first subnode of the item, or empty string, if the item has no subnodes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetFirstChild",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetLastChild">
<Description>
Returns oref of the last next-level subnode of the item, or empty string, if the item has no subnodes.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetLastChild",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNext">
<Description>
Returns oref of the next node after the current one (including invisible), or empty string if the current node is the last node in the tree view.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNext",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNextChild">
<Description>
Returns oref of the next subnode after the specified one (including invisible), or empty string if the specified subnode is the last child of the current node.
</Description>
<FormalSpec>Value:%TMTreeNode</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNextChild",$lb(Value.Address)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNextSibling">
<Description>
Returns oref of the next node after the current one (including invisible) from the same level as the current node belongs, or empty string if the current node is the last node in this level.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNextSibling",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNextVisible">
<Description>
Returns oref of the next node after the current one (excluding invisible), or empty string if the current node is the last visible node in the tree view.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNextVisible",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetPrev">
<Description>
Returns oref of the previous node before the current one (including invisible), or empty string if the current node is the first node in the tree view.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetPrev",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetPrevChild">
<Description>
Returns oref of the previous subnode before the specified one (including invisible), or empty string if the specified subnode is the first child of the current node.
</Description>
<FormalSpec>Value:%TMTreeNode</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetPrevChild",$lb(Value.Address)))
 q tmp
]]></Implementation>
</Method>

<Method name="GetPrevSibling">
<Description>
Returns oref of the previous node before the current one (including invisible) from the same level as the current node belongs, or empty string if the current node is the first node in this level.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetPrevSibling",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetPrevVisible">
<Description>
Returns oref of the previous node before the current one (excluding invisible), or empty string if the current node is the first node in the tree view.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetPrevVisible",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="HasAsParent">
<Description>
Returns "True" if the node specified by the Value parameter is a parent node for the current node, otherwise - "False"
</Description>
<FormalSpec>Value:%TMTreeNode</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("HasAsParent",$lb(Value.Address))
 q tmp
]]></Implementation>
</Method>

<Method name="HasChildrenGet">
<Description>
Method for getting 'HasChildren' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HasChildren")
 q tmp
]]></Implementation>
</Method>

<Method name="HasChildrenSet">
<Description>
Method for setting 'HasChildren' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HasChildren",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImageIndexGet">
<Description>
Method for getting 'ImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImageIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="ImageIndexSet">
<Description>
Method for setting 'ImageIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImageIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IndexGet">
<Description>
Method for getting 'Index' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Index")
 q tmp
]]></Implementation>
</Method>

<Method name="IndexOf">
<Description>
Returns the index of the next-level subnode specified by its oref, or -1 if the parameter value is not oref of immediate subnode.
</Description>
<FormalSpec>Value:%TMTreeNode</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IndexOf",$lb(Value.Address))
 q tmp
]]></Implementation>
</Method>

<Method name="IndexSet">
<Description>
Method for setting 'Index' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Index",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IsVisibleGet">
<Description>
Method for getting 'IsVisible' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("IsVisible")
 q tmp
]]></Implementation>
</Method>

<Method name="IsVisibleSet">
<Description>
Method for setting 'IsVisible' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("IsVisible",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="LevelGet">
<Description>
Method for getting 'Level' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Level")
 q tmp
]]></Implementation>
</Method>

<Method name="LevelSet">
<Description>
Method for setting 'Level' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Level",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="MakeVisible">
<Description>
Expands all parents of the node, making the node visible.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MakeVisible",$lb())
 q
]]></Implementation>
</Method>

<Method name="MoveTo">
<Description><![CDATA[
Moves the current node to the Destination node specified by its oref. The possible values of the Mode parameter:<br>
"naAdd" - the moved node becomes the last node in the collection.<br>
"naAddFirst" - the moved node becomes the first node in the collection.<br>
"naAddChild" - the moved node becomes the last subnode of the Destination.<br>
"naAddChildFirst" - the moved node becomes the first subnode of the Destination.<br>
"naInsert" - the moved node becomes the next node after the Destination.
]]></Description>
<FormalSpec>Destination:%TMTreeNode,Mode:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("MoveTo",$lb(Destination.Address,Mode))
 q
]]></Implementation>
</Method>

<Method name="OverlayIndexGet">
<Description>
Method for getting 'OverlayIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("OverlayIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="OverlayIndexSet">
<Description>
Method for setting 'OverlayIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("OverlayIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OwnerGet">
<Description>
Method for getting 'Owner' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Owner"))
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerSet">
<Description>
Method for setting 'Owner' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Owner",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentNodeGet">
<Description>
Method for getting 'Parent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(##this.GetProperty("ParentNode"))
]]></Implementation>
</Method>

<Method name="ParentNodeSet">
<Description>
Method for setting 'Parent' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q $$$OK
]]></Implementation>
</Method>

<Method name="SelectedGet">
<Description>
Method for getting 'Selected' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Selected")
 q tmp
]]></Implementation>
</Method>

<Method name="SelectedIndexGet">
<Description>
Method for getting 'SelectedIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SelectedIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="SelectedIndexSet">
<Description>
Method for setting 'SelectedIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SelectedIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectedSet">
<Description>
Method for setting 'Selected' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Selected",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StateIndexGet">
<Description>
Method for getting 'StateIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("StateIndex")
 q tmp
]]></Implementation>
</Method>

<Method name="StateIndexSet">
<Description>
Method for setting 'StateIndex' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StateIndex",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TextGet">
<Description>
Method for getting 'Text' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Text")
 q tmp
]]></Implementation>
</Method>

<Method name="TextSet">
<Description>
Method for setting 'Text' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Text",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TreeViewGet">
<Description>
Method for getting 'TreeView' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("TreeView"))
 q tmp
]]></Implementation>
</Method>

<Method name="TreeViewSet">
<Description>
Method for setting 'TreeView' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TreeView",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Owner</Value>
</Value>
<Value name="9">
<Value>ParentNode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMTreeNodes">
<Description>
Represents the collection of nodes included into a tree view as its Items property.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73345</TimeCreated>

<Property name="Count">
<Description>
Read only, contains the number of items in the collection.
</Description>
<Type>%Library.Integer</Type>
</Property>

<Property name="Owner">
<Description>
Read only, contains oref of the %TMTreeView object that is owner of this collection.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="Add">
<Description>
Adds a new node to the collection at the same level as the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("Add",$lb(tmp,S,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddChild">
<Description>
Adds a new node to the collection at a subnode of the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("AddChild",$lb(tmp,S,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddChildFirst">
<Description>
Adds a new node to the collection at the first subnode of the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s tmp.Address=##this.RunMethod("AddChildFirst",$lb(tmp,S,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddChildObject">
<Description>
Adds a new node with data to the collection at a subnode of the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter. The data are determined by the value of Ptr.Data.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String,Ptr:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("AddChildObject",$lb(tmp,S,Ptr,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddChildObjectFirst">
<Description>
Adds a new node with data to the collection at the first subnode of the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter. The data are determined by the value of Ptr.Data.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String,Ptr:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("AddChildObjectFirst",$lb(tmp,S,Ptr,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddFirst">
<Description>
Adds a new node to the collection as the first node at the same level as the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("AddFirst",$lb(tmp,S,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddObject">
<Description>
Adds a new node with data to the collection at the same level as the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter. The data are determined by the value of Ptr.Data.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String,Ptr:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("AddObject",$lb(tmp,S,Ptr,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="AddObjectFirst">
<Description>
Adds a new node with data to the collection as the first node at the same level as the Node specified by its oref. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter. The data are determined by the value of Ptr.Data.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String,Ptr:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("AddObjectFirst",$lb(tmp,S,Ptr,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="BeginUpdate">
<Description>
Postpones repainting the node until the EndUpdate method call.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("BeginUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTreeNodes"
]]></Implementation>
</Method>

<Method name="Clear">
<Description>
Deletes all nodes from the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Clear",$lb())
 q
]]></Implementation>
</Method>

<Method name="CountGet">
<Description>
Method for getting 'Count' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Count")
 q tmp
]]></Implementation>
</Method>

<Method name="CountSet">
<Description>
Method for setting 'Count' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%Count=Value
 d ##this.SetProperty("Count",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Removes the node specified by its oref from the collection and updates the list view, if necessary.Removes a node from the tree view.
Delete removes a tree node in the tree view specified by the Node parameter.
</Description>
<FormalSpec>Node:%TMTreeNode</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=""
 i Node'="" s tmp=Node.Address
 s tmp=##this.RunMethod("Delete",$lb(tmp))
 q
]]></Implementation>
</Method>

<Method name="EndUpdate">
<Description>
Allows the changes postponed after the BeginUpdate method call to be reflected on the screen.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("EndUpdate",$lb())
 q
]]></Implementation>
</Method>

<Method name="GetFirstNode">
<Description>
Returns oref of the first node in the collection.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetFirstNode",$lb()))
 q tmp
]]></Implementation>
</Method>

<Method name="GetItems">
<Description>
Returns oref of the node specified by the Index parameter, or empty string if there is no such node. Possible values of Index: integers from 0 to Count-1.
</Description>
<FormalSpec>Index:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q ##class(%TMPersistent).GetObjOref(..RunMethod("GetItems",$lb(Index)))
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Inserts a new node to the collection before the Node specified by its oref, at the same level as it. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("Insert",$lb(tmp,S,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="InsertObject">
<Description>
Inserts a new node with data to the collection before the Node specified by its oref, at the same level as it. Returns oref of added node or empty string, if creation of new instance of %TMTreeNode failed. The text label of the new node is determined by the S parameter. The data are determined by the value of Ptr.Data.
</Description>
<FormalSpec>Node:%TMTreeNode,S:%String,Ptr:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp,ret
 s tmp=""
 i +Node'=0 s tmp=Node.Address
 s ret=##class(%TMTreeNode).%New($lb(##this,1))
 s ret.Address=##this.RunMethod("InsertObject",$lb(tmp,S,Ptr,+ret))
 q ret
]]></Implementation>
</Method>

<Method name="OwnerGet">
<Description>
Method for getting 'Owner' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Owner"))
 q tmp
]]></Implementation>
</Method>

<Method name="OwnerSet">
<Description>
Method for setting 'Owner' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%Owner=Value
 d ##this.SetProperty("Owner",+Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Count</Value>
</Value>
<Value name="9">
<Value>Owner</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMTreeView">
<Description>
Represents a hierarchical list of items, showing them as nodes which may be expanded and collapsed.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMWinControl</Super>
<TimeCreated>64314,73345</TimeCreated>

<Property name="AutoExpand">
<Description>
If set to "True", the selected nodes will be automatically expanded, and deselected nodes be collapsed. If set to "False", selection will not affect on the nodes expanding and collapsing.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="AutoSize">
<Description>
If set to "True", the control may size itself automatically. Default value is "False".
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderStyle">
<Description>
Determines, should the control have a single-line border (if set to "bsSingle") or not (if set to "bsNone").
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bsNone,bsSingle,bsSizeable,bsDialog,bsToolWindow,bsSizeToolWin"/>
</Property>

<Property name="Canvas">
<Description>
Contains oref of canvas which may be used for drawing on the tree view control from the OnCustomDraw and OnCustomDrawItem events handlers.
</Description>
<Type>%Library.TMCanvas</Type>
</Property>

<Property name="ChangeDelay">
<Description>
Determines the time when the OnChange event should occur (in milliseconds after the node selection).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DropTarget">
<Description>
Determines oref of the node serving as a drag-and-drop target.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="HideSelection">
<Description>
Determines, does selected node remain marked as selected when the control loses focus (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HotTrack">
<Description>
Determines, should the nodes be highlighted when mouse cursor moves over them (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Images">
<Description>
Contains oref of the image list with bitmaps to be displayed near every node in the tree view. Nodes and images are associated by the values of the ImageIndex properties of nodes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Indent">
<Description>
Determines the horizontal shift (in pixels) between parent and child nodes when expanding.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Items">
<Description>
Contains oref of the tree nodes collection associated with this tree view.
</Description>
<Type>%Library.TMTreeNodes</Type>
</Property>

<Property name="OnChange">
<Description>
Handler of event occuring when any node in the tree view has been changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnChanging">
<Description>
Handler of event occuring when any node in the tree view is being changed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCollapsed">
<Description>
Handler of event occuring when the node in the tree view has been collapsed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCollapsing">
<Description>
Handler of event occuring when the node in the tree view is being collapsed.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCompare">
<Description>
Handler of event occuring when the AlphaSort method compares two nodes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCustomDraw">
<Description>
Handler of event occuring just before the tree view nodes are to be painted.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnCustomDrawItem">
<Description>
Handler of event occuring just before a node is to be painted, giving opportunity to draw something on the tree view canvas.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDeletion">
<Description>
Handler of event occuring when a node is about to be removed from the tree view.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEdited">
<Description>
Handler of event occuring immediately after the label of a node has been edited.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEditing">
<Description>
Handler of event occuring when the label of a node is being edited.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnExpanded">
<Description>
Handler of event occuring when the node in the tree view has been expanded.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnExpanding">
<Description>
Handler of event occuring when the node in the tree view is being expanded.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetImageIndex">
<Description>
Handler of event occuring just before a node is to be displayed, giving the opportunity to assign ImageIndex to this node. The ImageIndex will be used to associate images and nodes.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetSelectedIndex">
<Description>
Handler of event occuring when the SelectedIndex property of a node is retrieved, giving opportunity to change the selected image index.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ReadOnly">
<Description>
Determines, can the tree view contents be edited by user (if set to "False") or not (if set to "True").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RightClickSelect">
<Description><![CDATA[
If set to "True", both left and right mouse click select nodes, otherwise, only left mouse click selects nodes.<br>
Note: the nodes selected by the right mouse click will not be highlighted automatically.
]]></Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="RowSelect">
<Description>
Determines, will the entire row containing selected node be highlighted (if set to "True") or the node itself only (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ScalingFlags">
<Description>
For internal use.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(sfLeft,sfTop,sfWidth,sfHeight,sfFont)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Selected">
<Description>
Contains oref of the first selected node, or empty string if no nodes are selected.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ShowButtons">
<Description>
Determines, should the '+' and '-' buttons allowing to expand/collapse nodes be displayed near every node (if set to "True") of not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowLines">
<Description>
Determines, should the lines connecting parent nodes with their child nodes (if set to "True")  be shown or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ShowRoot">
<Description>
Determines, should the lines connecting first-level nodes with the common root be displayed (if both this property and ShowLines are set to "True") or not (if any of them is set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="SortType">
<Description><![CDATA[
Detemines the sorting mode for the AlphaSort method. Possible values:<br>
"stNone" - no sorting.<br>
"stData" - sort in accordance with the values of nodes Data property (only if OnCompare handler is assigned).<br>
"stText" - sort in accordance with the nodes labels.<br>
"stBoth" - combines two previous modes.
]]></Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",stNone,stData,stText,stBoth"/>
</Property>

<Property name="StateImages">
<Description>
Contains oref of the additional image list with bitmaps to be displayed near every node in the tree view. Nodes and images are associated by the values of the StateIndex properties of nodes.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ToolTips">
<Description>
Determines, should nodes have tooltips with text specified by the value of their Hint properties (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TopItem">
<Description>
Represents the topmost visible node of the tree view.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" d ##class(=%TMWinControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Canvas.%Close()")
 $$$GENERATE(" s ..Canvas=##class(%TMCanvas).%New($lb(..Address,0,""Canvas""))")
 $$$GENERATE(" d ..Items.%Close()")
 $$$GENERATE(" s ..Items=##class(%TMTreeNodes).%New($lb(..Address,0,""Items""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="AlphaSort">
<Description>
Sorts the nodes in the tree view, in accordance with the value of the SortType property and OnCompare event handler. Returns "True" if successful, or "False" if failed.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("AlphaSort",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="AutoExpandGet">
<Description>
Method for getting 'AutoExpand' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoExpand")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoExpandSet">
<Description>
Method for setting 'AutoExpand' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoExpand",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="AutoSizeGet">
<Description>
Method for getting 'AutoSize' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("AutoSize")
 q tmp
]]></Implementation>
</Method>

<Method name="AutoSizeSet">
<Description>
Method for setting 'AutoSize' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("AutoSize",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderStyleGet">
<Description>
Method for getting 'BorderStyle' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderStyle")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderStyleSet">
<Description>
Method for setting 'BorderStyle' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderStyle",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ChangeDelayGet">
<Description>
Method for getting 'ChangeDelay' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ChangeDelay")
 q tmp
]]></Implementation>
</Method>

<Method name="ChangeDelaySet">
<Description>
Method for setting 'ChangeDelay' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ChangeDelay",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMTreeView"
]]></Implementation>
</Method>

<Method name="DropTargetGet">
<Description>
Method for getting 'DropTarget' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DropTarget"))
 q tmp
]]></Implementation>
</Method>

<Method name="DropTargetSet">
<Description>
Method for setting 'DropTarget' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DropTarget",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="FullCollapse">
<Description>
Hides all nodes at the levels higher than the first one.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FullCollapse",$lb())
 q
]]></Implementation>
</Method>

<Method name="FullExpand">
<Description>
Makes all nodes visible.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("FullExpand",$lb())
 q
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMWinControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMWinControl")
 e  $$$GENERATE(" s result=##class(=%TMWinControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Canvas.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Canvas,""Canvas"","""")_result")
 $$$GENERATE(" s result=result_..Items.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Items,""Items"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetHitTestInfoAt">
<Description><![CDATA[
Returns Cache' list ($lb) where only strings actual for the specified point are combined. Possible strings:<br>
"htAbove" - to top from the control.<br>
"htBelow" - to bottom the control.<br>
"htNowhere" - not on any item, though inside the control.<br>
"htOnItem" - on an item.<br>
"htOnButton" - on a button.<br>
"htOnIcon" - on an icon.<br>
"htOnIndent" - on an indent.<br>
"htOnLabel" - on a label.<br>
"htOnRight" - on the right side.<br>
"htOnStateIcon" - on a state icon.<br>
"htToLeft" - to left from the control.<br>
"htToRight" - to right from the control.
]]></Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("GetHitTestInfoAt",$lb(X,Y))
 q tmp
]]></Implementation>
</Method>

<Method name="GetNodeAt">
<Description>
Returns oref of the node at the specified position, or empty string if there are no nodes at this position.
</Description>
<FormalSpec>X:%Integer,Y:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%TMTreeNode</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.RunMethod("GetNodeAt",$lb(X,Y)))
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionGet">
<Description>
Method for getting 'HideSelection' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HideSelection")
 q tmp
]]></Implementation>
</Method>

<Method name="HideSelectionSet">
<Description>
Method for setting 'HideSelection' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HideSelection",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HotTrackGet">
<Description>
Method for getting 'HotTrack' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HotTrack")
 q tmp
]]></Implementation>
</Method>

<Method name="HotTrackSet">
<Description>
Method for setting 'HotTrack' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HotTrack",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImagesGet">
<Description>
Method for getting 'Images' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Images"))
 q tmp
]]></Implementation>
</Method>

<Method name="ImagesSet">
<Description>
Method for setting 'Images' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Images",Value.Address)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IndentGet">
<Description>
Method for getting 'Indent' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Indent")
 q tmp
]]></Implementation>
</Method>

<Method name="IndentSet">
<Description>
Method for setting 'Indent' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Indent",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="IsEditing">
<Description>
Returns "True" if any node label is being edited, otherwise "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("IsEditing",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="OnChangeGet">
<Description>
Method for getting 'OnChange' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChange
]]></Implementation>
</Method>

<Method name="OnChangeSet">
<Description>
Method for setting 'OnChange' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChange=Value
 d ##this.SetEvent("OnChange",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnChangingGet">
<Description>
Method for getting 'OnChanging' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnChanging
]]></Implementation>
</Method>

<Method name="OnChangingSet">
<Description>
Method for setting 'OnChanging' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnChanging=Value
 d ##this.SetEvent("OnChanging",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCollapsedGet">
<Description>
Method for getting 'OnCollapsed' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCollapsed
]]></Implementation>
</Method>

<Method name="OnCollapsedSet">
<Description>
Method for setting 'OnCollapsed' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCollapsed=Value
 d ##this.SetEvent("OnCollapsed",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCollapsingGet">
<Description>
Method for getting 'OnCollapsing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCollapsing
]]></Implementation>
</Method>

<Method name="OnCollapsingSet">
<Description>
Method for setting 'OnCollapsing' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCollapsing=Value
 d ##this.SetEvent("OnCollapsing",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCompareGet">
<Description>
Method for getting 'OnCompare' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCompare
]]></Implementation>
</Method>

<Method name="OnCompareSet">
<Description>
Method for setting 'OnCompare' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCompare=Value
 d ##this.SetEvent("OnCompare",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCustomDrawGet">
<Description>
Method for getting 'OnCustomDraw' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCustomDraw
]]></Implementation>
</Method>

<Method name="OnCustomDrawItemGet">
<Description>
Method for getting 'OnCustomDrawItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnCustomDrawItem
]]></Implementation>
</Method>

<Method name="OnCustomDrawItemSet">
<Description>
Method for setting 'OnCustomDrawItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCustomDrawItem=Value
 d ##this.SetEvent("OnCustomDrawItem",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnCustomDrawSet">
<Description>
Method for setting 'OnCustomDraw' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnCustomDraw=Value
 d ##this.SetEvent("OnCustomDraw",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDeletionGet">
<Description>
Method for getting 'OnDeletion' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDeletion
]]></Implementation>
</Method>

<Method name="OnDeletionSet">
<Description>
Method for setting 'OnDeletion' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDeletion=Value
 d ##this.SetEvent("OnDeletion",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditedGet">
<Description>
Method for getting 'OnEdited' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEdited
]]></Implementation>
</Method>

<Method name="OnEditedSet">
<Description>
Method for setting 'OnEdited' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEdited=Value
 d ##this.SetEvent("OnEdited",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEditingGet">
<Description>
Method for getting 'OnEditing' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEditing
]]></Implementation>
</Method>

<Method name="OnEditingSet">
<Description>
Method for setting 'OnEditing' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEditing=Value
 d ##this.SetEvent("OnEditing",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnExpandedGet">
<Description>
Method for getting 'OnExpanded' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnExpanded
]]></Implementation>
</Method>

<Method name="OnExpandedSet">
<Description>
Method for setting 'OnExpanded' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnExpanded=Value
 d ##this.SetEvent("OnExpanded",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnExpandingGet">
<Description>
Method for getting 'OnExpanding' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnExpanding
]]></Implementation>
</Method>

<Method name="OnExpandingSet">
<Description>
Method for setting 'OnExpanding' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnExpanding=Value
 d ##this.SetEvent("OnExpanding",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetImageIndexGet">
<Description>
Method for getting 'OnGetImageIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetImageIndex
]]></Implementation>
</Method>

<Method name="OnGetImageIndexSet">
<Description>
Method for setting 'OnGetImageIndex' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetImageIndex=Value
 d ##this.SetEvent("OnGetImageIndex",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnGetSelectedIndexGet">
<Description>
Method for getting 'OnGetSelectedIndex' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnGetSelectedIndex
]]></Implementation>
</Method>

<Method name="OnGetSelectedIndexSet">
<Description>
Method for setting 'OnGetSelectedIndex' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnGetSelectedIndex=Value
 d ##this.SetEvent("OnGetSelectedIndex",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ReadOnlyGet">
<Description>
Method for getting 'ReadOnly' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ReadOnly")
 q tmp
]]></Implementation>
</Method>

<Method name="ReadOnlySet">
<Description>
Method for setting 'ReadOnly' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ReadOnly",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RightClickSelectGet">
<Description>
Method for getting 'RightClickSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RightClickSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="RightClickSelectSet">
<Description>
Method for setting 'RightClickSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RightClickSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RowSelectGet">
<Description>
Method for getting 'RowSelect' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("RowSelect")
 q tmp
]]></Implementation>
</Method>

<Method name="RowSelectSet">
<Description>
Method for setting 'RowSelect' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("RowSelect",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ScalingFlagsGet">
<Description>
Method for getting 'ScalingFlags' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ScalingFlags")
 q tmp
]]></Implementation>
</Method>

<Method name="ScalingFlagsSet">
<Description>
Method for setting 'ScalingFlags' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ScalingFlags",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SelectedGet">
<Description>
Method for getting 'Selected' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("Selected"))
 q tmp
]]></Implementation>
</Method>

<Method name="SelectedSet">
<Description>
Method for setting 'Selected' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Selected",$S(Value="":"",1:Value.Address))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowButtonsGet">
<Description>
Method for getting 'ShowButtons' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowButtons")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowButtonsSet">
<Description>
Method for setting 'ShowButtons' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowButtons",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowLinesGet">
<Description>
Method for getting 'ShowLines' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowLines")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowLinesSet">
<Description>
Method for setting 'ShowLines' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowLines",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ShowRootGet">
<Description>
Method for getting 'ShowRoot' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ShowRoot")
 q tmp
]]></Implementation>
</Method>

<Method name="ShowRootSet">
<Description>
Method for setting 'ShowRoot' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ShowRoot",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SortTypeGet">
<Description>
Method for getting 'SortType' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("SortType")
 q tmp
]]></Implementation>
</Method>

<Method name="SortTypeSet">
<Description>
Method for setting 'SortType' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("SortType",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="StateImagesGet">
<Description>
Method for getting 'StateImages' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("StateImages"))
 q tmp
]]></Implementation>
</Method>

<Method name="StateImagesSet">
<Description>
Method for setting 'StateImages' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("StateImages",$S(Value="":"",1:Value.Address))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ToolTipsGet">
<Description>
Method for getting 'ToolTips' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ToolTips")
 q tmp
]]></Implementation>
</Method>

<Method name="ToolTipsSet">
<Description>
Method for setting 'ToolTips' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ToolTips",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TopItemGet">
<Description>
Method for getting 'TopItem' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("TopItem"))
 q tmp
]]></Implementation>
</Method>

<Method name="TopItemSet">
<Description>
Method for setting 'TopItem' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TopItem",$S(Value="":"",1:Value.Address))
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
<Value name="37">
<Value>Canvas</Value>
</Value>
<Value name="38">
<Value>DropTarget</Value>
</Value>
<Value name="39">
<Value>Images</Value>
</Value>
<Value name="40">
<Value>Items</Value>
</Value>
<Value name="41">
<Value>OnChange</Value>
</Value>
<Value name="42">
<Value>OnChanging</Value>
</Value>
<Value name="43">
<Value>OnCollapsed</Value>
</Value>
<Value name="44">
<Value>OnCollapsing</Value>
</Value>
<Value name="45">
<Value>OnCompare</Value>
</Value>
<Value name="46">
<Value>OnCustomDraw</Value>
</Value>
<Value name="47">
<Value>OnCustomDrawItem</Value>
</Value>
<Value name="48">
<Value>OnDeletion</Value>
</Value>
<Value name="49">
<Value>OnEdited</Value>
</Value>
<Value name="50">
<Value>OnEditing</Value>
</Value>
<Value name="51">
<Value>OnExpanded</Value>
</Value>
<Value name="52">
<Value>OnExpanding</Value>
</Value>
<Value name="53">
<Value>OnGetImageIndex</Value>
</Value>
<Value name="54">
<Value>OnGetSelectedIndex</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%Library.TMView3DOptions">
<Description>
This class allows to control the 3D series images appearance.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMPersistent</Super>
<TimeCreated>64314,73346</TimeCreated>

<Property name="Elevation">
<Description>
Determines angle of rotation (in degrees) turning the top of the chart toward the viewer.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HorizOffset">
<Description>
Determines the horizontal offset of the chart (positive - to right, negative - to left).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Orthogonal">
<Description>
Determines, should the 3D canvas be used (if set to "True") or not (if set to "False"). If set to "False", the 'Elevation' and 'Rotation' properties do nothing.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Perspective">
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Rotation">
<Description>
Determines angle of rotation (in degrees) turning the right side of the chart toward the viewer.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Tilt">
<Description>
Determines angle of rotation (in degrees) in the chart plane.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="VertOffset">
<Description>
Determines the vertical offset of the chart (positive - downward, negative - upward).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Zoom">
<Description>
Determines the zooming factor for the chart (in percents, default value is 100).
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ZoomText">
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMView3DOptions"
]]></Implementation>
</Method>

<Method name="ElevationGet">
<Description>
Method for getting 'Elevation' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Elevation")
 q tmp
]]></Implementation>
</Method>

<Method name="ElevationSet">
<Description>
Method for setting 'Elevation' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Elevation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="HorizOffsetGet">
<Description>
Method for getting 'HorizOffset' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HorizOffset")
 q tmp
]]></Implementation>
</Method>

<Method name="HorizOffsetSet">
<Description>
Method for setting 'HorizOffset' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HorizOffset",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OrthogonalGet">
<Description>
Method for getting 'Orthogonal' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Orthogonal")
 q tmp
]]></Implementation>
</Method>

<Method name="OrthogonalSet">
<Description>
Method for setting 'Orthogonal' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Orthogonal",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="PerspectiveGet">
<Description>
Method for getting 'Perspective' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Perspective")
 q tmp
]]></Implementation>
</Method>

<Method name="PerspectiveSet">
<Description>
Method for setting 'Perspective' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Perspective",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="RotationGet">
<Description>
Method for getting 'Rotation' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Rotation")
 q tmp
]]></Implementation>
</Method>

<Method name="RotationSet">
<Description>
Method for setting 'Rotation' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Rotation",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TiltGet">
<Description>
Method for getting 'Tilt' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Tilt")
 q tmp
]]></Implementation>
</Method>

<Method name="TiltSet">
<Description>
Method for setting 'Tilt' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Tilt",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="VertOffsetGet">
<Description>
Method for getting 'VertOffset' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("VertOffset")
 q tmp
]]></Implementation>
</Method>

<Method name="VertOffsetSet">
<Description>
Method for setting 'VertOffset' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("VertOffset",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ZoomGet">
<Description>
Method for getting 'Zoom' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Zoom")
 q tmp
]]></Implementation>
</Method>

<Method name="ZoomSet">
<Description>
Method for setting 'Zoom' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Zoom",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ZoomTextGet">
<Description>
Method for getting 'ZoomText' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ZoomText")
 q tmp
]]></Implementation>
</Method>

<Method name="ZoomTextSet">
<Description>
Method for setting 'ZoomText' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ZoomText",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%Library.TMWebFormClass">
<Super>%CSP.Page</Super>
<TimeCreated>64526,70083.408039</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  q $$$OK
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
  Do %response.SetHeader("Content-Type","text/html")   
  q 1
]]></Implementation>
</Method>
</Class>


<Class name="%Library.TMWinControl">
<Description>
The base class for all windowed (able to have focus) controls.
</Description>
<ClassType>serial</ClassType>
<ProcedureBlock>0</ProcedureBlock>
<StorageStrategy>Default</StorageStrategy>
<Super>%TMControl</Super>
<TimeCreated>64314,73346</TimeCreated>

<Property name="BevelEdges">
<Description>
Determines edges of the control to be bevelled. Possible value: Cache' list ($lb) where only necessary from these strings: "beLeft", "beTop", "beRight" and "beBottom" are combined, or $lb() to cancel bevelling.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="DISPLAYLIST" value="$lb(beLeft,beTop,beRight,beBottom)"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="BevelInner">
<Description>
Determines the appearance of inner bevel. Possible values: "bvNone", "bvLowered", "bvRaised" or "bvSpace".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bvNone,bvLowered,bvRaised,bvSpace"/>
</Property>

<Property name="BevelKind">
<Description>
Determines the sharpness of the bevel. Possible values: "bkNone", "bkTile", "bkSoft" or "bkFlat".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bkNone,bkTile,bkSoft,bkFlat"/>
</Property>

<Property name="BevelOuter">
<Description>
Determines the appearance of outer bevel. Possible values: "bvNone", "bvLowered", "bvRaised" or "bvSpace".
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",bvNone,bvLowered,bvRaised,bvSpace"/>
</Property>

<Property name="BevelWidth">
<Description>
Determines the width (in pixels), of the bevels.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="BorderWidth">
<Description>
Determines the border width (in pixels) of the control. No other controls can overlap the border.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Brush">
<Description>
Oref of the %TMBrush object describing the color and style of the control background. Read only.
</Description>
<Type>%Library.TMBrush</Type>
</Property>

<Property name="ControlCount">
<Description>
Represents the number of child controls of this control. Read only.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Ctl3D">
<Description>
Determines, has the control 3-D (if set to "True", default value) or flat (if set to "False") appearance. Direct change of this property sets the ParentCtl3D property to "False" automatically.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="DockSite">
<Description>
Determines, can the control be a target for drag-and-drop operations (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="HelpContext">
<Description>
Determines the context number of the screen in the help system, corresponding to the control. If set to 0, parent's HelpContext will be used.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="ImeMode">
<Description>
Represents the current mode of an Input Method Editor (IME).
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",imDisable,imClose,imOpen, imDontCare, imSAlpha, imAlpha, imHira, imSKata, imKata, imChinese, imSHanguel, imHanguel"/>
</Property>

<Property name="ImeName">
<Description>
Specifies the input method editor (IME) to use for converting keyboard input to Asian language characters.
</Description>
<Type>%Library.String</Type>
<Calculated>1</Calculated>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDockDrop">
<Description>
Handler of event occuring when another control is docked to the control.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnDockOver">
<Description>
Handler of event occuring whether control acceptable for docking is dragged over the current control.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnEnter">
<Description>
Handler of event occuring when the control becomes active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnExit">
<Description>
Handler of event occuring when the control loses focus.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnGetSiteInfo">
<Description>
Currently not supported.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnKeyDown">
<Description>
Handler of event occuring if the key is pressed when the control is active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnKeyPress">
<Description>
Handler of event occuring if the single-character key is pressed when the control is active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnKeyUp">
<Description>
Handler of event occuring if the key pressed when the control was active, is released.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseWheel">
<Description>
Handler of event occuring when the mouse wheel is rotated when the control is active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseWheelDown">
<Description>
Handler of event occuring when the mouse wheel is rotated downward when the control is active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="OnMouseWheelUp">
<Description>
Handler of event occuring when the mouse wheel is rotated upward when the control is active.
</Description>
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ParentCtl3D">
<Description>
Determines, does the parents Ctl3D property affect on the control appearance (if set to "True") or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabOrder">
<Description>
Determines the position of the control in the tab sequence.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Property name="TabStop">
<Description>
Determines, is it possible to set focus on this control using the Tab key (if set to "True", default value) or not (if set to "False").
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="UseDockManager">
<Description>
Currently not supported.
</Description>
<Type>%Library.Boolean</Type>
<Calculated>1</Calculated>
</Property>

<Property name="WheelAccumulator">
<Description>
Indicates, how much the mouse wheel has been rotated.
</Description>
<Type>%Library.Integer</Type>
<Calculated>1</Calculated>
</Property>

<Method name="%OnClose">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnClose()")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnClose()")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
For internal use.
</Description>
<CodeMode>generator</CodeMode>
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" q:initvalue="""" $$$OK")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" d ..%OnNew(initvalue)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" d ##class(=%TMControl)##this.%OnNew(initvalue)")
 $$$GENERATE(" d ..Brush.%Close()")
 $$$GENERATE(" s ..Brush=##class(%TMBrush).%New($lb(..Address,0,""Brush""))")
 $$$GENERATE(" q $$$OK")
 q $$$OK
]]></Implementation>
</Method>

<Method name="BevelEdgesGet">
<Description>
Method for getting 'BevelEdges' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BevelEdges")
 q tmp
]]></Implementation>
</Method>

<Method name="BevelEdgesSet">
<Description>
Method for setting 'BevelEdges' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BevelEdges",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BevelInnerGet">
<Description>
Method for getting 'BevelInner' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BevelInner")
 q tmp
]]></Implementation>
</Method>

<Method name="BevelInnerSet">
<Description>
Method for setting 'BevelInner' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BevelInner",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BevelKindGet">
<Description>
Method for getting 'BevelKind' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BevelKind")
 q tmp
]]></Implementation>
</Method>

<Method name="BevelKindSet">
<Description>
Method for setting 'BevelKind' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BevelKind",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BevelOuterGet">
<Description>
Method for getting 'BevelOuter' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BevelOuter")
 q tmp
]]></Implementation>
</Method>

<Method name="BevelOuterSet">
<Description>
Method for setting 'BevelOuter' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BevelOuter",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BevelWidthGet">
<Description>
Method for getting 'BevelWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BevelWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="BevelWidthSet">
<Description>
Method for setting 'BevelWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BevelWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="BorderWidthGet">
<Description>
Method for getting 'BorderWidth' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("BorderWidth")
 q tmp
]]></Implementation>
</Method>

<Method name="BorderWidthSet">
<Description>
Method for setting 'BorderWidth' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("BorderWidth",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="CanFocus">
<Description>
Returns "True" if all of Visible and Enabled properties of the control and its parents are "True". Returns "False" if any of mentioned properties is "False".
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("CanFocus",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="ClassName">
<Description>
For internal use.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q "TMWinControl"
]]></Implementation>
</Method>

<Method name="ControlCountGet">
<Description>
Method for getting 'ControlCount' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ControlCount")
 q tmp
]]></Implementation>
</Method>

<Method name="ControlCountSet">
<Description>
Method for setting 'ControlCount' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ControlCount",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Ctl3DGet">
<Description>
Method for getting 'Ctl3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("Ctl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="Ctl3DSet">
<Description>
Method for setting 'Ctl3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("Ctl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="DockSiteGet">
<Description>
Method for getting 'DockSite' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##class(%TMPersistent).GetObjOref(##this.GetProperty("DockSite"))
 q tmp
]]></Implementation>
</Method>

<Method name="DockSiteSet">
<Description>
Method for setting 'DockSite' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Library.Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("DockSite",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="Focused">
<Description>
Returns "True" if the control is active, or "False" if the control has not focus.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("Focused",$lb())
 q tmp
]]></Implementation>
</Method>

<Method name="GetBindString">
<CodeMode>generator</CodeMode>
<FormalSpec>Parent:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s %code=0
 $$$GENERATE(" n result")
 $$$GENERATE(" s result=""""")
 i $p($$GetVersion^%apiOBJ()," ",4)<4 d
 . $$$GENERATE(" #classcontext %TMControl")
 . $$$GENERATE(" s result=..GetBindString(Parent)")
 . $$$GENERATE(" #endclasscontext %TMControl")
 e  $$$GENERATE(" s result=##class(=%TMControl)##this.GetBindString(Parent)")
 $$$GENERATE(" s result=result_..Brush.GetBindString(##this)")
 $$$GENERATE(" s result=$lb(+##this,+..Brush,""Brush"","""")_result")
 $$$GENERATE(" q result")
 q $$$OK
]]></Implementation>
</Method>

<Method name="HelpContextGet">
<Description>
Method for getting 'HelpContext' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("HelpContext")
 q tmp
]]></Implementation>
</Method>

<Method name="HelpContextSet">
<Description>
Method for setting 'HelpContext' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("HelpContext",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImeModeGet">
<Description>
Method for getting 'ImeMode' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImeMode")
 q tmp
]]></Implementation>
</Method>

<Method name="ImeModeSet">
<Description>
Method for setting 'ImeMode' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImeMode",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="ImeNameGet">
<Description>
Method for getting 'ImeName' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ImeName")
 q tmp
]]></Implementation>
</Method>

<Method name="ImeNameSet">
<Description>
Method for setting 'ImeName' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ImeName",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDockDropGet">
<Description>
Method for getting 'OnDockDrop' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDockDrop
]]></Implementation>
</Method>

<Method name="OnDockDropSet">
<Description>
Method for setting 'OnDockDrop' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDockDrop=Value
 d ##this.SetEvent("OnDockDrop",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnDockOverGet">
<Description>
Method for getting 'OnDockOver' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnDockOver
]]></Implementation>
</Method>

<Method name="OnDockOverSet">
<Description>
Method for setting 'OnDockOver' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnDockOver=Value
 d ##this.SetEvent("OnDockOver",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnEnterGet">
<Description>
Method for getting 'OnEnter' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnEnter
]]></Implementation>
</Method>

<Method name="OnEnterSet">
<Description>
Method for setting 'OnEnter' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnEnter=Value
 d ##this.SetEvent("OnEnter",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnExitGet">
<Description>
Method for getting 'OnExit' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnExit
]]></Implementation>
</Method>

<Method name="OnExitSet">
<Description>
Method for setting 'OnExit' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnExit=Value
 d ##this.SetEvent("OnExit",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnKeyDownGet">
<Description>
Method for getting 'OnKeyDown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnKeyDown
]]></Implementation>
</Method>

<Method name="OnKeyDownSet">
<Description>
Method for setting 'OnKeyDown' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnKeyDown=Value
 d ##this.SetEvent("OnKeyDown",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnKeyPressGet">
<Description>
Method for getting 'OnKeyPress' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnKeyPress
]]></Implementation>
</Method>

<Method name="OnKeyPressSet">
<Description>
Method for setting 'OnKeyPress' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnKeyPress=Value
 d ##this.SetEvent("OnKeyPress",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnKeyUpGet">
<Description>
Method for getting 'OnKeyUp' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnKeyUp
]]></Implementation>
</Method>

<Method name="OnKeyUpSet">
<Description>
Method for setting 'OnKeyUp' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnKeyUp=Value
 d ##this.SetEvent("OnKeyUp",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseWheelDownGet">
<Description>
Method for getting 'OnMouseWheelDown' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseWheelDown
]]></Implementation>
</Method>

<Method name="OnMouseWheelDownSet">
<Description>
Method for setting 'OnMouseWheelDown' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseWheelDown=Value
 d ##this.SetEvent("OnMouseWheelDown",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseWheelGet">
<Description>
Method for getting 'OnMouseWheel' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseWheel
]]></Implementation>
</Method>

<Method name="OnMouseWheelSet">
<Description>
Method for setting 'OnMouseWheel' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseWheel=Value
 d ##this.SetEvent("OnMouseWheel",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="OnMouseWheelUpGet">
<Description>
Method for getting 'OnMouseWheelUp' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q i%OnMouseWheelUp
]]></Implementation>
</Method>

<Method name="OnMouseWheelUpSet">
<Description>
Method for setting 'OnMouseWheelUp' property.
</Description>
<FormalSpec>Value:%String</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s i%OnMouseWheelUp=Value
 d ##this.SetEvent("OnMouseWheelUp",$lg(Value,1),$lg(Value,2))
 q $$$OK
]]></Implementation>
</Method>

<Method name="ParentCtl3DGet">
<Description>
Method for getting 'ParentCtl3D' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("ParentCtl3D")
 q tmp
]]></Implementation>
</Method>

<Method name="ParentCtl3DSet">
<Description>
Method for setting 'ParentCtl3D' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("ParentCtl3D",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="SetBounds">
<Description>
Changes the Left, Top, Width and Height properties of the control in one method call.
</Description>
<FormalSpec>ALeft:%Integer,ATop:%Integer,AWidth:%Integer,AHeight:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetBounds",$lb(ALeft,ATop,AWidth,AHeight))
 q
]]></Implementation>
</Method>

<Method name="SetFocus">
<Description>
Moves the focus to another control.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.RunMethod("SetFocus",$lb())
 q
]]></Implementation>
</Method>

<Method name="TabOrderGet">
<Description>
Method for getting 'TabOrder' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabOrder")
 q tmp
]]></Implementation>
</Method>

<Method name="TabOrderSet">
<Description>
Method for setting 'TabOrder' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabOrder",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="TabStopGet">
<Description>
Method for getting 'TabStop' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("TabStop")
 q tmp
]]></Implementation>
</Method>

<Method name="TabStopSet">
<Description>
Method for setting 'TabStop' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("TabStop",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="UseDockManagerGet">
<Description>
Method for getting 'UseDockManager' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("UseDockManager")
 q tmp
]]></Implementation>
</Method>

<Method name="UseDockManagerSet">
<Description>
Method for setting 'UseDockManager' property.
</Description>
<FormalSpec>Value:%Boolean</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("UseDockManager",Value)
 q $$$OK
]]></Implementation>
</Method>

<Method name="WheelAccumulatorGet">
<Description>
Method for getting 'WheelAccumulator' property.
</Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n tmp
 s tmp=##this.GetProperty("WheelAccumulator")
 q tmp
]]></Implementation>
</Method>

<Method name="WheelAccumulatorSet">
<Description>
Method for setting 'WheelAccumulator' property.
</Description>
<FormalSpec>Value:%Integer</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 d ##this.SetProperty("WheelAccumulator",Value)
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="TMPersistentState">
<Value name="1">
<Value>Address</Value>
</Value>
<Value name="2">
<Value>ClassName</Value>
</Value>
<Value name="3">
<Value>CloseFromClient</Value>
</Value>
<Value name="4">
<Value>Parent</Value>
</Value>
<Value name="5">
<Value>PropName</Value>
</Value>
<Value name="6">
<Value>ClassNameAbsent</Value>
</Value>
<Value name="7">
<Value>Tag</Value>
</Value>
<Value name="8">
<Value>Constraints</Value>
</Value>
<Value name="9">
<Value>Font</Value>
</Value>
<Value name="10">
<Value>OnCanResize</Value>
</Value>
<Value name="11">
<Value>OnClick</Value>
</Value>
<Value name="12">
<Value>OnConstrainedResize</Value>
</Value>
<Value name="13">
<Value>OnDblClick</Value>
</Value>
<Value name="14">
<Value>OnDragDrop</Value>
</Value>
<Value name="15">
<Value>OnDragOver</Value>
</Value>
<Value name="16">
<Value>OnEndDock</Value>
</Value>
<Value name="17">
<Value>OnEndDrag</Value>
</Value>
<Value name="18">
<Value>OnMouseDown</Value>
</Value>
<Value name="19">
<Value>OnMouseMove</Value>
</Value>
<Value name="20">
<Value>OnMouseUp</Value>
</Value>
<Value name="21">
<Value>OnResize</Value>
</Value>
<Value name="22">
<Value>OnStartDock</Value>
</Value>
<Value name="23">
<Value>OnStartDrag</Value>
</Value>
<Value name="24">
<Value>PopupMenu</Value>
</Value>
<Value name="25">
<Value>Brush</Value>
</Value>
<Value name="26">
<Value>OnDockDrop</Value>
</Value>
<Value name="27">
<Value>OnDockOver</Value>
</Value>
<Value name="28">
<Value>OnEnter</Value>
</Value>
<Value name="29">
<Value>OnExit</Value>
</Value>
<Value name="30">
<Value>OnGetSiteInfo</Value>
</Value>
<Value name="31">
<Value>OnKeyDown</Value>
</Value>
<Value name="32">
<Value>OnKeyPress</Value>
</Value>
<Value name="33">
<Value>OnKeyUp</Value>
</Value>
<Value name="34">
<Value>OnMouseWheel</Value>
</Value>
<Value name="35">
<Value>OnMouseWheelDown</Value>
</Value>
<Value name="36">
<Value>OnMouseWheelUp</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="%ZConst" type="INC"><![CDATA[
 ; Color constants (Some duplications)  using RGB color scheme.  Three byte constant, each byte value range 0-FF.  First byte is Blue value, second is Green value third is Red value.
 ; These bytes are swapped by the $ZH function to give RGB.  The total number of available colors is 16777216. (Depending on display settings)
#define clBlack $ZH("000000")
#define clMaroon $ZH("000080")
#define clGreen $ZH("008000")
#define clLtGreen $ZH("C0FFC0")
#define clMedGreen $ZH("80FF80")
#define clOlive $ZH("008080")
#define clNavy $ZH("800000")
#define clPurple $ZH("800080")
#define clTeal $ZH("808000")
#define clGray $ZH("808080") 
#define clSilver $ZH("C0C0C0")
#define clRed $ZH("0000FF")
#define clMedRed $ZH("8080FF")
#define clLtRed $ZH("C0C0FF")
#define clOrange $ZH("0080FF")
#define clMedOrange $ZH("80C0FF")
#define clLtOrange $ZH("C0E0FF")
#define clLime $ZH("00FF00")
#define clYellow $ZH("00FFFF")
#define clMedYellow $ZH("80FFFF")
#define clLtYellow $ZH("C0FFFF")
#define clBlue $ZH("FF0000")
#define clMedBlue $ZH("FF8080")
#define clLtBlue $ZH("FFC0C0")
#define clFuchsia $ZH("FF00FF")
#define clPink $ZH("FF00FF")
#define clMedPink $ZH("FF80FF")
#define clLtPink $ZH("FFC0FF")
#define clAqua $ZH("FFFF00")
#define clMedAqua $ZH("FFFF80")
#define clLtAqua $ZH("FFC0C0")
#define clLtGray $ZH("C0C0C0")
#define clDkGray $ZH("808080")
#define clFocus $ZH("8080FF")
#define clWhite $ZH("FFFFFF")
#define clNone $ZH("1FFFFFFF")
#define clDefault $ZH("20000000")
 
#define clScrollBar -2147483648
#define clBackground -2147483647
#define clActiveCaption -2147483646
#define clInactiveCaption -2147483645
#define clMenu -2147483644
#define clWindow -2147483643
#define clWindowFrame -2147483642
#define clMenuText -2147483641
#define clWindowText -2147483640
#define clCaptionText -2147483639
#define clActiveBorder -2147483638
#define clInactiveBorder -2147483637
#define clAppWorkSpace -2147483636
#define clHighlight -2147483635
#define clHighlightText -2147483634
#define clBtnFace -2147483633
#define clBtnShadow -2147483632 
#define clGrayText -2147483631
#define clBtnText -2147483630
#define clInactiveCaptionText -2147483629
#define clBtnHighlight -2147483628
#define cl3DDkShadow -2147483627
#define cl3DLight -2147483626
#define clInfoText -2147483625
#define clInfoBk -2147483624
 
 ;CHARSETS constants
#define ANSICHARSET     0
 ;       ANSI characters. 
#define DEFAULTCHARSET  1
 ;       Font is chosen based solely on Name and Size. If the described font is not available on the system, Windows will substitute another font.
#define SYMBOLCHARSET   2       
 ;       Standard symbol set.
#define MACCHARSET      77
 ;       Macintosh characters. Not available on NT 3.51.
#define SHIFTJISCHARSET 128
 ;       Japanese shift-jis characters.
#define HANGEULCHARSET  129
 ;       Korean characters (Wansung).
#define JOHABCHARSET    130
 ;       Korean characters (Johab). Not available on NT 3.51
#define GB2312CHARSET   134
 ;       Simplified Chinese characters (mainland china).
#define CHINESEBIG5CHARSET      136
 ;       Traditional Chinese characters (taiwanese).
#define GREEKCHARSET    161
 ;       Greek characters. Not available on NT 3.51.
#define TURKISHCHARSET  162
 ;       Turkish characters. Not available on NT 3.51
#define VIETNAMESECHARSET       163
 ;       Vietnamese characters. Not available on NT 3.51.
#define HEBREWCHARSET   177
 ;       Hebrew characters. Not available on NT 3.51
#define ARABICCHARSET   178
 ;       Arabic characters. Not available on NT 3.51
#define BALTICCHARSET   186
 ;       Baltic characters. Not available on NT 3.51.
#define RUSSIANCHARSET  204
 ;       Cyrillic characters. Not available on NT 3.51.
#define THAICHARSET     222
 ;       Thai characters. Not available on NT 3.51
#define EASTEUROPECHARSET       238
 ;       Includes diacritical marks for eastern european countries. Not available on NT 3.51.
#define OEMCHARSET      255
 ;       Depends on the codepage of the operating system.
#define crDefault 0
#define crNone    -1
#define crArrow   -2
#define crCross   -3
#define crIBeam   -4
#define crSize     -22
#define crSizeNESW -6
#define crSizeNS   -7
#define crSizeNWSE -8
#define crSizeWE   -9
#define crUpArrow  -10
#define crHourGlass -11
#define crDrag     -12
#define crNoDrop   -13
#define crHSplit   -14
#define crVSplit   -15
#define crMultiDrag -16
#define crSQLWait   -17
#define crNo        -18
#define crAppStart  -19
#define crHelp      -20
#define crHandPoint -21
#define crSizeAll   -22
 
#define ETOOPAQUE         2
#define ETOCLIPPED        4
#define ETOGLYPHINDEX    $ZH("10")
#define ETORTLREADING     $ZH("80")
#define ETONUMERICSLOCAL  $ZH("400")
#define ETONUMERICSLATIN  $ZH("800")
#define ETOIGNORELANGUAGE $ZH("1000")
#define ETOPDY            $ZH("2000")
 
 ; %TMApplication.MessageBox() flags
#define MBOK $ZH("00000000")
#define MBOKCANCEL $ZH("00000001")
#define MBABORTRETRYIGNORE $ZH("00000002")
#define MBYESNOCANCEL $ZH("00000003")
#define MBYESNO $ZH("00000004")
#define MBRETRYCANCEL $ZH("00000005")
 
#define MBICONHAND $ZH("00000010")
#define MBICONQUESTION $ZH("00000020")
#define MBICONEXCLAMATION $ZH("00000030")
#define MBICONASTERISK $ZH("00000040")
#define MBUSERICON $ZH("00000080")
#define MBICONWARNING $ZH("00000030")
#define MBICONERROR $ZH("00000010")
#define MBICONINFORMATION $ZH("00000040")
#define MBICONSTOP $ZH("00000010")
 
#define MBDEFBUTTON1 $ZH("00000000")
#define MBDEFBUTTON2 $ZH("00000100")
#define MBDEFBUTTON3 $ZH("00000200")
#define MBDEFBUTTON4 $ZH("00000300")
 
#define MBAPPLMODAL $ZH("00000000")
#define MBSYSTEMMODAL $ZH("00001000")
#define MBTASKMODAL $ZH("00002000")
#define MBHELP $ZH("00004000")                         
 
#define MBNOFOCUS $ZH("00008000")
#define MBSETFOREGROUND $ZH("00010000")
#define MBDEFAULTDESKTOPONLY $ZH("00020000")
 
#define MBTOPMOST $ZH("00040000")
#define MBRIGHT $ZH("00080000")
#define MBRTLREADING $ZH("00100000")
 
#define MBSERVICENOTIFICATION $ZH("00200000")
#define MBSERVICENOTIFICATIONNT3X $ZH("00040000")
 
#define MBTYPEMASK $ZH("0000000F")
#define MBICONMASK $ZH("000000F0")
#define MBDEFMASK $ZH("00000F00")
#define MBMODEMASK $ZH("00003000")
#define MBMISCMASK $ZH("0000C000")
 
 ;const  { Dialog Box Command IDs }
#define IDOK 1
#define IDCANCEL 2
#define IDABORT 3
#define IDRETRY 4
#define IDIGNORE 5
#define IDYES 6
#define IDNO 7
#define IDCLOSE 8
#define IDHELP 9
 
 ;const  { ModalResult IDs }        
#define mrNone 0
#define mrOk 1
#define mrCancel 2
#define mrAbort 3
#define mrRetry 4
#define mrIgnore 5
#define mrYes 6
#define mrNo 7
#define mrAll 8
#define mrNoToAll 9
#define mrYesToAll 10
 
#define fmCreate         $ZH("FFFF")
#define fmOpenRead       $ZH("0000")
#define fmOpenWrite      $ZH("0001")
#define fmOpenReadWrite  $ZH("0002")
#define fmShareCompat    $ZH("0000")
#define fmShareExclusive $ZH("0010")
#define fmShareDenyWrite $ZH("0020")
#define fmShareDenyRead  $ZH("0030")
#define fmShareDenyNone  $ZH("0040")
 
#define faReadOnly       $ZH("00000001")
#define faHidden         $ZH("00000002")
#define faSysFile        $ZH("00000004")
#define faVolumeID       $ZH("00000008")
#define faDirectory      $ZH("00000010")
#define faArchive        $ZH("00000020")
#define faAnyFile        $ZH("0000003F")
 
 ; declare OLE Automation constants
#define varEmpty        $ZH("0000")
#define varNull         $ZH("0001")
#define varSmallint     $ZH("0002")
#define varInteger      $ZH("0003")
#define varSingle       $ZH("0004")
#define varDouble       $ZH("0005")
#define varCurrency     $ZH("0006")
#define varDate         $ZH("0007")
#define varOleStr       $ZH("0008")
#define varDispatch     $ZH("0009")
#define varError        $ZH("000A")
#define varBoolean      $ZH("000B")
#define varVariant      $ZH("000C")
#define varUnknown      $ZH("000D")
#define varByte         $ZH("0011")
#define varString       $ZH("0100")
#define varTypeMask     $ZH("0FFF")
#define varArray        $ZH("2000")
#define varByRef        $ZH("4000")
 
 ; declare SMWrap component's constants
#define sbHorizontal   "sbHorizontal"
#define sbVertical   "sbVertical"
#define trHorizontal   "trHorizontal"
#define trVertical   "trVertical"
#define tmBottomRight   "tmBottomRight"
#define tmTopLeft   "tmTopLeft"
#define tmBoth   "tmBoth"
#define tsNone   "tsNone"
#define tsAuto   "tsAuto"
#define tsManual   "tsManual"
#define scLineUp   "scLineUp"
#define scLineDown   "scLineDown"
#define scPageUp   "scPageUp"
#define scPageDown   "scPageDown"
#define scPosition   "scPosition"
#define scTrack   "scTrack"
#define scTop   "scTop"
#define scBottom   "scBottom"
#define scEndScroll   "scEndScroll"
#define bsBox   "bsBox"
#define bsFrame   "bsFrame"
#define bsTopLine   "bsTopLine"
#define bsBottomLine   "bsBottomLine"
#define bsLeftLine   "bsLeftLine"
#define bsRightLine   "bsRightLine"
#define bsSpacer   "bsSpacer"
#define bsLowered   "bsLowered"
#define bsRaised   "bsRaised"
#define bsSolid   "bsSolid"
#define bsClear   "bsClear"
#define bsHorizontal   "bsHorizontal"
#define bsVertical   "bsVertical"
#define bsFDiagonal   "bsFDiagonal"
#define bsCross   "bsCross"
#define bsDiagCross   "bsDiagCross"
#define taLeftJustify   "taLeftJustify"
#define taRightJustify   "taRightJustify"
#define taCenter   "taCenter"
#define csRead   "csRead"
#define csWrite   "csWrite"
#define ctString   "ctString"
#define ctInteger   "ctInteger"
#define ctDouble   "ctDouble"
#define ctDate   "ctDate"
#define ctCurrency   "ctCurrency"
#define ieSimple   "ieSimple"
#define ieEllipsis   "ieEllipsis"
#define iePickList   "iePickList"
#define gdSelected   "gdSelected"
#define gdFocused   "gdFocused"
#define gdFixed   "gdFixed"
#define goFixedVertLine   "goFixedVertLine"
#define goFixedHorzLine   "goFixedHorzLine"
#define goVertLine   "goVertLine"
#define goHorzLine   "goHorzLine"
#define goRangeSelect   "goRangeSelect"
#define goDrawFocusSelected   "goDrawFocusSelected"
#define goRowSizing   "goRowSizing"
#define goColSizing   "goColSizing"
#define goRowMoving   "goRowMoving"
#define goColMoving   "goColMoving"
#define goEditing   "goEditing"
#define goTabs   "goTabs"
#define goRowSelect   "goRowSelect"
#define goAlwaysShowEditor   "goAlwaysShowEditor"
#define goThumbTracking   "goThumbTracking"
#define ssNone   "ssNone"
#define ssHorizontal   "ssHorizontal"
#define ssVertical   "ssVertical"
#define ssBoth   "ssBoth"
#define cbUnchecked   "cbUnchecked"
#define cbChecked   "cbChecked"
#define cbGrayed   "cbGrayed"
#define ecNormal   "ecNormal"
#define ecUpperCase   "ecUpperCase"
#define ecLowerCase   "ecLowerCase"
#define csDropDown   "csDropDown"
#define csSimple   "csSimple"
#define csDropDownList   "csDropDownList"
#define csOwnerDrawFixed   "csOwnerDrawFixed"
#define csOwnerDrawVariable   "csOwnerDrawVariable"
#define odSelected   "odSelected"
#define odGrayed   "odGrayed"
#define odDisabled   "odDisabled"
#define odChecked   "odChecked"
#define odFocused   "odFocused"
#define htAbove   "htAbove"
#define htNowhere   "htNowhere"
#define htBelow   "htBelow"
#define htOnItem   "htOnItem"
#define htOnButton   "htOnButton"
#define htOnIcon   "htOnIcon"
#define htOnIndent   "htOnIndent"
#define htOnLabel   "htOnLabel"
#define htOnRight   "htOnRight"
#define htOnStateIcon   "htOnStateIcon"
#define htToLeft   "htToLeft"
#define htToRight   "htToRight"
#define cdsSelected   "cdsSelected"
#define cdsGrayed   "cdsGrayed"
#define cdsDisabled   "cdsDisabled"
#define cdsChecked   "cdsChecked"
#define cdsFocused   "cdsFocused"
#define cdsDefault   "cdsDefault"
#define cdsHot   "cdsHot"
#define cdsMarked   "cdsMarked"
#define cdsIndeterminate   "cdsIndeterminate"
#define isNone   "isNone"
#define isCut   "isCut"
#define isDropHilited   "isDropHilited"
#define isFocused   "isFocused"
#define isSelected   "isSelected"
#define isActivating   "isActivating"
#define stWholeWord   "stWholeWord"
#define stMatchCase   "stMatchCase"
#define csCTS   "csCTS"
#define csDSR   "csDSR"
#define csRing   "csRing"
#define csRLSD   "csRLSD"
#define fCtlHold   "fCtlHold"
#define fDsrHold   "fDsrHold"
#define fRlsHold   "fRlsHold"
#define fXoffHold   "fXoffHold"
#define fXOffSent   "fXOffSent"
#define fEof   "fEof"
#define fTxim   "fTxim"
#define ceFrame   "ceFrame"
#define ceRxParity   "ceRxParity"
#define ceOverrun   "ceOverrun"
#define ceBreak   "ceBreak"
#define ceIO   "ceIO"
#define ceMode   "ceMode"
#define ceRxOver   "ceRxOver"
#define ceTxFull   "ceTxFull"
#define ssShift   "ssShift"
#define ssAlt   "ssAlt"
#define ssCtrl   "ssCtrl"
#define ssLeft   "ssLeft"
#define ssRight   "ssRight"
#define ssMiddle   "ssMiddle"
#define ssDouble   "ssDouble"
#define mbLeft   "mbLeft"
#define mbRight   "mbRight"
#define mbMiddle   "mbMiddle"
#define dsDragEnter   "dsDragEnter"
#define dsDragLeave   "dsDragLeave"
#define dsDragMove   "dsDragMove"
#define caNone   "caNone"
#define caHide   "caHide"
 ; #define caFree   "caFree"
#define caMinimize   "caMinimize"
#define fsSurface   "fsSurface"
#define fsBorder   "fsBorder"
#define psStarting   "psStarting"
#define psRunning   "psRunning"
#define psEnding   "psEnding"
#define okWrite   "okWrite"
#define okRead   "okRead"
#define dtrDisable   "dtrDisable"
#define dtrEnable   "dtrEnable"
#define dtrHandshake   "dtrHandshake"
#define rtsDisable   "rtsDisable"
#define rtsEnable   "rtsEnable"
#define rtsHandshake   "rtsHandshake"
#define rtsToggle   "rtsToggle"
#define fcHardware   "fcHardware"
#define fcSoftware   "fcSoftware"
#define fcNone   "fcNone"
#define fcCustom   "fcCustom"
#define prNone   "prNone"
#define prOdd   "prOdd"
#define prEven   "prEven"
#define prMark   "prMark"
#define prSpace   "prSpace"
#define brCustom   "brCustom"
#define br110   "br110"
#define br300   "br300"
#define br600   "br600"
#define br1200   "br1200"
#define br2400   "br2400"
#define br4800   "br4800"
#define br9600   "br9600"
#define br14400   "br14400"
#define br19200   "br19200"
#define br38400   "br38400"
#define br56000   "br56000"
#define br57600   "br57600"
#define br115200   "br115200"
#define br128000   "br128000"
#define br256000   "br256000"
#define dbFive   "dbFive"
#define dbSix   "dbSix"
#define dbSeven   "dbSeven"
#define dbEight   "dbEight"
#define smThreadSync   "smThreadSync"
#define smWindowSync   "smWindowSync"
#define smNone   "smNone"
#define evRxChar   "evRxChar"
#define evTxEmpty   "evTxEmpty"
#define evRxFlag   "evRxFlag"
#define evRing   "evRing"
#define evBreak   "evBreak"
#define evCTS   "evCTS"
#define evDSR   "evDSR"
#define evError   "evError"
#define evRLSD   "evRLSD"
#define evRx80Full   "evRx80Full"
#define dmManual   "dmManual"
#define dmAutomatic   "dmAutomatic"
#define dkDrag   "dkDrag"
#define dkDock   "dkDock"
#define akLeft   "akLeft"
#define akTop   "akTop"
#define akRight   "akRight"
#define akBottom   "akBottom"
#define alNone   "alNone"
#define alTop   "alTop"
#define alBottom   "alBottom"
#define alLeft   "alLeft"
#define alRight   "alRight"
#define alClient   "alClient"
#define doNoOrient   "doNoOrient"
#define doHorizontal   "doHorizontal"
#define doVertical   "doVertical"
#define beLeft   "beLeft"
#define beTop   "beTop"
#define beRight   "beRight"
#define beBottom   "beBottom"
#define bvNone   "bvNone"
#define bvLowered   "bvLowered"
#define bvRaised   "bvRaised"
#define bvSpace   "bvSpace"
#define bkNone   "bkNone"
#define bkTile   "bkTile"
#define bkSoft   "bkSoft"
#define bkFlat   "bkFlat"
#define ftUnknown   "ftUnknown"
#define ftString   "ftString"
#define ftSmallint   "ftSmallint"
#define ftInteger   "ftInteger"
#define ftWord   "ftWord"
#define ftBoolean   "ftBoolean"
#define ftFloat   "ftFloat"
#define ftCurrency   "ftCurrency"
#define ftBCD   "ftBCD"
#define ftDate   "ftDate"
#define ftTime   "ftTime"
#define ftDateTime   "ftDateTime"
#define ftBytes   "ftBytes"
#define ftVarBytes   "ftVarBytes"
#define ftAutoInc   "ftAutoInc"
#define ftBlob   "ftBlob"
#define ftMemo   "ftMemo"
#define tGraphic   "tGraphic"
#define ftFmtMemo   "ftFmtMemo"
#define ftParadoxOle   "ftParadoxOle"
#define ftDBaseOle   "ftDBaseOle"
#define ftTypedBinary   "ftTypedBinary"
#define ftCursor   "ftCursor"
#define ftFixedChar   "ftFixedChar"
#define ftWideString   "ftWideString"
#define ftLargeint   "ftLargeint"
#define ftADT   "ftADT"
#define ftArray   "ftArray"
#define ftReference   "ftReference"
#define ftDataSet   "ftDataSet"
#define csPopup   "csPopup"
#define csDialog   "csDialog"
#define gkCustom   "gkCustom"
#define gkDefault   "gkDefault"
#define gkDropDown   "gkDropDown"
#define gkEllipsis   "gkEllipsis"
#define epaRight   "epaRight"
#define epaLeft   "epaLeft"
#define Sun   "Sun"
#define Mon   "Mon"
#define Tue   "Tue"
#define Wed   "Wed"
#define Fri   "Fri"
#define Sat   "Sat"
#define dyDefault   "dyDefault"
#define dyFour   "dyFour"
#define dyTwo   "dyTwo"
#define fdAnsiOnly   "fdAnsiOnly"
#define fdTrueTypeOnly   "fdTrueTypeOnly"
#define fdEffects   "fdEffects"
#define fdFixedPitchOnly   "fdFixedPitchOnly"
#define fdForceFontExist   "fdForceFontExist"
#define fdNoFaceSel   "fdNoFaceSel"
#define fdNoOEMFonts   "fdNoOEMFonts"
#define fdNoSimulations   "fdNoSimulations"
#define fdNoSizeSel   "fdNoSizeSel"
#define dNoStyleSel   "dNoStyleSel"
#define fdNoVectorFonts   "fdNoVectorFonts"
#define fdShowHelp   "fdShowHelp"
#define fdWysiwyg   "fdWysiwyg"
#define fdLimitSize   "fdLimitSize"
#define fdScalableOnly   "fdScalableOnly"
#define fdApplyButton   "fdApplyButton"
#define cdFullOpen   "cdFullOpen"
#define cdPreventFullOpen   "cdPreventFullOpen"
#define cdShowHelp   "cdShowHelp"
#define cdSolidColor   "cdSolidColor"
#define cdAnyColor   "cdAnyColor"
#define bsNone   "bsNone"
#define bsSingle   "bsSingle"
#define bsSizeable   "bsSizeable"
#define bsDialog   "bsDialog"
#define bsToolWindow   "bsToolWindow"
#define bsSizeToolWin   "bsSizeToolWin"
#define fsEdit   "fsEdit"
#define fsComboBox   "fsComboBox"
#define ofReadOnly   "ofReadOnly"
#define ofOverwritePrompt   "ofOverwritePrompt"
#define ofHideReadOnly   "ofHideReadOnly"
#define ofNoChangeDir   "ofNoChangeDir"
#define ofShowHelp   "ofShowHelp"
#define ofNoValidate   "ofNoValidate"
#define ofAllowMultiSelect   "ofAllowMultiSelect"
#define ofExtensionDifferent   "ofExtensionDifferent"
#define fPathMustExist   "fPathMustExist"
#define ofFileMustExist   "ofFileMustExist"
#define ofCreatePrompt   "ofCreatePrompt"
#define ofShareAware   "ofShareAware"
#define ofNoReadOnlyReturn   "ofNoReadOnlyReturn"
#define ofNoTestFileCreate   "ofNoTestFileCreate"
#define ofNoNetworkButton   "ofNoNetworkButton"
#define ofNoLongNames   "ofNoLongNames"
#define ofOldStyleDialog   "ofOldStyleDialog"
#define ofNoDereferenceLinks   "ofNoDereferenceLinks"
#define ofEnableIncludeNotify   "ofEnableIncludeNotify"
#define ofEnableSizing   "ofEnableSizing"
#define fsBold   "fsBold"
#define fsItalic   "fsItalic"
#define fsUnderline   "fsUnderline"
#define fsStrikeOut   "fsStrikeOut"
#define fpDefault   "fpDefault"
#define fpVariable   "fpVariable"
#define fpFixed   "fpFixed"
#define fsNormal   "fsNormal"
#define fsMDIChild   "fsMDIChild"
#define fsMDIForm   "fsMDIForm"
#define fsStayOnTop   "fsStayOnTop"
#define poDesigned   "poDesigned"
#define poDefault   "poDefault"
#define poDefaultPosOnly   "poDefaultPosOnly"
#define poDefaultSizeOnly   "poDefaultSizeOnly"
#define poScreenCenter   "poScreenCenter"
#define poDesktopCenter   "poDesktopCenter"
#define poNone   "poNone"
#define poProportional   "poProportional"
#define poPrintToFit   "poPrintToFit"
#define wsNormal   "wsNormal"
#define wsMinimized   "wsMinimized"
#define wsMaximized   "wsMaximized"
#define biSystemMenu   "biSystemMenu"
#define biMinimize   "biMinimize"
#define biMaximize   "biMaximize"
#define biHelp   "biHelp"
#define tbHorizontal   "tbHorizontal"
#define tbVertical   "tbVertical"
#define dsNormal   "dsNormal"
#define dsTransparent   "dsTransparent"
#define itImage   "itImage"
#define itMask   "itMask"
#define tlTop   "tlTop"
#define tlCenter   "tlCenter"
#define tlBottom   "tlBottom"
#define lbStandard   "lbStandard"
#define lbOwnerDrawFixed   "lbOwnerDrawFixed"
#define lbOwnerDrawVariable   "lbOwnerDrawVariable"
#define iaTop   "iaTop"
#define iaLeft   "iaLeft"
#define sdLeft   "sdLeft"
#define sdRight   "sdRight"
#define sdAbove   "sdAbove"
#define sdBelow   "sdBelow"
#define sdAll   "sdAll"
#define htHandPoint   "htHandPoint"
#define htUnderlineCold   "htUnderlineCold"
#define htUnderlineHot   "htUnderlineHot"
#define drBounds   "drBounds"
#define drIcon   "drIcon"
#define drLabel   "drLabel"
#define drSelectBounds   "drSelectBounds"
#define ctText   "ctText"
#define ctImage   "ctImage"
#define ctState   "ctState"
#define arAlignBottom   "arAlignBottom"
#define arAlignLeft   "arAlignLeft"
#define arAlignRight   "arAlignRight"
#define arAlignTop   "arAlignTop"
#define arDefault   "arDefault"
#define arSnapToGrid   "arSnapToGrid"
#define mbNone   "mbNone"
#define mbBreak   "mbBreak"
#define mbBarBreak   "mbBarBreak"
#define paCenter   "paCenter"
#define aaManual   "aaManual"
#define aaGetFocus   "aaGetFocus"
#define aaDoubleClick   "aaDoubleClick"
#define smClip   "smClip"
#define smCenter   "smCenter"
#define smScale   "smScale"
#define smStretch   "smStretch"
#define smAutoSize   "smAutoSize"
#define osEmpty   "osEmpty"
#define osLoaded   "osLoaded"
#define osRunning   "osRunning"
#define osOpen   "osOpen"
#define osInPlaceActive   "osInPlaceActive"
#define osUIActive   "osUIActive"
#define pcCopies   "pcCopies"
#define pcOrientation   "pcOrientation"
#define pcCollation   "pcCollation"
#define poPortrait   "poPortrait"
#define poLandscape   "poLandscape"
#define nsNone   "nsNone"
#define nsBullet   "nsBullet"
#define caBold   "caBold"
#define caColor   "caColor"
#define caFace   "caFace"
#define caItalic   "caItalic"
#define caSize   "caSize"
#define caStrikeOut   "caStrikeOut"
#define caUnderline   "caUnderline"
#define caProtected   "caProtected"
#define ssRegular   "ssRegular"
#define ssFlat   "ssFlat"
#define ssHotTrack   "ssHotTrack"
#define dmBoth   "dmBoth"
#define dmGlyphOnly   "dmGlyphOnly"
#define dmTextOnly   "dmTextOnly"
#define blGlyphLeft   "blGlyphLeft"
#define blGlyphRight   "blGlyphRight"
#define blGlyphTop   "blGlyphTop"
#define blGlyphBottom   "blGlyphBottom"
#define rsNone   "rsNone"
#define rsLine   "rsLine"
#define rsUpdate   "rsUpdate"
#define rsPattern   "rsPattern"
#define sptNormal   "sptNormal"
#define sptCapsLock   "sptCapsLock"
#define sptNumLock   "sptNumLock"
#define sptScrollLock   "sptScrollLock"
#define sptDate   "sptDate"
#define sptTime   "sptTime"
#define sptDateTime   "sptDateTime"
#define sptEllipsisText   "sptEllipsisText"
#define sptEllipsisPath   "sptEllipsisPath"
#define sptGlyph   "sptGlyph"
#define sptGauge   "sptGauge"
#define sptOwnerDraw   "sptOwnerDraw"
#define tpTop   "tpTop"
#define tpBottom   "tpBottom"
#define tpLeft   "tpLeft"
#define tpRight   "tpRight"
#define tsTabs   "tsTabs"
#define tsButtons   "tsButtons"
#define tsFlatButtons   "tsFlatButtons"
#define blTop   "blTop"
#define blBottom   "blBottom"
#define blLeft   "blLeft"
#define blRight   "blRight"
#define dpTop   "dpTop"
#define dpBottom   "dpBottom"
#define dpLeft   "dpLeft"
#define dpRight   "dpRight"
#define dmCanFloat   "dmCanFloat"
#define dmCannotFloat   "dmCannotFloat"
#define dmCannotFloatOrChangeDocks   "dmCannotFloatOrChangeDocks"
#define dhDouble   "dhDouble"
#define dhNone   "dhNone"
#define dhSingle   "dhSingle"
#define stNone   "stNone"
#define stData   "stData"
#define stText   "stText"
#define stBoth   "stBoth"
#define naAdd   "naAdd"
#define naAddFirst   "naAddFirst"
#define naAddChild   "naAddChild"
#define naAddChildFirst   "naAddChildFirst"
#define naInsert   "naInsert"
#define sbOneStopBit   "sbOneStopBit"
#define sbOne5StopBits   "sbOne5StopBits"
#define sbTwoStopBits   "sbTwoStopBits"
#define SMWOREF(%s)   ##class(%TMPersistent).GetObjOref(+%s)
 
#define STARTBINDING  ##continue
 n SMWCStr,SMWCLParentAddress,SMWCIndex  ##continue
 s SMWCStr="",SMWCIndex=1 ##continue
 s SMWCLParentAddress=$s(initvalue="":0,1:$lg(initvalue,2,0))
 
#define CREATECONTROL(%classname,%controlname,%parentname,%parentaddress,%createcontrol)   ##continue
#if %createcontrol=1    ##continue
 s %controlname=##class(%classname).%New("") ##continue
#endif ##continue
 s:($l($g(SMWCStr(SMWCIndex)))>=32000) SMWCIndex=$I(SMWCIndex) ##continue
 s SMWCStr(SMWCIndex)=$g(SMWCStr(SMWCIndex))_##class(%TMPersistent).CreateControl(%controlname,%parentname,%parentaddress)
 
#define FINISHBINDING  ##continue
 n i,k,SMWCCommand,SMWCClearList,SMWCControl    ##continue
 f k=1:1:SMWCIndex d    ##continue
 . s SMWCClearList=(k=1) ##continue
 . s SMWCCommand=$$CallBack^%ZMRASD($lb("cac",SMWCClearList,SMWCStr(k)))  ##continue
 . f i=1:3:$ll(SMWCCommand) d  ##continue
 . . s SMWCControl=##class(%TMPersistent).GetObjOref($lg(SMWCCommand,i))  ##continue
 . . d SMWCControl.Bind($lg(SMWCCommand,i+1,0),$lg(SMWCCommand,i+2,0))
 
]]></Routine>


<Routine name="%ZGLEXIM" type="MAC" languagemode="0"><![CDATA[
 ; Export/Import/List globals in file or ^BLOB without dialog
#define Marker  77777
 
#define N5(%n)  $E(100000+%n,2,6)
#define WBLK(%s,%size) w $$$N5($L(%s)),%s s %size=$G(%size,0)+5+$L(%s)
#define RBLK(%s,%size) s %s="" r %size#5 ztrap:$TR(%size,"0123456789")'="" "FRMT" r:(%size>0)&(%size<32768) %s#%size
 
#define BLOBBlockSize   2048
 ;
Export(FileName,StartNode,OverAppend) 
 ; Stores global beginning from StartNode in file FileName
 ; If optional parameter OverAppend=1, existing file may be overwritten
 ;       if OverAppend=2, existing file will be appended
 ; Returns number of written bytes
 n ix,sz,fn,sn,oio,lsn,fmode,oa
 s (ix,sn)=$G(StartNode),lsn=$L(sn),fn=$G(FileName),oio=$IO,sz=0
 i fn=""!('$D(@ix))!'lsn q:$Q sz q
 s fmode="WNU",oa=$G(OverAppend)
 o fn:("RU"):0 i  s fmode=$S(oa=2:"WAU",oa=1:"WNU",1:"") c fn
 i fmode="" q:$Q sz q
 o fn:(fmode):0 e  q:$Q sz q
 u fn $$$WBLK(sn,sz)
 i $D(@ix)#10 $$$WBLK("",sz) $$$WBLK($G(@ix),sz)
 i $E(sn,lsn)=")" s $E(sn,lsn)=","
 e  s sn=sn_"(",lsn=lsn+1
 f  s ix=$Q(@ix) q:$E(ix,1,lsn)'=sn  $$$WBLK($E(ix,lsn+1,$L(ix)-1),sz) $$$WBLK($G(@ix),sz)
 w $$$Marker s sz=sz+5
 u oio c fn
 q:$Q sz q
 ;
List(FileName) 
 ; Returns list of nodes stored in file
 n res,ix,sz,fn,oio,ferr
 s fn=$G(FileName),oio=$IO,res="",ferr=0
 i fn="" q:$Q res q
 o fn:("RU"):0 e  q:$Q res q
 u fn:0
 f  d  q:ferr
 . s $ZT="ListErr"
 . $$$RBLK(ix,sz) s res=res_$LB(ix)
 . f  $$$RBLK(ix,sz) q:sz=$$$Marker
 u oio c fn
 q res
ListErr s $ZT="",ferr=1 q
 ;
Import(FileName,StartNode,NewNode,BackUpNode) 
 ; Restores global from file
 ; If StartNode is not defined, all globals will be restored
 ;       at the original place
 ; If NewNode defined, global will be restored at the NewNode
 ;       instead of stored StartNode
 ; Previous contents of overwritten global, if present,
 ;       will be moved to BackUpNode (optional)
 ; Returns number of restored nodes
 n ix,sz,fn,sn,oio,cnt,nn,bn
 s fn=$G(FileName),oio=$IO,cnt=0,bn=$G(BackUpNode)
 s sn=$G(StartNode)
 i fn="" q:$Q cnt q
 o fn:("RU"):0 e  q:$Q cnt q
 u fn:0
 i sn'="" s nn=$$SrchXtnt(sn) s:nn'="" cnt=$$RestXtnt($G(NewNode,sn),bn)
 e  f  s ix=$$RestXtnt(,bn),cnt=cnt+ix q:'ix
 u oio c fn
 q:$Q cnt q
 ;
SrchXtnt(sn) 
 ; Searches extent with stored node sn
 ; Returns stored node name or "" if not found
 ; (for internal use from $$Import())
 n ix,sz,fnd
 s fnd=0,ix="" f  d  q:fnd
 . s $ZT="SXtnErr"
 . $$$RBLK(ix,sz) i ix=sn s fnd=1 q
 . f  $$$RBLK(ix,sz) q:sz=$$$Marker
 q ix
SXtnErr s $ZT="",fnd=-1 q
 ;
RestXtnt(nn,bn) 
 ; Restores current extent to node nn
 ; (for internal use from $$Import())
 n ix,sz,cnt,lnn,hrp,nns
 s $ZT="RXtnErr",cnt=0
 i $G(nn)="" $$$RBLK(nn,sz)
 i $D(@nn) k:$G(bn)'="" @bn@(nn) m:$G(bn)'="" @bn@(nn)=@nn k @nn
 s lnn=$L(nn),hrp=($E(nn,lnn)=")")
 s:hrp nns=$E(nn,1,lnn-1)
 f  $$$RBLK(ix,sz) q:sz=$$$Marker  s ix=$S(ix="":nn,hrp:nns_","_ix_")",1:nn_"("_ix_")"),cnt=cnt+1 $$$RBLK(@ix,sz)
 q cnt
RXtnErr s $ZT=""
 i ($G(nn)'="")&($G(bn)'="") i $D(@bn@(nn)) k @nn m:bn'="" @nn=@bn@(nn) k:bn'="" @bn@(nn)
 q 0
 ;
ExportToBLOB(index,StartNode) 
 ; Stores (appends) global beginning from StartNode in BLOB with index
 ; Returns number of written bytes
 n ix,sz,fn,sn,osz,lsn
 s (ix,sn)=$G(StartNode),lsn=$L(sn),fn=$G(index,0),sz=0
 i fn'>0!('$D(@ix))!'lsn q:$Q sz q
 s osz=+$P($G(^BLOB(index)),"~",3),sz=$$BLOBPut(fn,sn)
 i $D(@ix)#10 s sz=$$BLOBPut(fn,""),sz=$$BLOBPut(fn,$G(@ix))
 i $E(sn,lsn)=")" s $E(sn,lsn)=","
 e  s sn=sn_"(",lsn=lsn+1
 f  s ix=$Q(@ix) q:$E(ix,1,lsn)'=sn  s sz=$$BLOBPut(fn,$E(ix,lsn+1,$L(ix)-1)),sz=$$BLOBPut(fn,$G(@ix))
 s sz=$$BLOBPut(fn,,1)
 q:$Q sz-osz q
 ;
ListBLOB(index) 
 ; Returns list of nodes stored in file
 n res,ix,sz,fn,ferr,pos
 s fn=$G(index,0),(res,pos)="",ferr=0
 i fn'>0 q:$Q res q
 f  d  q:sz<0
 . s sz=$$BLOBGet(fn,.ix,.pos) q:sz<0  s res=res_$LB(ix)
 . f  s sz=$$BLOBGet(fn,.ix,.pos) q:(sz=$$$Marker)!(sz<0)
 q res
 ;
ImportFromBLOB(index,StartNode,NewNode,BackUpNode) 
 ; Restores global from file
 ; If StartNode is not defined, all globals will be restored
 ;       at the original place
 ; If NewNode defined, global will be restored at the NewNode
 ;       instead of stored StartNode
 ; Previous contents of overwritten global, if present,
 ;       will be moved to BackUpNode (optional)
 ; Returns number of restored nodes
 n ix,sz,fn,sn,cnt,nn,bn,pos
 s fn=$G(index),cnt=0,sn=$G(StartNode),bn=$G(BackUpNode)
 i fn'>0 q:$Q cnt q
 i sn'="" s pos=$$SrchBLOBXtnt(fn,sn) s:pos'="" cnt=$$RestBLOBXtnt(fn,.pos,$G(NewNode,sn),bn)
 e  f  s ix=$$RestBLOBXtnt(fn,.pos,,bn),cnt=cnt+ix q:'ix
 q:$Q cnt q
 ;
SrchBLOBXtnt(index,sn) 
 ; Searches extent with stored node sn
 ; Returns position of stored node ($LB(blknum,offset))
 ; or "" if node not found
 ; (for internal use from $$ImportFromBLOB())
 n ix,sz,fnd,pos
 s fnd=0,(ix,pos)="" f  d  q:fnd!(sz<0)
 . s sz=$$BLOBGet(index,.ix,.pos) q:sz<0  i ix=sn s fnd=1 q
 . f  s sz=$$BLOBGet(index,.ix,.pos) q:(sz=$$$Marker)!(sz<0)
 q $S(sz<0:"",1:pos)
 ;
RestBLOBXtnt(index,pos,nn,bn) 
 ; Restores current extent to node nn
 ; (for internal use from $$ImportFromBLOB())
 n ix,sz,cnt,lnn,hrp,nns,tmp
 s cnt=0
 i $G(nn)="" s sz=$$BLOBGet(index,.nn,.pos) q:sz<0 0
 i $D(@nn) k:$G(bn)'="" @bn@(nn) m:$G(bn)'="" @bn@(nn)=@nn k @nn
 s lnn=$L(nn),hrp=($E(nn,lnn)=")")
 s:hrp nns=$E(nn,1,lnn-1)
 f  s sz=$$BLOBGet(index,.ix,.pos) q:(sz=$$$Marker)!(sz<0)  s ix=$S(ix="":nn,hrp:nns_","_ix_")",1:nn_"("_ix_")"),cnt=cnt+1,sz=$$BLOBGet(index,.tmp,.pos) s:sz'<0 @ix=tmp
 q cnt
 ;
BLOBPut(index,string,marker) 
 ; Appends string to BLOB as to file with undefined block length
 ; if $G(marker)>0 puts marker instead of string
 ; Returns total size of BLOB with index
 n ls,sz,blobdef,blknum,free,bp,ep,fullsz,lastsz
 s ls=$L($G(string)),sz=$$$N5(ls)
 s blobdef=^BLOB(index),blknum=$P(blobdef,"~",2),fullsz=$P(blobdef,"~",3)
 s:'blknum blknum=1
 s:$G(marker)>0 sz=$$$Marker,ls=0
 ; Put $L(string)
 s bp=1 f  d  q:bp>5
 . s lastsz=$L($G(^BLOB(index,blknum))),free=$$$BLOBBlockSize-lastsz
 . s:free'>0 blknum=blknum+1,free=$$$BLOBBlockSize
 . s ep=bp+free-1 s:ep>5 ep=5
 . s ^BLOB(index,blknum)=$G(^BLOB(index,blknum))_$E(sz,bp,ep),bp=ep+1
 ; Put the string itself
 i sz'=$$$Marker s bp=1 f  d  q:bp>ls
 . s lastsz=$L($G(^BLOB(index,blknum))),free=$$$BLOBBlockSize-lastsz
 . s:free'>0 blknum=blknum+1,free=$$$BLOBBlockSize
 . s ep=bp+free-1 s:ep>ls ep=ls
 . s ^BLOB(index,blknum)=$G(^BLOB(index,blknum))_$E(string,bp,ep),bp=ep+1
 s fullsz=fullsz+ls+5
 s $P(blobdef,"~",2)=blknum,$P(blobdef,"~",3)=fullsz
 s ^BLOB(index)=blobdef
 q:$Q fullsz q
 ;
BLOBGet(index,string,position) 
 ; Reads string (passed by reference) from current position
 ; ($LB(blknum,offset)) (passed by reference). To read from
 ; beginning, position must be empty, undefined or $LB(1,1)
 ; Returns size of read string or
 ; -1 on end of BLOB or
 ; 77777 on marker read
 n pos,sz,res,blknum,blksz,bp,ep,left,eoblob
 s pos=$G(position,$LB(1,1)),blknum=$LG(pos,1,1),bp=$LG(pos,2,1)
 s (sz,res)="",eoblob=0 f  d  q:($L(sz)'<5)!eoblob
 . s blksz=$L($G(^BLOB(index,blknum))),left=blksz-bp+1
 . s:left'>0 bp=1,(blksz,left)=$L($G(^BLOB(index,$I(blknum))))
 . i blksz'>0 s eoblob=1 q
 . s ep=bp+5-$L(sz)-1 s:ep>blksz ep=blksz
 . s sz=sz_$E(^BLOB(index,blknum),bp,ep),bp=ep+1
 ztrap:$TR(sz,"0123456789")'="" "FRMT"
 s sz=+sz
 i sz'=$$$Marker f  q:($L(res)'<sz)!eoblob  d
 . s blksz=$L($G(^BLOB(index,blknum))),left=blksz-bp+1
 . s:left'>0 bp=1,(blksz,left)=$L($G(^BLOB(index,$I(blknum))))
 . i blksz'>0 s eoblob=1 q
 . s ep=bp+sz-$L(res)-1 s:ep>blksz ep=blksz
 . s res=res_$E(^BLOB(index,blknum),bp,ep),bp=ep+1
 s string=res,position=$LB(blknum,bp)
 q $S(eoblob:-1,1:sz)
 ;
]]></Routine>


<Routine name="%ZMRASD" type="MAC" languagemode="0"><![CDATA[
 ; ZMRPMD application server
#include ZMRDEF
 
Daemon(p,ijc,key,UserLN,SESID) 
 n OpenTO,LstTO,N,ix,SU,UserPW
 s $ZT="tBreak",$$$InsRut=$ZCVT("ZMRINS"_$I($$$PORTS(0))_$ZU(110),"U")
 s $$$InsRut=$E($TR($$$InsRut,$TR($$$InsRut,"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")),1,31)
 ; name of routine for code insertion and execution
 s $$$SBS=$G($$$Ini($$$ieAppSndBufSz),$$$dfAppSndBufSz)
 s $$$RBS=$G($$$Ini($$$ieAppRcvBufSz),$$$dfAppSndBufSz)
 s OpenTO=$G($$$Ini($$$ieAppOpenTO),$$$dfAppOpenTO)
 s LstTO=$G($$$Ini($$$ieAppLstTO),$$$dfAppLstTO)
 s N=3,N(1)=p d ^$$$EVENT(.N)
 s $$$RTO=$G($$$Ini($$$ieAppReadTO),$$$dfAppReadTO)
 s $$$TIO=$S(p>1:"|TCP|"_p,1:0),$$$KEY=key
 s $$$ITO=$G($$$Ini($$$ieAppIdleTO),$$$dfAppIdleTO)*60
 s UserPW=$LG(UserLN,2),UserLN=$LG(UserLN),$$$USERLN=UserLN
 s SU=")WPrasU,N3rasU(nv083Qytvruca1Q7ET121R=xv s",ix=1
 x:$G($$$Ini($$$ieNativeAuth),$$$dfNativeAuth)&$$$IsCache5 $re($tr(SU,"va127R380Q","ieSYM$Log."))
 k SU,UserPW i 'ix s p=0
 ; Open TCP port, wait for connection and read logon command
 ; "lg:"_key_$C(0)
 i $$$TIO'=0 d
 . o $$$TIO::OpenTO e  ztrap
 . s ijc=ijc+1 o ijc::OpenTO i  u ijc w p_" opened" c ijc ; Inform PMD
 k N,p,key,ijc ; these variables will not be used anywhere
 u $$$TIO:(::"AS":$$$cTRM:$$$SBS:$$$RBS)
 i 'ix w $$$errNOJOB_$$$cTRM,! ztrap
 i $$$TIO=0 w $$$msgOK_":"_$$$KEY_$$$cTRM,!
 s ix=0 f  d  q:ix
 . s $ZT="logerr"
 . i $$$TIO'=0 r:LstTO $$$RD:LstTO r:'LstTO $$$RD e  g tBreak
 . r $$$RD:$$$RTO
 . i $$$RD=($$$cmdLOGON_":"_$$$KEY) s ix=1 q
logerr . s $ZT="" w $$$errINVALTYPE_$$$cTRM,! w:$$$TIO'=0 *-2
 k LstTO,OpenTO,ix
 i SESID="" d
 . ; New session
 . s $ZT="mQuit",($$$SES,SESID)=$$Ses^$$$SMGR() ; SESID may be used by client
 . ; tell session id to client and start to get commands
 . w $$$msgOK_":"_$$$SES_$$$cTRM,!
 . d IOStore^$$$SMGR($$$SES)
 . s $$$AS($$$SES,"InsRut")=$$$InsRut
 e  d
 . ; Saved session
 . s $ZT="mExit",$$$SES=$$Restore^$$$SMGR(SESID)
 . i $$$SES="" w $$$errNOSESSION,$$$cTRM,! ztrap
 . w $$$msgOK_":"_$$$SES_$$$cTRM,!
 . d IOStore^$$$SMGR($$$SES)
 . s $$$AS($$$SES,"InsRut")=$$$InsRut
 s $$$CRT=$$$TM,$$$C=""
   ; Параметры авторизации
   s I=$ZU(111,0), ip=$p($A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)_"_"_($A(I,5)*256+$A(I,6)),":",1)
   if $d(^%ZSysUser(ip)) s %sysuser=^%ZSysUser(ip)  k ^%ZSysUser(ip)
      s ^||ipKey($job)="SMWrap@"_$p(ip,":",1)
      if ##class(%CSP.Session).%ExistsId(^||ipKey($job))=1   s %session=##class(%CSP.Session).%OpenId(^||ipKey($job))
      else                                                   s %session=##class(%CSP.Session).%New(^||ipKey($job))
      s %session.ProcessId=$job
      S %session.AppTimeout =24*3600
      ; d %session.Login("_SYSTEM")
      S %session.Namespace=$ZU(5)
      d %session.%Save()
      s $LI(^%cspSession(^||ipKey($job)),15)="SMWrap:"_$job ;  РџСЂРёР»РѕР¶РµРЅРёРµ 
      s $LI(^%cspSession(^||ipKey($job)),18)=$job        ;  ID РїСЂРѕС†РµСЃСЃР°
      d %session.%Save()
      k ^||ipKey($job)
   ; ---------------------  
   ; Параметры авторизации
     if $d(^%ZMRSysUser(ip))
     {
        s %sysuser=^%ZMRSysUser(ip)
        k ^%ZMRSysUser(ip)
     }
   ; ---------------------       
 f  d ReadCmd q:$$$C=$$$cmdQUIT  d:$D($$$MSGS($$$SES)) GetMsgs
   ; ---------------------  
      s I=$ZU(111,0), ip=$p($A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)_"_"_($A(I,5)*256+$A(I,6)),":",1)   s ^||ipKey($job)="SMWrap@"_$p(ip,":",1)
      k ^%cspSession(^||ipKey($job)),^||ipKey($job)
   ; ---------------------  
mQuit s $ZT="tBreak"
DelSes s $$$InsRut=$$$AS($$$SES,"InsRut")
 d Del^$$$SMGR($$$SES)
mExit k ^ROUTINE($$$InsRut),^rOBJ($$$InsRut),^rINDEX($$$InsRut)
tBreak s $ZT="" c $IO d ^$$$EVENT(4) ; Leave TCP port and halt
 ;
tBase s $ZT="" k $$$RTO,$$$ITO,$$$C,$$$RD,$$$P,$$$ERR
StorSes k $$$InsRut,$$$TIO
 d Store^$$$SMGR($$$SES)
 s $$$InsRut=$$$AS($$$SES,"InsRut")
 g mExit
 ;
ReadCmd s $ZT="tBase"
 ; read command and length of parameters list
 ; cmd_":"_$L(paramlist)_$C(0)
 u $$$TIO r $$$RD:$$$RTO ztrap:$$$TM>($$$CRT+$$$ITO)
 q:$$$RD=""
 s $$$C=$P($$$RD,":"),$$$RL=$P($$$RD,":",2),$$$P=""
 ; read parameters list ($LB(param1,...,paramN)_$C(0)
 f  s $$$RLP=$$$RL-$L($$$P) q:$$$RLP'>0  r $$$RD#$$$RLP:$$$RTO s $$$RD=$$$RD_$S($A($K)>127:$K,1:$$$cTRM),$$$P=$$$P_$E($$$RD,1,$$$RLP)
ExecCmd s $ZT="tSftFn",$$$ERR=$$$msgOK_":"
  s tmpRep=$$ReplaceCmd($$$C,$$$P)
  s $$$C=$lg(tmpRep,1)
  s $$$P=$lg(tmpRep,2)
  ; ---------------------    
 i $$$C=$$$cmdSTORE d CmdStore
 e  i $$$C=$$$cmdFLOW d ClBrk^$$$SMGR($$$SES) s @($$$SR_$LG($$$P)) d WO($$$RES)
 e  i $$$C=$$$cmdVALCONN w $$$msgVALCONN,$$$cTRM,!
 e  i $$$C=$$$cmdREAD s @($$$SR_$LG($$$P)) d WO($$$RES)
 e  i $$$C=$$$cmdEXEC x $LG($$$P) i 1
 e  i $$$C=$$$cmdRUN      u $$$TIO    x $$$P   u $$$TIO  w $$$cTRM,!   q  
 e  i $$$C=$$$cmdTERM u $$$TIO:(::"ACS":$$$cTRM:$$$SBS:$$$RBS) x $LG($$$P) u $$$TIO:(::"AS":$$$cTRM:$$$SBS:$$$RBS) w $$$cTRM i 1
 e  i $$$C=$$$cmdWRITE s @($LG($$$P)_$$$SW)
 e  i $$$C=$$$cmdKILL k @$LG($$$P)
 e  i $$$C=$$$cmdCODE d:$LL($$$P)>1 CallProc($LG($$$P),$LG($$$P,2)) d:$LL($$$P)'>1 CallProc($LG($$$P)) i 1
 e  i $$$C=$$$cmdFUN d:$LL($$$P)>2 CallFunc($LG($$$P),$LG($$$P,2),$LG($$$P,3)) d:$LL($$$P)'>2 CallFunc($LG($$$P),$LG($$$P,2)) i 1
 e  i $$$C=$$$cmdSETIP d SetClientIP^$$$SMGR($LG($$$P))
 e  i $$$C'=$$$cmdQUIT s $$$ERR=$$$errBADCMD
 ; send "OK" or error message
 d WrCmdRes
 q
 ;
WrCmdRes s $ZT="tBase",$$$CRT=$$$TM
 u $$$TIO w $$$ERR,$$$cTRM,!
 q
 ;
tSftFn s $ZT="tBase",$$$ERR=$ZERROR
 ; s $$$DBINF("CMD")=$$$C,$$$DBINF("PARAM")=$$$P ; uncomment to debug
 s:$$$C=$$$cmdTERM $$$ERR=$$$ERR_$$$cTRM_$$$msgOK_":"
 d ClBrk^$$$SMGR($$$SES) d WrCmdRes
 q
 ;
CmdStore s $ZT="tBreak"
 k ^ROUTINE($$$AS($$$SES,"InsRut")),^rOBJ($$$AS($$$SES,"InsRut")),^rINDEX($$$AS($$$SES,"InsRut"))
 k $$$RTO,$$$ITO,$$$C,$$$RD,$$$P,$$$ERR,$$$InsRut,$$$TIO
 d Store^$$$SMGR($$$SES)
 w $$$msgOK_":"_$$$SES_$$$cTRM,!
 g tBreak ; close TCP and halt
 ;
WriteLn(Val) 
 q $S($$IsBrk($$$SES):-1,1:$$WO(Val))
 ;
WO(Val) s $ZT="tWO"
 s Val=$$OtvetClientu(Val)
 w:$D(Val) $$$msgGOON_":"_$L(Val)_$$$cTRM_Val,!
 q:$Q 0 q
 ;
tWO s $$$ERR=$ZERROR q:$Q -1 q
 ;
IsBrk(ses) 
 q:$G(ses)="" 0 q $D($$$AS(ses,-3))
 ;
 ; BLOB support
 ; format for ^BLOB:
 ; ^BLOB=curindex
 ; ^BLOB(index)=kind~nblocks~blobsize
 ; ^BLOB(index,nblock)=block
 ; ^BLOB(kind,index)=""
CreateBLOB(kind) 
 ; create new blob with this kind and nblocks=blobsize=0
 ; return blob index
 n index
 s index=$I(^BLOB)
 s ^BLOB(index)=kind_"~0~0"
 s ^BLOB(kind,index)=""
 q index
 ;
DeleteBLOB(index) 
 ; delete all inverted indices
 ; delete all value indices
 n kind
 s kind=$P($G(^BLOB(index)),"~",1)
 k:kind'="" ^BLOB(kind,index)
 k ^BLOB(index)
 q
 ;
ClearBLOB(index,compression) 
 ; delete ^BLOB(index,allblocks)
 ; set nblocks=blobsize=0
 n kind
 s kind=$P($G(^BLOB(index)),"~",1)
 k ^BLOB(index)
 s:kind'="" ^BLOB(index)=kind_"~0~0"_$s($d(compression):"~"_compression,1:"")
 q
 ;
ReadBLOBCompression(index) 
 n ret s ret=$P($G(^BLOB(index)),"~",4) q:ret'="" ret
 q 1
 ;
AddBLOBBlock(index,block) 
 ; increment blockcount by 1 and blobsize by blocklength
 ; add to this blob new block
 n blobdef
 s blobdef=^BLOB(index)
 s $P(blobdef,"~",2)=1+$P(blobdef,"~",2)
 s $P(blobdef,"~",3)=$P(blobdef,"~",3)+$L(block)
 s ^BLOB(index,$P(blobdef,"~",2))=block
 s ^BLOB(index)=blobdef
 q
 ;
CallBack($$$CBARGCOMMAND,$$$CBARGNOWAIT) 
 ; Sends command to client:
 ; "<CALLBACK>"_cbid:$L(command)_$C(0)_command
 ; waits for result (optional):
 ; "<CALLBACK>"_cbid:$L(result)_$C(0)_result
 ; Never use this function in inserted code
 n $$$CBST s $ZT="tSftFn",$$$CBST=$ST
 s $$$CBOIO=$IO u:$$$CBOIO'=$$$TIO $$$TIO
 ; Send command to client
 s $$$CBID=$I($$$AS($$$SES,"CB")),$$$CBNW=+$G($$$CBARGNOWAIT,$G($$$CBNOWAIT))
 s:$$$CBNW $$$CBID=-$$$CBID
 w:$D($$$CBARGCOMMAND) $$$msgCALLBACK_$$$CBID_":"_$L($$$CBARGCOMMAND)_$$$cTRM_$$$CBARGCOMMAND
 i $$$CBNW u:$$$CBOIO'=$$$TIO $$$CBOIO k $$$CBID q ""
 ; Flush TCP buffer and wait for reply or ASD command
 w ! f  r $$$RD:$$$RTO d  q:'$$$CBID  d:$D($$$MSGS($$$SES)) GetMsgs
 . q:$$$RD=""
 . s $$$C=$P($$$RD,":"),$$$RL=$P($$$RD,":",2),$$$P=""
 . f  s $$$RLP=$$$RL-$L($$$P) q:$$$RLP'>0  r $$$RD#$$$RLP:$$$RTO s $$$RD=$$$RD_$S($A($K)>127:$K,1:$$$cTRM),$$$P=$$$P_$E($$$RD,1,$$$RLP)
 . s $$$CBRID=$F($$$C,$$$msgCALLBACK) i '$$$CBRID d ExecCmd q
 . s:$E($$$C,$$$CBRID,$L($$$C))=$$$CBID $$$CBID=0
 u:$$$CBOIO'=$$$TIO $$$CBOIO k $$$CBID
 q $$$P
 ;
SetCBNoWait(nowait) 
 ; Set/unset permanent nowait flag for $$CallBack()
 ; Second arg of $$CallBack(), if defined, overrides this flag
 i +$G(nowait) s $$$CBNOWAIT=1
 e  k $$$CBNOWAIT
 q
 ;
SubsMsgs(type,subs,sngl,proc,oref) 
 ; Subscribe handler on the given type of interprocess messages
 ; If $G(sngl)>0 - only one message of given type may be queued
 ; If proc="" or omitted - unsubscribe from given type of messages
 ; If subs=0 or omitted - unsubscribe this handler
 ; If type="" or omitted - unsubscribe from all messages
 ; If $G(sngl)>0 - only one message of given type may be queued
 ; When receiving message, d [oref.]proc(type,param) will be executed
 n c,pr,or
 s or=$G(oref,0),pr=$G(proc)
 s c=$LB(or,pr)
 i $G(type)="" k $$$MSGS($$$SES)
 e  i '$G(subs,0) k $$$MSGS($$$SES,type,c),@$$$ONMSGCODE@(type,c)
 e  s $$$MSGS($$$SES,type)=$S($G(sngl)>0:-1,1:1),@$$$ONMSGCODE@(type,c)=""
 q
 ;
SendMsg(type,param) 
 ; Send interprocess messages to all subscribers
 n ix,c,msid
 s (ix,c)=0
 f  s msid=$I($$$MSGS) l +$$$MSGS(msid):0 q:$T
 s $ZT="msgULck"
 f  s ix=$O($$$AS(ix)) q:ix=""  s:$D($$$MSGS(ix,type))&(ix'=$G($$$SES)) $$$MSGS(ix,type,msid)=$G(param),c=c+1
msgULck l -$$$MSGS(msid) ; lock will be actually removed after end of transaction
 q:$Q c q
 ;
GetMsgs ; Handle received interprocess messages
 q:'$D($$$MSGS($$$SES))
 n $$$MSGTYPE,$$$MSGID,$$$MSGPARAM,$$$MSGDIR,$$$MSGHANDLER,$$$MSGOREF,$$$MSGPROC,$$$MSGNOEXEC
 s $$$MSGTYPE=""
 f  s $$$MSGTYPE=$O($$$MSGS($$$SES,$$$MSGTYPE)) q:$$$MSGTYPE=""  d
 . s $$$MSGDIR=$$$MSGS($$$SES,$$$MSGTYPE),$$$MSGNOEXEC=0,$$$MSGID=""
 . f  s $$$MSGID=$O($$$MSGS($$$SES,$$$MSGTYPE,$$$MSGID),$$$MSGDIR) q:$$$MSGID=""  d
 . . l +$$$MSGS($$$MSGID):0 e  q
 . . l -$$$MSGS($$$MSGID)
 . . ; we do not set lock, we just test the presence of lock,
 . . ; which may mean that transaction not commited yet
 . . s $$$MSGPARAM=$$$MSGS($$$SES,$$$MSGTYPE,$$$MSGID) k $$$MSGS($$$SES,$$$MSGTYPE,$$$MSGID)
 . . q:$$$MSGNOEXEC  ; handle only last message if sngl>0
 . . s:$$$MSGDIR<0 $$$MSGNOEXEC=1
 . . s $$$MSGHANDLER=""
 . . f  s $$$MSGHANDLER=$O(@$$$ONMSGCODE@($$$MSGTYPE,$$$MSGHANDLER)) q:$$$MSGHANDLER=""  d
 . . . s $ZT="errHand",$$$MSGOREF=$LG($$$MSGHANDLER),$$$MSGPROC=$LG($$$MSGHANDLER,2)
 . . . i $$$MSGOREF>0 x:$$$IsCache5 "s "_$NA($$$MSGOREF)_"=$ZOBJREF("_$NA($$$MSGOREF)_")"
 . . . x "d "_$S($$$MSGOREF>0:$NA($$$MSGOREF)_".",1:"")_$$$MSGPROC_"("_$NA($$$MSGTYPE)_","_$NA($$$MSGPARAM)_")"
errHand . . . s $ZT=""
 q
 ;
OnMsgCallBack(type,param) 
 n cbid,cmd,oio
 s oio=$IO u:oio'=$$$TIO $$$TIO
 s cbid=-$I($$$AS($$$SES,"CB")),cmd=$LB($G(type),$G(param))
 w $$$msgONMSGCBACK_cbid_":"_$L(cmd)_$$$cTRM_cmd,!
 u:oio'=$$$TIO oio
 q
 ;
RunQuery(ClassName,QueryName,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16) 
 n i,j,rset,res,next,cols,pars
 x "s rset=##class(%ResultSet).%New()" q:rset="" 0
 x "s rset.ClassName=ClassName,rset.QueryName=QueryName"
 s pars=""
 f i=16:-1:1 s j="p"_i,pars=$S(($D(@j)!(pars'=""))&(i>1):",",1:"")_$S($D(@j):j,1:"")_pars
 x "s res=rset.Execute("_pars_")" i 'res x "s res=rset.%Close()" q 0
 x "s cols=rset.GetColumnCount()"
 f  x "s res="""",next=rset.Next()" q:'next  d
 . f j=1:1:cols x "s res=res_$S(res'="""":""~"",1:"""")_rset.GetData(j)"
 . s res=$$WriteLn(res)
 x "d rset.%Close()"
 q 1
 ;
CallFunc(MCodeSrc,pFuncName,pFuncParam) 
 n str,ix
 s $ZT="FuncErr"
 q:$G(pFuncName)="" "<ERROR NO FUNC NAME>"
 d:$G(MCodeSrc)'="" @("InsertCode^"_$$$INSCODE_"("_MCodeSrc_")")
 s str="$$"_pFuncName_$S(pFuncName["^":"",1:"^"_$$$InsRut)_"("_$S($D(pFuncParam):$NA(pFuncParam),1:"")_")"
 s @("ix="_str)
 q:$Q ix q
FuncErr s $ZT="" q "<ERROR IN CALLFUNC: "_$ZERROR_">"
 ;
CallProc(MCodeSrc,procName) 
 n str
 s $ZT="ProcErr",procName=$G(procName,"mXoP1a2b")
 d:$G(MCodeSrc)'="" @("InsertCode^"_$$$INSCODE_"("_MCodeSrc_")")
 d @(procName_$S(procName["^":"",1:"^"_$$$InsRut))
 q:$Q "" q
ProcErr s $ZT="" q:$Q "<ERROR IN CALLPROC: "_$ZERROR_">" q
 ;
 ; функция перехватывает чтения входящих команд от клиента
ReplaceCmd(cmd,var)
  s resReplaceCmd=$$CommdFromClienToServer^%ZMRProgramCosta(cmd,var) 
  ; s var=$replace(var,"%this","##this") 
  ; q $lb(cmd,var)
  q resReplaceCmd
  
OtvetClientu(var)
  q $$CommdFromServerToClien^%ZMRProgramCosta(var)   

]]></Routine>


<Routine name="%ZMRAUTH" type="MAC" languagemode="0"><![CDATA[
 ; ZMRPMD simple (or sample) user authentification routines
 ; Write your own if you wish!
 ; Use the following command to start ZMRPMD with this package:
 ; d START^%ZMRPMD(60,"CHKUSR^%ZMRAUTH")
 ;
CHKUSR(user,pass,nspace,appl) 
 ; --------------------------
   s I=$ZU(111,0)
   s ip=$p($A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)_"_"_($A(I,5)*256+$A(I,6)),":",1)
   s HashPwd=""
   if pass'="" F ix489=1:1:7  S HashPwd=HashPwd_$ZCRC(pass,ix489)
   s ^%ZMRSysUser(ip)=$LB(user,HashPwd,nspace,appl,ip,$p($h,",",1),$p($h,",",2))
 ; --------------------------
 n str,u,p,c,n,a,res,passfile
 s passfile=$$GetPassF() o passfile:("R"):5
 e  q 0 ; can not open password file
 s $ZT="eof",res=-1 u passfile:0
 f  d  q:res'<0
 . r str s u=$P(str,":"),p=$P(str,":",2),n=$P(str,":",3),a=$P(str,":",4)
 . i u=user s res=0 d:p=$$crypt(pass,+p)  q
 . . i n="" s res=1
 . . e  f c=1:1:$L(n,";") i $P(n,";",c)=nspace s res=1 q
 . . q:(a="")!'res
 . . s res=0 f c=1:1:$L(a,";") i $P(a,";",c)=appl s res=1 q
eof c passfile q res>0
 ;
 ; Use this routine to create and update password file
 ;
ADDUSR n bakf,str,fr,user,pass,nspace,apps,passfile
 r "Username: ",user
 f  d  q:pass=str
 . w !,"Password: " s pass="",str=""
 . f  r *fr q:(fr=10)!(fr=13)  w *8,"*" s pass=pass_$C(fr)
 . w !,"Repeat password: "
 . f  r *fr q:(fr=10)!(fr=13)  w *8,"*" s str=str_$C(fr)
 . w:pass'=str !,"Sorry, passwords do not match...",!
 w !,"Enter Namespace (or Namespaces delimited by semicolons)"
 w !," or just press ""Enter"" to allow any namespace: " r nspace
 w !,"Enter Application (or Applications delimited by semicolons)"
 w !," or just press ""Enter"" to allow any application: " r apps
 s passfile=$$GetPassF(),bakf=passfile_"-b"
 o passfile:("R"):2
 e  o passfile:("WN"):2 g:$T eof2
 e  w "Can not create password file",! q
 o bakf:("WN"):2
 e  w "Can not create backup file",! q
 s $ZT="eof1",fr=1
 f  d
 . i fr u passfile:0 ; first read from 0 position
 . e  u passfile ; subsequent reads from current position
 . r str i fr u bakf:0 s fr=0
 . e  u bakf
 . w str,!
eof1 u 0 c passfile,bakf
 o passfile:("WN"):5
 e  w "Can not write in password file",! q
 o bakf:("R"):5
 e  w "Backup file lost",! q
 s $ZT="eof2",fr=1
 f  d
 . i fr u bakf:0
 . e  u bakf
 . r str i fr u passfile:0 s fr=0
 . e  u passfile
 . w:user'=$P(str,":") str,!
eof2 u passfile w user,":",$$crypt(pass),":",$ZCVT(nspace,"U"),":",apps,!
 u 0 c passfile,bakf q
 ;
GetPassF(fname) 
 ; Not write-protected, but portable default place for password file
 q $G(fname,$ZU(12)_"passwd")
 ;
crypt(pass,salt) 
 ; It is not DES crypt, it is much worse :-(
 n URANDm,URANDm2,URANDia,URANDic,URANDmc,k,ss,pp,str,i,j,lp,ls,rc
 s URANDm=0,URANDm2=0,URANDia=0,URANDic=0,URANDmc=0
 s:$G(pass,"")="" pass=$C(255)
 s salt=$G(salt,$R(4096)+1024),ss=2048+salt,pp=ss+128,lp=$L(pass)
 f i=1:1:lp s pp=pp*96+$A($E(pass,i,i))-31 
 f i=1:1:ss s pp=$$urand(pp,31)
 s str="MAKOVACONSUL",k=salt_"$",ls=$L(str) f i=1:1:ls d
 . s rc=pp\256+$A($E(str,i,i))#62
 . i rc<10 s ss=48+rc
 . e  i rc<36 s ss=55+rc
 . e  s ss=61+rc
 . s k=k_$C(ss)
 . f j=1:1:rc+$A($E(pass,ss#lp+1,ss#lp+1)) s pp=$$urand(pp,31)
 q k
 ;
urand(y,p) 
 ; Random numbers from 0 to 2**p-1 generator
 ; For proper work define URANDm,URANDm2,URANDia,URANDic,URANDmc
 ; in the calling routine and initialize URANDm with 0.
 d:+URANDm=0
 . s URANDm=2**p,URANDm2=URANDm/2
 . s URANDia=8*(URANDm2*$ZPI\32)+5,URANDic=2*(URANDm2*(1-($ZSQR(3)/3))\2)+1
 . s URANDmc=URANDm-URANDic
 s y=y*URANDia+URANDic s:y'<URANDm y=y#URANDm
 q y
 
]]></Routine>


<Routine name="%ZMREVENT" type="MAC" languagemode="0"><![CDATA[
#include ZMRDEF
 
ZMREVENT(ServID) 
 ; ZMRPMD events handlers
 q:'$D(ServID)
 ; ServID - index variable with information about event
 ; ServID=1 - ZMRPMD started
 i ServID=1 k $$$DBINF d GarbColl s $$$PORTS(0)=0
 ; ServID=2 - ZMRPMD halted
 e  i ServID=2 s $ET="" d GarbColl
 ; ServID=3 - JOB started
 ; ServID(1) - TCP port used by JOB
 e  i ServID=3 d
 . h:('$D($$$PORTS))!$D($$$PORTS(-1))  ; shutdown in progress, no new jobs
 . d MarkPort(ServID(1))
 ; ServID=4 - JOB finished
 e  i ServID=4 d FreePort() s $ET="" h
 ; ServID>4 - reserved for extensions
 q:$Q "" q
 ;
GarbColl 
 n i,ix,iy,ns,c,nn,host,l,nethard
 k $$$PORTS,$$$AS,$$$MSGS
 ; remove our ZMRINS* routines from all namespaces
 s l=$L("ZMRINS"),host=$ZCVT($ZU(110),"U")
 s host=$TR(host,$TR(host,"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"))
 s ns=$ZU(5),nethard=$ZU(68,27)
 f i=1:1:$ZU(90,0) s:$l($ZU(90,2,0,i))>0 ns($ZU(90,2,0,i))=""
 s i="" f  s i=$O(ns(i)) q:i=""  d
 . s $ZT="GColErr"
 . d $ZU(68,27,0) zn i s ix="ZMRINS"
 . f  s ix=$O(^rOBJ(ix)) q:$E(ix,1,l)'="ZMRINS"  d
 . . s iy=l,nn=0 f  s c=$E(ix,$I(iy)) q:c'=+c  s nn=nn+1
 . . k:$E(ix,l+1+nn,$L(ix))=$E(host,1,25-nn) ^ROUTINE(ix),^rOBJ(ix),^rINDEX(ix)
GColErr . s $ZT="" zn ns d $ZU(68,27,nethard)
 q
 ;
MarkPort(port) 
 ; Mark port as listened by $J
 s:port>1 $$$PORTS(port)=+$J q
 ;
FreePort(port) 
 ; Mark port as unused since now
 i '$D(port) n port s port=0 f  s port=$O($$$PORTS(port)) q:port=""  q:$$$PORTS(port)=+$J
 s:port>1 $$$PORTS(port)=-$$$TM
 q
 ;
StDebInf(msg) 
 ; Store debugging information in $$$DBINF
 n ix,str,l,a,c s l=$L(msg),str=$ZTIMESTAMP_": "
 f ix=1:1:l d
 . s c=$E(msg,ix,ix),a=$A(c) s:(a<32)!((a>126)&(a<192)) c="<$C("_a_")>"
 . s str=str_c
 s $$$DBINF($I($$$DBINF))=str
 q
 ;
ShDebInf 
 ; Show debugging information collected by StDebInf
 n ix,c,sp q:($D($$$DBINF)'=11)  s nix=1,sp=24 ; screen_portion
 f  d  q:(nix>$$$DBINF)
 . s c=1 f ix=nix:1:$$$DBINF d  q:c=0
 . . w $$$DBINF(ix),!
 . . i ix#sp=0 r "--More?--",*c w *8," ",! s c=$C(c)
 . . i c="b" s nix=ix-sp-sp+1,c=0 s:nix<1 nix=1 ; back page
 . . e  i c="q" s nix=$$$DBINF+1,c=0 ; quit
 . s:c'=0 nix=$$$DBINF+1
 q
 
]]></Routine>


<Routine name="%ZMRINS" type="MAC" languagemode="0"><![CDATA[
 ; ZMRPMD prototype of routine for code insertion
#include ZMRDEF
  
InsertCode(src) 
 n i,cl,r,e
 s $ZT="icErr",cl=$$$LF
 i $d(^rOBJ("%R")) d
 . s r($I(r(0)))="WriteLn(Val) q $S($$IsBrk("_$NA($$$SES)_"):-1,1:$$WO(Val))"
 . s r($I(r(0)))="WO(Val) s $ZT=""tWO"""
 . i $D($$$FID) s r($I(r(0)))=" w Val_$C("_$$$aIVDLM_","_$$$aIVDLM_","_$$$aCMDDLM_")_"""_$$$msgGOON_"""_$C("_$$$aIDDLM_")_"_$NA($$$FID)_"_$C("_$$$aTRM_","_$$$aIDDLM_")"
 . e  s r($I(r(0)))=" w """_$$$msgGOON_":""_$L(Val)_$C("_$$$aTRM_")_Val,!"
 . s r($I(r(0)))=" q:$Q 0 q"
 . s r($I(r(0)))="tWO s "_$NA($$$ERR)_"=$ZERROR q:$Q -1 q"
 . s r($I(r(0)))="IsBrk(ses) q:$G(ses)="""" 0 q $D("_$NA($$$AS)_"(ses,-3))"
 . s r($I(r(0)))="mXoP1a2b"
 . f i=1:1:$L(src,cl) s r($I(r(0)))=$P(src,cl,i)
 . s r($I(r(0)))=" q:$Q """" q"
 . d ROUTINE^%R($$$InsRut_".INT",.r,.e,"SC") ; store and compile
 e  k ^rOBJ($$$InsRut) x "zi """":mXoP1a2b  f i=1:1:$L(src,cl) zi $P(src,cl,i)","zi "" q:$Q """" q"" zsave "_$$$InsRut
 q
icErr s $ZT="" q
 ; The following code copied to here from ZMRASD for best performance
WriteLn(Val) 
 q $S($$IsBrk($$$SES):-1,1:$$WO(Val))
 ;
WO(Val) 
 s $ZT="tWO"
 i $D($$$FID) w Val_$$$cIVDLM_$$$cIVDLM_$$$cCMDDLM_$$$msgGOON_$$$cIDDLM_$$$FID_$$$cTRM_$$$cIDDLM
 e  w $$$msgGOON_":"_$L(Val)_$$$cTRM_Val,!
 q:$Q 0 q
 ;
tWO s $$$ERR=$ZERROR q:$Q -1 q
 ; This function copied from ZMRSMGR for the same reason
IsBrk(ses) 
 q:$G(ses)="" 0 q $D($$$AS(ses,-3))
 ; End of imported code
mXoP1a2b 
 
]]></Routine>


<Routine name="%ZMRMStudioHooks" type="MAC" languagemode="0"><![CDATA[
PostRead(var, Enum, CLS, SMOpenMode, SMMessage)
 ; ^%debug1(4210)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:"1m_$c(22m27,11m)_22m"$d(^rMAC(""MStudioHooks""))"
 ; ^%debug1(4211)="(4496)РћС‚РІРµС‚:1"
 ; ^%debug1(4212)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:"1m_$c(22m27,11m)_22m"$d(^rOBJ(""MStudioHooks""))"  %ZMRMStudioHooks.mac
 ; ^%debug1(4213)="(4496)РћС‚РІРµС‚:1"
 ; ^%debug1(4214)="(4496)Р—Р°РїСЂРѕСЃ:cmd:x|val:"1m_$c(22m16,11m)_22m"s SMOpenMode=0"
 ; ^%debug1(4215)="(4496)Р—Р°РїСЂРѕСЃ:cmd:x|val:"1m_$c(22m16,11m)_22m"s SMMessage="""""
 ; ^%debug1(4216)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:O"1m_$c(22m11m)_22m"$$PostRead^MStudioHooks("""", ""%Activate.Enum"", ""CLS"", .SMOpenMode, .SMMessage)"
 ; ^%debug1(4217)="(4496)Р—Р°РїСЂРѕСЃ:cmd:x|val:"1m_$c(22m14,11m)_22m"k SMOpenMode"
 ; ^%debug1(4218)="(4496)Р—Р°РїСЂРѕСЃ:cmd:x|val:"1m_$c(22m13,11m)_22m"k SMMessage"
 ; ^%debug1(4219)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:-"1m_$c(22m11m)_22m"$$CheckProtect^%qccServer(""%Activate.Enum"")"
   O 2:($job)   
   U 2:($job)
   zw var 
   w !,"--------------------",!
   zw var
   w !,"--------------------",!
   zw Enum
   w !,"--------------------",!
   zw CLS
   w !,"--------------------",!
   zw SMOpenMode
   w !,"--------------------",!
   zw SMMessage
   w !,"--------------------",!
   c 2:($job)
   Set file=##class(%File).%New("c:\Temp\var.txt")
   Do file.Open("WSN")
   s indexSPOOL=""
   f  s indexSPOOL=$o(^SPOOL($job,indexSPOOL)) q:indexSPOOL=""   d
   . s indexSPOOL2=indexSPOOL s indexSPOOL2=$o(^SPOOL($job,indexSPOOL2))
   . if indexSPOOL2'=""  d
   . .  Do file.Write(^SPOOL($job,indexSPOOL))
   k ^SPOOL($job) 
   s file=""
   q 1
 ; ===================================================================================================
 ; ^%debug1(4210)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:"1m_$c(22m27,11m)_22m"$d(^rMAC(""MStudioHooks""))"
 ; ^%debug1(4211)="(4496)РћС‚РІРµС‚:1"
 ; ^%debug1(4212)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:"1m_$c(22m27,11m)_22m"$d(^rOBJ(""MStudioHooks""))"  %ZMRMStudioHooks.mac
 ; ^%debug1(4213)="(4496)РћС‚РІРµС‚:1"
 ; ^%debug1(4214)="(4496)Р—Р°РїСЂРѕСЃ:cmd:x|val:"1m_$c(22m16,11m)_22m"s SMOpenMode=0"
 ; ^%debug1(4215)="(4496)Р—Р°РїСЂРѕСЃ:cmd:x|val:"1m_$c(22m16,11m)_22m"s SMMessage="""""
 ; ^%debug1(4216)="(4496)Р—Р°РїСЂРѕСЃ:cmd:r|val:O"1m_$c(22m11m)_22m"$$PostRead^MStudioHooks("""", ""%Activate.Enum"", ""CLS"", .SMOpenMode, .SMMessage)"
 ; ===================================================================================================
]]></Routine>


<Routine name="%ZMRPMD" type="MAC" languagemode="0"><![CDATA[
 ; Permanent ZMRPMD daemon, start/stop/config programs
 ;  d RUN^%ZMRPMD
 ;  d CONFIG^%ZMRPMD
#include ZMRDEF
 
#define ALRDRUN         3
#define JOBFAIL         4
#define JOBOK           5
#define HALTPROC        8
 
#define CLRSCR $C(27)_"[2J"
#define PARPOS 3
#define LICVALPOS 30
#define DEFPOS 55
#define CURPOS 65
#define LICMAXPOS 78
 
CONFIG n inp,n1,n2,LastX,LastY,linnum,notnums
 w $$$CLRSCR,/cup(1,1)
 w ?$$$PARPOS,"Parameter:",?$$$DEFPOS,"Default:",?$$$CURPOS,"Current:",!
 d DescParm($$$ieSrvPort,"TCP port for requests to PMD",$$$dfSrvPort)
 d DescParm($$$ieMaxAppPort,"Max application port number",$$$dfMaxAppPort)
 d DescParm($$$ieSrvOpenTO,"Timeout for TCP port opening by PMD (sec)",$$$dfSrvOpenTO)
 d DescParm($$$ieSrvReadTO,"Timeout for request waiting by PMD (sec)",$$$dfSrvReadTO)
 d DescParm($$$ieSrvAuditTO,"Period of unused variables cleanup (hours)",$$$dfSrvAuditTO)
 d DescParm($$$ieSrvJobTO,"Timeout for PMD attempt to run ASD (sec)",$$$dfSrvJobTO)
 d DescParm($$$ieTCPWaitTO,"TCP_close_wait_interval system parameter (sec)",$$$dfTCPWaitTO)
 d DescParm($$$ieUseConcur,"Use concurrent server mode (0 - No/1 - Yes)",$$$dfUseConcur)
 d DescParm($$$ieAppSndBufSz,"Size of WRTDMN buffer for sending data (B)",$$$dfAppSndBufSz)
 d DescParm($$$ieAppRcvBufSz,"Size of WRTDMN buffer for receiving data (B)",$$$dfAppRcvBufSz)
 d DescParm($$$ieAppOpenTO,"Timeout for TCP port opening by ASD (sec)",$$$dfAppOpenTO)
 d DescParm($$$ieAppLstTO,"Timeout for connection waiting by ASD (sec)",$$$dfAppLstTO)
 d DescParm($$$ieAppReadTO,"Timeout for data reading by ASD (sec)",$$$dfAppReadTO)
 d DescParm($$$ieAppIdleTO,"Idle time before session storing (min)",$$$dfAppIdleTO)
 d DescParm($$$ieNativeAuth,"Use built-in Cache' authentication (0 - No/1 - Yes)",$$$dfNativeAuth)
 d DescParm($$$ieSesAuditTO,"Lifetime of saved local variables (days)",$$$dfSesAuditTO)
 w "Enter parameter number to edit or type ""q"" to save and exit: "
 s LastX=$X,LastY=$Y
 f  d  q:$E(inp,1)="q"
 . r /cup(LastY+1,LastX+1),inp
 . i $E(inp,1)'="q" s n1=inp\10,n2=inp#10 d EditParm(n1,n2)
 . d ClearN(LastX,LastY,$L(inp))
 q
 ;
DescParm(n1,n2,text,default,notnum) 
 w n1_n2,?$$$PARPOS,text,?$$$DEFPOS,default
 w:$D($$$Ini(n1,n2)) ?$$$CURPOS,$$$Ini(n1,n2)
 s linnum(n1,n2)=$Y
 s notnums(n1,n2)=''$G(notnum)
 w ! q
 ;
EditParm(n1,n2) 
 n val,maxlg s maxlg=$$$CURPOS-$$$DEFPOS-1
 d:$D(linnum(n1,n2))
 . r /cup(linnum(n1,n2)+1,$$$CURPOS+1),val#maxlg
 . i val'="" d
 . . s:'notnums(n1,n2) val=+val
 . . s $$$Ini(n1,n2)=val
 . e  k $$$Ini(n1,n2)
 . d ClearN($$$CURPOS,$Y,maxlg)
 . w /cup($Y+1,$$$CURPOS+1),$G($$$Ini(n1,n2))
 q
 ;
ClearN(x,y,n) n val
 w /cup(y+1,x+1) f val=1:1:n w " "
 q
 ;
LICENSE n inp,n1,n2,LastX,LastY,linnum,notnums,prodname,i1
 w "Product Name: " r prodname w !
 i prodname="" w "Empty product name is not allowed",! q
 w $$$CLRSCR,/cup(1,1)
 w ?$$$PARPOS,"Parameter:",?$$$LICVALPOS,"Value:",!
 w ?$$$PARPOS,"Product name:",?$$$LICVALPOS,prodname,!
 d DescLicPar($$$ieLicCustomer,"Customer name",1)
 d DescLicPar($$$ieLicNumber,"License number",1)
 d DescLicPar($$$ieLicConnects,"Number of connections")
 d DescLicPar($$$ieLicKey,"License key",1)
 w "Enter parameter number to edit, ""k"" to delete, ""q"" to save and exit: "
 s LastX=$X,LastY=$Y
 f  d  q:(i1="q")!(i1="k")
 . r /cup(LastY+1,LastX+1),inp s i1=$E(inp,1)
 . i i1="q" q
 . i i1="k" k $$$Ini($$$ieLicNode,prodname) q
 . s n1=inp\10,n2=inp#10 d EdLicPar(n1,n2)
 . d ClearN(LastX,LastY,$L(inp))
 q
 ;
DescLicPar(n1,n2,text,notnum) 
 w n1_n2,?$$$PARPOS,text
 w:$D($$$Ini(n1,prodname)) ?$$$LICVALPOS,$LG($$$Ini(n1,prodname),n2)
 s linnum(n1,n2)=$Y
 s notnums(n1,n2)=''$G(notnum)
 w ! q
 ;
EdLicPar(n1,n2) 
 n val,maxlg s maxlg=$$$LICMAXPOS-$$$LICVALPOS-1
 d:$D(linnum(n1,n2))
 . r /cup(linnum(n1,n2)+1,$$$LICVALPOS+1),val#maxlg
 . i val'="" d
 . . s:'notnums(n1,n2) val=+val
 . . s $LI($$$Ini(n1,prodname),n2)=val
 . e  s $LI($$$Ini(n1,prodname),n2,n2)=$LB()
 . d ClearN($$$LICVALPOS,$Y,maxlg)
 . w /cup($Y+1,$$$LICVALPOS+1),$LG($$$Ini(n1,prodname),n2)
 q
 ;
GetLicense(prodname) 
 ; Returns license parameters as
 ; $LB(Customer,LicenseNumber,MaxConnects,LicenseKey)
 q $S($G(prodname)="":"",1:$G($$$Ini($$$ieLicNode,prodname)))
 ;
gs(w) q:w=$$$JOBOK "Server ZMRPMD is running."
 q:w=$$$JOBFAIL "Can not start application server."
 q:w=$$$ALRDRUN $ZN_" is already running."
 q:w=$$$HALTPROC "All ZMRPMD routines have been halted!"
 q ""
 ;
Version() q 2018101401
 ;
RUNDEV(BackUpFile="")
  k ^%ZMRBackUp
  s:BackUpFile="" BackUpFile= $ZUTIL(168)_"BackUp\"
  s ^%ZMRBackUp=BackUpFile
  ; s path= ^%ZMRBackUp_UserName_"\"_nspace_"\"_$zd(+$h,3)_"\CLS."_className_"("_$p($zt($p($h,",",2)),":",1)_").xml"
  ; s:nspace="" nspace=$zu(5)
  ; s ^%ZMRBackUp($job)="d $system.OBJ.Export("""_className_".cls"","""_path_""")   "
  ; x ^%ZMRBackUp($job)
  d START(60) q
RUN
  k ^%ZMRBackUp
  d HALT^%ZMRPMD
  h 5
  d START(60) q
 ;
START(to,authprog) 
 ; authprog - name of arbitrary function (without leading "$$")
 ; with parameters (username,password,namespace)  returning 0
 ; if access is to be denied, or 1 if access is to be granted
 s $ZT="stErr"
 n ix,port,j
 ; Are we already running?
 s (ix,j)=0,port="|TCP|"_$G($$$Ini($$$ieSrvPort),$$$dfSrvPort)
 f  s ix=$O(^$J(ix)) q:ix=""  i $P($V(-1,ix),"^",3)[port s j=ix q
 i j w $$gs($$$ALRDRUN),! q   ; stop if already running
 d ^$$$EVENT(1) ; Perform startup actions
 j Daemon($G(authprog)):():$G(to,10) ; start server
 e  w $$gs($$$JOBFAIL),! q  ; cannot start job
 w "ZMRPMD Copyright (C) 1999-2018 SMWrap",!,$$gs($$$JOBOK),!
 q
 ;
stErr s $ZT="" w "Unknown error while startup",! q
 ;
HALT n j,port,p,maxp
 s j=0,$$$PORTS(-1)=+$J
 s p=$G($$$Ini($$$ieSrvPort),$$$dfSrvPort)
 s maxp=$G($$$Ini($$$ieMaxAppPort),$$$dfMaxAppPort)
 f  s j=$O(^$J(j)) q:j=""  s port=+$P($P($V(-1,j),"^",3),"|",3) d:(port'<p)&(port'>maxp) $ZU(4,j)
 w $$gs($$$HALTPROC),!
 d ^$$$EVENT(2) ; Perform clean shutdown
 q
 ;
Daemon(authprog) 
 n tio,oto,rto,jto,ato,at,ijc,csm
 s ato=$G($$$Ini($$$ieSrvAuditTO),$$$dfSrvAuditTO)*3600
 s oto=$G($$$Ini($$$ieSrvOpenTO),$$$dfSrvOpenTO)
 s rto=$G($$$Ini($$$ieSrvReadTO),$$$dfSrvReadTO)
 s jto=$G($$$Ini($$$ieSrvJobTO),$$$dfSrvJobTO)
 s csm=''$G($$$Ini($$$ieUseConcur),$$$dfUseConcur)
 s p=$G($$$Ini($$$ieSrvPort),$$$dfSrvPort),tio="|TCP|"_p
 s at=3,at(1)=p d ^$$$EVENT(.at)
 s ijc=$$GetFreeJ() d:'ijc ^$$$EVENT(4) ; finish if no free IJC devices
 o tio:(::"AS":$$$cTRM):oto e  d ^$$$EVENT(4) ; finish if cannot open TCP
 s at=$$$TM u tio f  d ReadCmd
 ; no normal termination provided
ReadCmd n c,d,ap,sesid,ix,key,oasd,csok
 s $ZT="endcmd" r d ; dummy read - waiting for connection
 ; read commands from TCP port, one per connection
 ; only cmdCREATE, cmdOPEN and cmdBRKFLW have sense here:
 ; "MR:cr:"_namespace_":"_$L(listparm)_$C(0)_$LB(username,password,application)
 ; "MR:op:"_SessionID_$C(0)
 ; "MR:bfl:"_SessionID_$C(0)
 s d="",(ap,oasd,csok)=0 r d#255:rto d ParseInp
 i (d<3)!($G(d(1))'=$$$APPTYPE) w $$$errINVALTYPE,$$$cTRM,! ztrap  ; invalid input
 i d(2)=$$$cmdBRKFLW d BrkFlw^$$$SMGR(d(3)) ; set flag to break group read
 ; start application server
 i d(2)=$$$cmdCREATE d CreatePP d StartASD
 i d(2)=$$$cmdOPEN d OpenPP d StartASD
 ; start audit
 i ($$$TM-at)>ato s at=$$$TM j Audit^$$$SMGR:():jto
endcmd s $ZT="" w:'csok *-2 q  ; reset connection and continue to listen
 ;
ParseInp n ix,lp
 s $ZT="ParsEnd"
 i $P(d,$$$cIDDLM,1,2)=($$$cIDDLM_$$$APPTYPEOLD) d  ; old format
 . s d=$TR(d,$$$cIDDLM_$$$cCMDDLM,$$$cTRM_$$$cTRM)
 . s d(1)=$$$APPTYPE,ix=1,oasd=1
 . f ix=2:1:$L(d,$$$cTRM) s d(ix)=$P(d,$$$cTRM,ix+1)
 e   d  ; new format
 . f ix=1:1:$l(d,":") s d(ix)=$P(d,":",ix)
 . d:(d(2)=$$$cmdCREATE)&($G(d(4))>0)
 . . s d="" ; read remained d(4) bytes from TCP ($LB(name,pass,appl))
 . . f  s lp=d(4)-$L(d) q:lp'>0  r ix#lp:rto s ix=ix_$S($A($K)>127:$K,1:$$$cTRM),d=d_$E(ix,1,lp)
 . . f ix=1:1:$LL(d) s d(ix+3)=$LG(d,ix)
ParsEnd s $ZT="",d=+$O(d(""),-1)
 q
 ;
ValidNS(d) 
 n ix,oio
 s $ZT="autherr",oio=$IO,ix=1
 x:authprog'="" "s ix=$$"_authprog_"($G(d(4)),$G(d(5)),d(3),$G(d(6)))"
 s:ix ix=$ZU(90,10,d(3))
 u oio q ix
autherr u oio q 0
 ;
CreatePP s ix=$R(52),key=$S(ix<26:$C(65+ix),1:$C(71+ix))
 s ix=$R(52),key=key_$S(ix<26:$C(65+ix),1:$C(71+ix))
 s d(3)=$ZCVT(d(3),"U"),sesid=""
 s:$$ValidNS(.d) ap=$$GetFreeP(p)
 q
 ;
OpenPP s sesid=d(3),d(3)=$$NS^$$$SMGR(d(3)),ix=$$UINF^$$$SMGR(sesid)
 s d(4)=$LG(ix,1),key=$ZWCHAR($LG(ix,2,-1)+8192)
 i d(3)'=0 s ap=$$GetFreeP(p)
 e  w $$$errNOSESSION,$$$cTRM,!
 q
 ;
StartASD n ix,login
 s login=$LB($G(d(4)),$G(d(5)))
 i oasd d
 . s $ZT="errASD"
 . i $$DenySU() w $$$errNOLIC_$$$cCMDDLM_$$$cTRM,! q
 . i ap>0 j Daemon^$$$OLDASD(ap,ijc,login):(d(3)):jto
 . i  u ijc r ix:jto u tio i ix w $$$msgCONNECT_$$$cCMDDLM_ap_$$$cTRM,! q
 . w $$$errNOJOB_$$$cCMDDLM_$$$cTRM,!
 e  d
 . s $ZT="errASD"
 . i $$DenySU() w $$$errNOLIC_$$$cTRM,! q
 . i ap>0 j:ap>1 Daemon^$$$ASD(ap,ijc,key,login,sesid):(d(3)):jto j:ap=1 Daemon^$$$ASD(ap,0,key,login,sesid):(d(3):4:tio:tio):jto
 . i  s:ap=1 csok=1 q:ap=1  u ijc r ix:jto u tio i ix w $$$msgCONNECT_":"_ap_":"_key_$$$cTRM,! q
 . w $$$errNOJOB_$$$cTRM,!
errASD q
 ;
GetFreeP(p) 
 ; Get free TCP port for ASD
 n j,port,t,maxp,res,tcpto
 q:csm&'oasd 1 ; Concurrent mode does not need new port
 s j="",t=$$$TM,res=0
 s maxp=$G($$$Ini($$$ieMaxAppPort),$$$dfMaxAppPort)
 s tcpto=$G($$$Ini($$$ieTCPWaitTO),$$$dfTCPWaitTO)
 f  s j=$O(^$J(j)) q:j=""  d
 . s port=+$P($P($V(-1,j),"^",3),"|",3)
 . s:(port'<p)&(port'>maxp) $$$PORTS(port)=j
 ; $$$PORTS(port)>0 - port marked as listened by process j
 ; $$$PORTS(port)<0 - port marked as unused since time=-j
 ; please mark port listened every time you open it, and unused - when closed
 f port=p:1:maxp q:res  d
 . i $D($$$PORTS(port)) s j=$$$PORTS(port) d
 . . i j>0 s:'$D(^$J(j)) $$$PORTS(port)=-t ; process died - mark port as unused since now
 . . e  s:t>(tcpto+5-j) res=port ; TIME-WAIT state expired - consider port as free
 . e  s res=port ; port never was in $$$PORTS - free
 s $$$PORTS(res)=tcpto-t ; lock offered port for 5 seconds
 q res
 ;
GetFreeJ() 
 ; Get free pair of interjob communication devices
 n id,od,res
 s res=0
 f id=254:-2:228 o id::0 i  s od=id+1 o od::0 s:$T res=id q:res  c id
 c:res od
 q res
 ;
DenySU() 
 ; returns 1 if license is Single User and client is remote, otherwise - 0
 s $ZT="dnSUerr"
 q:$E($ZU(111,0),1,4)=$C(127,0,0,1) 0
 n ix,values,names,res,ons,oio
 s res=1,ons=$ZU(5),oio=$IO d $ZU(5,"%SYS")
 f ix=1:1:$$avail^LMFCLI(.values,.names) i $P(values,";",ix)&($P(names,";",ix)'["Single") s res=0 q
 d $ZU(5,ons) u oio q res
dnSUerr s $ZT="" q 0
 ;
 

]]></Routine>


<Routine name="%ZMRProgramAuthor" type="MAC" languagemode="0"><![CDATA[
AuthorTest(user,pass,nspace,appl) 
   ;  РџСЂРѕРІРµСЂРєР° Р°РІС‚РѕСЂРёР·Р°С†РёРё РёР· MAKOVA РїСЂРёР»РѕР¶РµРЅРёСЏ
   ;  ; %sysuser=$LB(user,HashPwd,nspace,appl,ip,$p($h,",",1),$p($h,",",2))
   ;  s ..Edit1.Text=%sysuser
   ;  d Log(^%SysUser(ip))
   /*
   ; Р°РІС‚РѕСЂРёР·Р°С†РёСЏ РїСЂРё РїРѕРјРѕС‰Рё С‚Р°Р±Р»РёС†С‹
   s oldNs=$zu(5)
   zn nspace
   if ##class(%ClassDefinition).%ExistsId("Auth.SysUser")
   {
      &SQL(SELECT ID, HashPwd  INTO :uid ,:Hesh FROM Auth.SysUser WHERE UserName=:user and Status=1)
      q:SQLCODE 0
      if Hesh=HashPwd 
      {   &SQL(UPDATE Auth.SysUser set LastIP=:ip WHERE UserName=:user and HashPwd=:HashPwd and Status=1)
          zn oldNs
          s ^%ZSysUser(ip)=$LB(user,HashPwd,nspace,appl,ip,$p($h,",",1),$p($h,",",2))
          ; s %epmloee=$lb(user,HashPwd,ip,appl)
          q 1     
      }
      q 0
   }  
   zn oldNs
   q 0
   */
   q 1
   

Log(val)
  if $d(^%debug) k:^%debug>10000 ^%debug
  s:'$d(^%debug) ^%debug=1
  s ^%debug=^%debug+1,^%debug(^%debug)="("_$j_")"_val
  q 

]]></Routine>


<Routine name="%ZMRProgramCosta" type="MAC" languagemode="0"><![CDATA[
  ; РЎРїРёСЃРѕРє РєРѕСЃС‚С‹Р»РµР№ РґР»СЏ MAKOVA РїСЂРёРјРµРЅСЏСЋС‚СЃСЏ РІ СЃРІСЏР·Рё СЃ РёР·РјРµРЅРµРЅРёРµРј СЃС‚Р°РЅРґР°СЂС‚Р° РІ Cache`
  ; С„СѓРЅРєС†РёСЏ РїРµСЂРµС…РІР°С‚С‹РІР°РµС‚ С‡С‚РµРЅРёСЏ РІС…РѕРґСЏС‰РёС… РєРѕРјР°РЅРґ РѕС‚ РєР»РёРµРЅС‚Р°
CommdFromClienToServer(cmd,var) 
  ; q $lb(cmd,var)
  // РєРѕСЃС‚С‹Р»СЊ РЅРµРѕР±С…РѕРґРёРј РґР»СЏ MAKOVA 2.1
  ;  d Log("Р—Р°РїСЂРѕСЃ:cmd:"_cmd_"|val:"_var)
  ; s var=$replace(var,"s %SMWOrefs(+%this)=%this","s %SMWOrefs(+##this)=##this")
  s var=$replace(var,"%this","##this")
  s var=$replace(var,$c(17,1)_"Do $ZU(68,56,1)",$c(1)_"d SubsMsgs^%ZMRASD(""DEBUGEVENT"",1,0,""OnMsgCallBack^%ZMRASD"")")
  s var=$replace(var,$c(16,1)_"d $zu(68,56,1)",$c(1)_"d SubsMsgs^%ZMRASD(""DEBUGEVENT"",1,0,""OnMsgCallBack^%ZMRASD"")")
  ;                   
  ; РљР°СЃС‚С‹Р»СЊ РґР»СЏ С‚РѕРіРѕ, С‡С‚РѕР±С‹ СЂР°Р±РѕС‚Р°Р» GlobalView РІРµСЂСЃРёРё 1.0
  s var=$replace(var,"d Fetch^%GD(""*"",0,0)","D GetGlobals^%ZMRASD(,.lvn)")
  ;
  ; РљРѕСЃС‚С‹Р»Рё РґР»СЏ MAKOVA 2.1  РїСЂРё РєРѕРјРїРёР»СЏС†РёРё РєР»Р°СЃСЃР° РёР· SMWrap Developer
    ; if $l(var,"initvalue:%String")'=1 s var=$replace(var,"initvalue:%String","initvalue:%String=""""""")
    s FragSrc=" s %SMWOrefs(+##this)=##this"_$c(13,10)_" d ##this.Initialization(initvalue)"_$c(13,10)_" s result=##this.OnCreate(initvalue)"_$c(13,10)_" i result'=$$$OK  d"_$c(13,10)_" . d ##this.Form.%Close()"_$c(13,10)_" . k %SMWOrefs(+##this)"_$c(13,10)_" e  d ##this.Form.SetContainer(+##this)"_$c(13,10)_" q result"_$c(13,10)
    s FragDst=" s %SMWOrefs(+##this)=##this"_$c(13,10)_" d ##this.Initialization(initvalue)"_$c(13,10)_" s result=##this.OnCreate(initvalue)"_$c(13,10)_" i result'=$$$OK d ##this.Form.%Close() k %SMWOrefs(+##this) q $$$OK"_$c(13,10)_" e  d ##this.Form.SetContainer(+##this) q $$$OK"
    if $l(var,FragSrc)'=1 s var=$replace(var,FragSrc,FragDst)

    ; s t1=",MOREFTEMP.FormalSpec=""initvalue:%String,MOREFTEMP.ReturnType="
    ; s t2=",MOREFTEMP.FormalSpec=""initvalue:%String="""",MOREFTEMP.ReturnType="
    ; if $l(var,t1)'=1 s var=$replace(var,t1,t2)
    ;
    ; Р”Р»РёРЅРЅС‹Рµ СЃС‚СЂРѕРєРё РЅРµ РїРѕРјРµС‰Р°СЋС‚СЃСЏ РІ MOREFTEMP.Implementation.WriteLine, РїРѕ СЌС‚РѕРјСѓ СЂР°Р·Р±РёРІР°РµРј РЅР° $СЃ(13,10) Рё Р·Р°РїРёСЃС‹РІР°РµРј РїРѕСЃС‚СЂРѕС‡РЅРѕ
    if cmd="w",$l(var,$c(14,1)_"TmpMethodVar")=2
    {
     s start=$l($e(var,1,$l($c(14,1)_"TmpMethodVar")))
     s varEnd=$e(var,1,$l($c(14,1)_"TmpMethodVar"))_$c(1)_""
     s varTmp=$e(var,15,$l(var))
     s varTmp=$e(varTmp, $l($p(varTmp," ",1))+1,$l(varTmp))
     for ind=1:1:$l(varTmp,$c(13,10))
     {
        k ^%ZMRASDKostil($Job)
        s Sub=$p(varTmp,$c(13,10),ind)
         if $e(Sub,1,2)=" 0" {
            s Sub=" ;"
         }
         s Sub=$REPLACE(Sub,"#endif","      ")
        ; РЈР±РёСЂР°РµРј РІ СЃС‚СЂРѕРєРµ РЅРµ С‡РёС‚Р°РµРјС‹Рµ СЃРёРјРІРѕР»С‹
           s res="" for i=1:1:31{s res=res_$c(i)} for i=127:1:144{s res=res_$c(i)}  for i=152:1:191{s res=res_$c(i)} w res   
           s Sub=$tr(Sub,res,"") 
        ; ------------------------------------
        for i=1:1:$l(Sub){ 
           s ^%ZMRASDKostil($Job)=$e(Sub,i,i)
           x "d MOREFTEMP.Implementation.Write(^%ZMRASDKostil($Job))"
        }
        x "d MOREFTEMP.Implementation.Write($c(13,10))"
        k ^%ZMRASDKostil($Job)
     }
     
     s var=varEnd
   }
   
  q $lb(cmd,var)
  
  
 ; С„СѓРЅРєС†РёСЏ РїРµСЂРµС…РІР°С‚С‹РІР°РµС‚ РѕС‚РІРµС‚ РєР»РёРµРЅС‚Сѓ
CommdFromServerToClien(var)
  ; d Log("РћС‚РІРµС‚:"_var)
  ; РљРѕСЃС‚С‹Р» РґР»СЏ MAKOVA РµСЃР»Рё РІРµСЂСЃРёСЏ РєР°С€Рµ РёРЅР°СЏ , С‚РѕРіРґР° РјР°РєРѕРІР° РјРµРЅСЏРµС‚ РЅР°Р±РѕСЂ РєРѕРјР°РЅРґ
  ;   // W $$GetVersion^%apiOBJ()
  ;   // Cache Objects Version 5.0.6408.0
  ; s var=$replace(var,"Cache Objects Version 2015.2.2.805","Cache Objects Version 5.0.6408.0")
  if $l(var,"Cache Objects Version ")=2 s var="Cache Objects Version 5.0.6408.0" 
  q var
  

Log(val)
  if $d(^%debug1) k:^%debug1>10000 ^%debug1
  s:'$d(^%debug1) ^%debug1=1
  s ^%debug1=^%debug1+1,^%debug1(^%debug1)="("_$j_")"_val
  q 
    
]]></Routine>


<Routine name="%ZMRSMGR" type="MAC" languagemode="0"><![CDATA[
 ; ZMRPMD session management procedures
#include ZMRDEF
  
NextSID(sid) 
 ; returns ID of next active session
 s $ZT="JErr"
 f  s sid=$O($$$AS(sid)) q:sid=""  q:$D(^$J($G($$$AS(sid,-2),0)))
 q sid
JErr s $ZT="" q ""
 ;
Del(sid) k:sid'="" $$$AS(sid),$$$MSGS(sid) q
 ;
NS(sid) q:sid'="" $G($$$AS(sid,-1),0) q 0
 ;
UINF(sid) 
 ; returns $LB(UserLN,$ZWASCII(SessionKey))
 q:sid'="" $G($$$AS(sid,-1,4)) q ""
 ;
SetClientIP(ip) 
 ; stores client IP-address submitted by client (overrides autodetected)
 n cip,ix
 s cip=0 f ix=1:1:4 s cip=cip*256+$P(ip,".",ix)
 s $$$AS($$$SES,0,"CIP")=cip
 q
 ;
GetClientIP(sid) 
 ; returns stored client IP-address
 n ix,ip,cip
 s cip=$G($$$AS($G(sid,$G($$$SES)),0,"CIP")) q:'cip ""
 s ip="" f ix=1:1:4 s ip=cip#256_$S(ip'="":"."_ip,1:""),cip=cip\256
 q ip
 ;
BrkFlw(sid) 
 q:$G(sid)=""
 q:$D($$$AS(sid))'=11
 s $$$AS(sid,-3)=1 q
 ;
IsBrk(sid) 
 q:$G(sid)="" 0 q $D($$$AS(sid,-3))
 ;
IsTrm(sid) 
 q:sid="" 0 q $D($$$AS(sid,-4))
 ;
ClBrk(sid) k:sid'="" $$$AS(sid,-3) q
 ;
Ses() n i,ix,sid,c,cur,ip,cip
 l +$$$AS(0) s cur=$G($$$AS(0))
 s:$L(cur)'=12 cur="MAKOVA123456"
 f i=1:1:6 s c=$A($E(cur,i))+$R(8) s:c>$A("Z") c=c-26 s $E(cur,i)=$C(c)
 s $E(cur,7,12)=$E(cur,7,12)+1
 s:$E(cur,7,12)>999990 cur=$E(cur,1,6)_100001
 s $$$AS(0)=cur,sid=cur_$ZCVT($P($ZU(110),"."),"U")_$$$TM
 l -$$$AS(0)
 s $$$AS(sid,-2)=+$J,$$$AS(sid)=$$$TM
 ; determine and store client's IP-address
 s cip=0,ip=$ZU(111,0) f ix=1:1:4 s cip=cip*256+$A($E(ip,ix))
 s ($$$AS(sid,0,"CIP"),$$$AS(sid,0,"CIP",0))=cip
 q sid
 ;
IOStore(sid) 
 s $$$AS(sid,"TIO")=$IO
 ; Share license between processes from the same client computer
 s $ZT="GCSerr"
 n ix,cnt,myip,sll s sll="(nv083Pasnacv3P7ET121R d"
 s ix="",cnt=0,myip=$$$AS(sid,0,"CIP",0)
 f  s ix=$$NextSID(ix) q:ix=""  s:$$$AS(ix,0,"CIP",0)=myip cnt=cnt+1
 i $$$IsCache5 s:cnt>12 myip=myip_"."_cnt x $TR($RE(sll),"va127R380P","ieSYM$Log.")_myip_",1)" i 1
 e  d:cnt'>12 GetCSLic^%LICENSE()
GCSerr s $ZT="" q
 ;
Restore(sid) 
 n j,i,hto,cnt,ix
 q:sid="" ""
 q:$D($$$AS(sid))'=11 ""
 s $$$AS(sid,-2)=+$J,$$$AS(sid)=0
 s cnt=$G($$$AS(sid,0,0),0)
 f ix=1:1:cnt m @$$$AS(sid,0,ix,0)=$$$AS(sid,0,ix,1)
 s $ET=$G($$$AS(sid,0,"ETRAP"))
 m $$$AS(sid,-5)=$$$AS(sid,-1,-5) ; restore license mark
 k $$$AS(sid,-1),$$$AS(sid,0)
 q sid
 ;
Store(sid) 
 n ix,sl,v,vn
 q:sid=""
 s sl=$ZU(41)-3,ix=0,(v,vn)=""
 f  s v=$ZU(42,sl,v) q:v=""  i $P(v,"(")'=vn s vn=$P(v,"("),$$$AS(sid,0,$I(ix),0)=vn m $$$AS(sid,0,ix,1)=@vn
 s $$$AS(sid,0,0)=ix,$$$AS(sid)=$$$TM
 s $$$AS(sid,0,"ETRAP")=$ET
 s $$$AS(sid,-1)=$ZNSPACE
 s $$$AS(sid,-1,4)=$LB($G($$$USERLN),$ZWASCII($G($$$KEY))-8192)
 m $$$AS(sid,-1,-5)=$$$AS(sid,-5) ; move license mark
 k $$$AS(sid,-2),$$$AS(sid,-3),$$$AS(sid,-4),$$$AS(sid,-5)
 q
 ;
Audit n ix,ct,at
 s at=$G($$$Ini($$$ieSesAuditTO),$$$dfSesAuditTO)*86400
 s ix="",ct=$$$TM
 f  s ix=$O($$$AS(ix)) q:ix=""  k:$$$AS(ix)&((ct-$$$AS(ix))>at) $$$AS(ix),$$$MSGS(ix)
 q
 ;
]]></Routine>


<Class name="%ZSMWrap.Class">
<TimeCreated>64491,59164.075381</TimeCreated>
</Class>


<Class name="%ZSMWrap.Server">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>64533,53755.346609</TimeCreated>

<Method name="OnTask">
<Description>
РњРµС‚РѕРґ СЃС‚Р°СЂС‚СѓРµС‚ РёР· РЎРёСЃС‚РµРјРЅРѕРіРѕ </Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      d RUN^%ZMRPMD
      quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="%ZSMWrap.Template.Castum">
<IncludeCode/>
<Language>cache</Language>
<TimeCreated>64692,59336.581057</TimeCreated>
</Class>


<Class name="%ZSMWrap.Template.Csp">
<IncludeCode/>
<Language>cache</Language>
<Super>%CSP.Page</Super>
<TimeCreated>64692,59378.693919</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
  Do %response.SetHeader("Content-Type",..ContentType("html")	)   
  q 1
]]></Implementation>
</Method>

<Method name="ContentType">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
  s rashirenie=$p(FileName ,".", $l(FileName,"."))
  q:rashirenie="html" "text/html"
  q:rashirenie="htm" "text/html"
  q:rashirenie="css" "text/css"
  q:rashirenie="js" "application/javascript"
  q:rashirenie="txt" "text/plain"
  q "application/octet-stream"
]]></Implementation>
</Method>
</Class>


<Class name="%ZSMWrap.Template.Form">
<Language>cache</Language>
<Super>%Library.TMFormClass</Super>
<TimeCreated>64621,58197.868059</TimeCreated>

<Property name="Form">
<Type>%Library.TMForm</Type>
</Property>

<Property name="StaticControl">
<Type>%Library.String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="%OnNew">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 n result
 i $d(initvalue)=0 q $$$OK
 i initvalue="" q $$$OK
 d ..Initialization(initvalue)
 s result=..OnCreate(initvalue)
 i result'=$$$OK  d
 e  d ..Form.SetContainer(+##this)
 q result
]]></Implementation>
</Method>

<Method name="DesignDefinition">
<Language>cache</Language>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 ;object DesignForm: TDesignForm
 ;  Left = 0
 ;  Top = 0
 ;  Width = 327
 ;  Height = 302
 ;  Caption = 'DesignForm'
 ;  Color = clBtnFace
 ;  Font.Charset = DEFAULT_CHARSET
 ;  Font.Color = clWindowText
 ;  Font.Height = -11
 ;  Font.Name = 'MS Sans Serif'
 ;  Font.Style = []
 ;  OldCreateOrder = False
 ;  Visible = True
 ;  PixelsPerInch = 96
 ;  TextHeight = 13
 ;end
]]></Implementation>
</Method>

<Method name="Destroy">
<Language>cache</Language>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q
]]></Implementation>
</Method>

<Method name="Initialization">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<PublicList>MApplication</PublicList>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[
 s MApplication.ClientState="Loading"
 d ..LoadResources()
 s ..Form=##class(%Library.TMForm).%New(initvalue)
 s MApplication.ClientState="NoWait"
 ;s ..Form.Visible="False"
 d ..Form.SetMultiProperty($lb("Left","Top","Width","Height","Caption","Color","OldCreateOrder","PixelsPerInch"),$lb(0,0,327,302,"DesignForm",$$$clBtnFace,"False",96),$lb(0,0,0,0,0,0,0,0))
 d ..Form.Font.SetMultiProperty($lb("Charset","Color","Height","Name","Style"),$lb($$$DEFAULTCHARSET,$$$clWindowText,-11,"MS Sans Serif",$lb()))
 s MApplication.ClientState="Wait"
 q
]]></Implementation>
</Method>

<Method name="LoadResources">
<Language>cache</Language>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q
]]></Implementation>
</Method>

<Method name="OnCreate">
<FormalSpec>initvalue:%String=""</FormalSpec>
<Language>cache</Language>
<ReturnType>%Status</ReturnType>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>


<Class name="%ZSMWrap.Template.Persistent">
<Language>cache</Language>
<Super>%Library.Persistent</Super>
<TimeCreated>64692,59419.22201</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^%ZSMWrap.Template.PersistentD</DataLocation>
<DefaultData>PersistentDefaultData</DefaultData>
<IdLocation>^%ZSMWrap.Template.PersistentD</IdLocation>
<IndexLocation>^%ZSMWrap.Template.PersistentI</IndexLocation>
<StreamLocation>^%ZSMWrap.Template.PersistentS</StreamLocation>
<Data name="PersistentDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="%ZSMWrap.Template.Registered">
<IncludeCode/>
<Language>cache</Language>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>64692,59437.91115</TimeCreated>
</Class>


<Class name="%ZSMWrap.Template.SerialObject">
<Language>cache</Language>
<Super>%Library.SerialObject</Super>
<TimeCreated>64621,58447.772797</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<StreamLocation>^%ZSMWrap.TempB263.SerialObjectS</StreamLocation>
</Storage>
</Class>


<Class name="%ZSMWrap.Template.ShadowControl">
<IncludeCode/>
<Language>cache</Language>
<Super>%SYS.Task.Definition</Super>
<TimeCreated>64621,58405.513933</TimeCreated>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[   quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="%ZSMWrap.Template.WebForm">
<Language>cache</Language>
<Super>%Library.TMWebFormClass</Super>
<TimeCreated>64646,42146.553754</TimeCreated>
</Class>


<Class name="%ZSMWrap.Template.WebSocketServer">
<IncludeCode/>
<Language>cache</Language>
<Super>%CSP.WebSocket</Super>
<TimeCreated>64621,58523.142602</TimeCreated>

<Method name="OnPreServer">
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[   Quit $$$OK
]]></Implementation>
</Method>

<Method name="Server">
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
    Set $ZT="Error"
    Set timeout=10
    Set status=..Write("Welcome to Cache WebSocket. NameSpace: "_$NameSpace)
    For  {
      Set len=32656
      Set data=..Read(.len, .status, timeout)
      If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketClosed Quit
      If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketTimeout {
         Set data="Timeout after "_timeout_" seconds"_" occurred on "_$ZDate(+$Horolog,2)_" at "_$ZTime($Piece($Horolog,",",2),3)
         Set status=..Write(data)
      }else {
           If data="exit" Quit
           Set data="'"_data_"'"_" (length="_len_") recieved on "_$ZDate(+$Horolog,2)_" at "_$ZTime($Piece($Horolog,",",2),3)_" NameSpace="_$NameSpace
           Set status=..Write(data)
        }
    }
   Set status=..EndServer()
   Quit $$$OK
Error // Error
   Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPostServer">
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[  Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="%ZSMWrap.Template.XDataHTML">
<IncludeCode/>
<Language>cache</Language>
<Super>%CSP.Page</Super>
<TimeCreated>64692,59308.609528</TimeCreated>

<Parameter name="Typ">
<Default>html</Default>
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
     Set xdataID=##this_"||"_%request.Get("content")
     Set compiledXdata=##class(%Dictionary.CompiledXData).%OpenId(xdataID)
     for  {
       q:compiledXdata.Data.AtEnd
       d ..ExecFrag(compiledXdata.Data.Read(32000) ,"#(", ")#" )
     }
     Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExecFrag">
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[
     q:SrcCode=""
     q:Beg=""
     q:End=""
     for ind=1:1:$l(SrcCode,End){
        s tmp=$p(SrcCode,End,ind)
        s Html=$p(tmp,Beg,1)
        s Code=$p(tmp,Beg,2)
        d ..ExecBigFrag(Html,"<server>","</server>")
        TRY {
           x Code
        } CATCH ErrorHandle { 
           zw ErrorHandle 
        }
     }
]]></Implementation>
</Method>

<Method name="ExecBigFrag">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[SrcCode="",Beg="<server>",End="</server>"]]></FormalSpec>
<Implementation><![CDATA[
	
     q:SrcCode=""
     q:Beg=""
     q:End=""
     for ind=1:1:$l(SrcCode,End){
         s tmp=$p(SrcCode,End,ind)
         s Html=$p(tmp,Beg,1)
         s Code=$p(tmp,Beg,2)
         w Html
         D $SYSTEM.Process.NullSubscripts(0)
         s MacName=$Replace(##THIS,".","")
         s MacName=$Replace(MacName,"%","")
         s MacName="mtempXDataHTML"_MacName_"Fragment"_$JOB_""
         s routine =##class(%Routine).%New(MacName)
         if routine="" {
	        w MacName,!
	        w Code
         } else {
            D routine.Write($c(13,10)_" ; d ^"_MacName_$c(13,10))
            d routine.WriteLine(Code) 
            k ^SPOOL($job) 
            O 2:($job)   U 2:($job)
            Do routine.Compile() ;
            c 2:($job)  
            Do routine.%Close()
            k ^SPOOL($job) 
            u 0
            TRY {  x " d ^"_MacName   } CATCH ErrorHandle {         }
            Do routine.Delete(MacName_".MAC")	
         }
    }
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
    s typ=..#Typ
    if $d(%request.Data("typ",1))
    {
      s typ=%request.Data("typ",1)  
    }
    Do %response.SetHeader("Content-Type",..ContentType(typ))     
    s content="ContentHTML"
    if $d(%request.Data("content",1))
    {
       s content=%request.Get("content",1)  
    }else{
       d %request.Set("content",content)
    }
    if $d(%request.Data("download",1))
    {
       Do %response.SetHeader("Content-Disposition: attachment; filename=",##this_"."_..#Typ) 
       q 1  
    }
    q 1
]]></Implementation>
</Method>

<Method name="ContentType">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
  s rashirenie=$p(FileName ,".", $l(FileName,"."))
  q:rashirenie="html" "text/html"
  q:rashirenie="htm" "text/html"
  q:rashirenie="css" "text/css"
  q:rashirenie="js" "application/javascript"
  q:rashirenie="txt" "text/plain"
  q:rashirenie="bmp" "image/bmp"
  q:rashirenie="jpg" "image/jpeg"
  q:rashirenie="png" "image/png"
  q:rashirenie="xls" "application/x-excel"
  q:rashirenie="tif" "image/x-tiff"
  q:rashirenie="xml" "text/xml"
  q:rashirenie="zip" "application/zip"
  q "application/octet-stream"
]]></Implementation>
</Method>

<XData name="ContentHTML">
<Description>
???????µ???¶???????µ HTML ???????°????????</Description>
<Data><![CDATA[
<html>
<head>
<!-- Put your page Title here -->
<title>	Cache Server Page </title>
</head>
<body>
   <!-- Put your page code here -->
   <br/> ???µ?»?? ???????°????????
   <br/>?????????»???????? ???????????????????????? ???µ?????????°?»???????? ???????°??????  Cache` 
   <pre>
    <br/> ----------------------------
    <br/> ?????µ????  #( W $ZDt($h) )#
    <br/> ???µ?????µ?? #( W $ZU(110) )#
    <br/> ???»???µ???? #( s I=$ZU(111,0),ip=$A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)_":"_($A(I,5)*256+$A(I,6))  w ip    )#
    <br/> ----------------------------
   </pre>
    <server>
       for a=1:1:100 {
          w a,!,"<br/>"
       }
    </server>
</body>
</html>
]]></Data>
</XData>
</Class>


<Global>
<Node><Sub>^%ZSMTemplate</Sub>
<Node><Sub>%Persistent-Stored class</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.Persistent</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Can be stored in a database</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>CSP file</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.Csp</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Applies to handle HTTP events</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>Castum: Empty class without super classes</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.Castum</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>An empty class with any set of inheritance.</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>Class CSP Html (%ZHTML.CacheLib )</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.CspCacheLib</Data>
</Node>
<Node><Sub>Description</Sub>
<DataCrLf><![CDATA[CSP class template with attached library %ZHTML.CacheLib

1) An example of writing a JS method
2) Synchronous and Asynchronous call of the class method Cache`
]]></DataCrLf>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>SIRENA</Data>
</Node>
</Node>
<Node><Sub>Class Prototyp Html  (  %ZHTML.CacheLib  )</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.PrototypHTML</Data>
</Node>
<Node><Sub>Description</Sub>
<DataCrLf><![CDATA[HTML element class template  

1) You must rename the constructor method. The name of the constructor method must match the class name

Example of use:
<html>
<head>
<title>	Cache Server Page </title>
</head>
<body>
 <script src='%25ZHTML.CacheLib.cls' type='text/javascript' ></script>
 <script src='User.Prototyp3.cls' type='text/javascript' ></script>
 <my-input>222222</my-input>
</body>
</html>

]]></DataCrLf>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>SIRENA</Data>
</Node>
</Node>
<Node><Sub>Class Prototyp JS (%ZHTML.CacheLib )</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.PrototypJS</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>SIRENA</Data>
</Node>
</Node>
<Node><Sub>Library.Registered - Not stored class</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.Registered</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Can not be stored in database</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>Library.Serial </Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.SerialObject</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Can be built into Persistent objects</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>Persistent Class</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.Persistent</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>A persistent class (Cache &apos;Table)</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>SMWrap form (Designer)</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.Form</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Class form for SMWrap player</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>Shadow Controll</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.ShadowControl</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Process Shadow Processor Controller</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
<Node><Sub>XData page</Sub>
<Node><Sub>ClassName</Sub>
<Data>%ZSMWrap.Template.XDataHTML</Data>
</Node>
<Node><Sub>Description</Sub>
<Data>Applies to handle HTTP events</Data>
</Node>
<Node><Sub>NameSpace</Sub>
<Data>USER</Data>
</Node>
</Node>
</Node>
</Global>


<Routine name="Convert2012" type="MAC" languagemode="0"><![CDATA[
Convert2012
 q
#; РљРѕРЅРІРµСЂС‚Р°С†РёСЏ РєР»Р°СЃСЃРѕРІ
#; d ConvertClasses^Convert2012()
ConvertClasses() public {
 d $system.OBJ.Upgrade()
 s ClassName="" f  s ClassName=$o(^oddDEF(ClassName)) q:ClassName=""  i $e(ClassName)'="%" d  k Class w !,ClassName,Text
  . s Text=""
  . s Class=##class(%Dictionary.ClassDefinition).%OpenId(ClassName)
  . s needSave=$$RepairMethods(Class)
  . i needSave s Text=" replace"
  . i Class.ClassType="serial",$$RepairSerial(Class) s needSave=1,Text=Text_" storage"
  . i needSave d Class.%Save(1) 
 d CompileAll^%apiOBJ("brd")
 q 1
}
#; РСЃРїСЂР°РІР»СЏРµРј Storage.Data.Structure - С‚СѓС‚ С‚РµРїРµСЂСЊ РЅРµ list Р° nodelist (РёР»Рё РїСѓСЃС‚Рѕ)
#; list РїРѕРґСЃС‚Р°РІР»СЏРµС‚ Makova Developer РїСЂРё СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёРё РєР»Р°СЃСЃР°.
RepairSerial(Class) public {
 s needSave=0
 f i=1:1:Class.Storages.Count() s Storage=Class.Storages.GetAt(i) d
  . f j=1:1:Storage.Data.Count()  s Data=Storage.Data.GetAt(j) d
   .. i Data.Structure="list" s Data.Structure="",needSave=1
 q needSave
}
RepairMethods(Class) public {
 s needSave=0
 s PackName=$p(Class.Name,".",1,$l(Class.Name,".")-1)
 f i=1:1:Class.Methods.Count() i $$RepairOneMethod(Class.Methods.GetAt(i),PackName) s needSave=1
 q needSave
}
RepairOneMethod(Method,PackName) public {
 s needSave=0
 i $zcvt(Method.CodeMode,"L")["generator" q needSave
 s Stream=##class(%GlobalCharacterStream).%New()
 f  q:Method.Implementation.AtEnd  s Text=Method.Implementation.Read(30000) d  d Stream.Write(Text)
  . i $$ReplaceText(.Text,PackName) s needSave=1
 i needSave d Method.Implementation.Clear() d
  . d Stream.Rewind()
  . f  q:Stream.AtEnd  d Method.Implementation.Write(Stream.Read(30000))
 d Stream.Clear()
 q needSave
}
ReplaceText(Text,PackName) public {
 s (needSave,Pos)=0
 f  s Pos=$find(Text,"##class(",Pos) q:'Pos  d
  . s className=$p($e(Text,Pos,$l(Text)),")")
  . i className["." q  ; С‚СѓС‚ РїР°РєРµС‚ СѓРєР°Р·Р°РЅ
  . i className["_" q  ; СЌС‚Рѕ СЃРєРѕСЂРµРµ РІСЃРµРіРѕ СЌРєР·РµРєСѓС‚РёРІ С‚РёРїР° x "d ##class("_Type_").%New()"
  . i className["=" q  ; СЌС‚Рѕ СЃРєРѕСЂРµРµ РІСЃРµРіРѕ РєРѕРЅСЃС‚СЂСѓРєС†РёСЏ С‚РёРїР° d ##class(=eOrderString)####this...
  . i $e(className)="%" q
  . i ##class(%ClassDefinition).%ExistsId(PackName_"."_className) q  ; Р­С‚РѕС‚ РєР»Р°СЃСЃ РїСЂРёСЃСѓС‚СЃС‚РІСѓРµС‚ РІ С‚РµРєСѓС‰РµРј РїР°РєРµС‚Рµ
  . s $e(Text,Pos,Pos+$l(className)-1)="User."_className
  . s needSave=1
 q needSave
}
]]></Routine>


<Routine name="MAKOVA" type="MAC" languagemode="0"><![CDATA[
    /*
    zn "%SYS"
    d export^MAKOVA("C:\TEMP\SMWRap\smwrap\SMWServerInstall\CreateFileXML\SMWrap.xml")
    
    d ExportUDL^MAKOVA("C:\Temp\SMWRap\smwrap\SMWrapClassesUDL\")
    
    */
export(path)
 ;  d RUN^%ZMRPMD("E:\!5autoexport\myasnikovia\MakovaBackUp\")
 ;  d RUN^%ZMRPMD("C:\BackUp\")
 ;  d HALT^%ZMRPMD 
 ;  d HALT^%ZMRPMD    ; РћСЃС‚Р°РЅРѕРІРёС‚СЊ СЃРµСЂРІРµСЂ
 ;  d CONFIG^%ZMRPMD
     k all
     s all("MAKOVA.MAC")=""
     s all("MAKOVABIN.MAC")=""
     s all("Convert2012.MAC")=""
   ; 
   ; РЎРµСЂРІРµСЂ 
     s all("%Const.INC")=""
     s all("%ZConst.INC")=""
     s all("ZMRDEF.INC")=""
     s all("%ZMRASD.MAC")=""
     s all("%ZMRAUTH.MAC")=""
     s all("%ZMREVENT.MAC")=""
     s all("%ZMRINS.MAC")=""
     s all("%ZMRPMD.MAC")=""
     s all("%ZMRSMGR.MAC")=""
     s all("%ZGLEXIM.MAC")=""
     s all("%ZMRProgramCosta.MAC")=""
     s all("%ZMRProgramAuthor.MAC")=""
     s all("%ZMRMStudioHooks.mac")=""
     
   
     s all("%ZSMWrap.Class.CLS")=""
     ;  s all("%ZSMWrap.Utility.CLS")=""
     ;  s all("%ZSMWrap.Client.CLS")="" 
     s all("%ZSMWrap.Server.CLS")="" 
   
     s all("%ZSMWrap.Template.Castum.CLS")=""
     s all("%ZSMWrap.Template.Csp.CLS")=""
     s all("%ZSMWrap.Template.Form.CLS")=""
     s all("%ZSMWrap.Template.Persistent.CLS")=""
     s all("%ZSMWrap.Template.Registered.CLS")=""
     s all("%ZSMWrap.Template.SerialObject.CLS")=""
     s all("%ZSMWrap.Template.ShadowControl.CLS")=""
     s all("%ZSMWrap.Template.WebSocketServer.CLS")=""
     s all("%ZSMWrap.Template.XDataHTML.CLS")=""
     s all("%ZSMWrap.Template.WebForm.CLS")=""
   
     s all("^%ZSMTemplate.GBL")=""   
     
   ;
   ;   s all("SMProject.GBL")=""     ; Р“Р»РѕР±Р°Р»СЊ РІ РєРѕС‚РѕСЂРѕР№ С…СЂР°РЅРёС‚СЃСЏ  РѕРїРёСЃР°РЅРёРµ РїСЂРѕРµРєС‚РѕРІ
   ;   s all("User.zRunTest.CLS")="" ; РЎС‚Р°СЂС‚РѕРІС‹Р№ РєР»Р°СЃСЃ
   ;
   ; РєР»Р°СЃСЃС‹ РњРђРљРћР’Рђ
     s all("%Library.SMProject.cls")=""
     s all("%Library.TMWebFormClass.CLS")=""
     s all("%Library.TMApplication.cls")=""
     s all("%Library.TMAreaSeries.cls")=""
     s all("%Library.TMArrowSeries.cls")=""
     s all("%Library.TMAsync.cls")=""
     s all("%Library.TMBarSeries.cls")=""
     s all("%Library.TMBevel.cls")=""
     s all("%Library.TMBitmap.cls")=""
     s all("%Library.TMBrush.cls")=""
     s all("%Library.TMBubbleSeries.cls")=""
     s all("%Library.TMButton.cls")=""
     s all("%Library.TMButtonGrid.cls")=""
     s all("%Library.TMCanvas.cls")=""
     s all("%Library.TMChart.cls")=""
     s all("%Library.TMChartAxis.cls")=""
     s all("%Library.TMChartAxisTitle.cls")=""
     s all("%Library.TMChartGradient.cls")=""
     s all("%Library.TMChartLegend.cls")=""
     s all("%Library.TMChartPen.cls")=""
     s all("%Library.TMChartSeries.cls")=""
     s all("%Library.TMChartShape.cls")=""
     s all("%Library.TMChartTitle.cls")=""
     s all("%Library.TMChartValueList.cls")=""
     s all("%Library.TMChartWall.cls")=""
     s all("%Library.TMCheckBox.cls")=""
     s all("%Library.TMCheckListBox.cls")=""
     s all("%Library.TMClientDataSet.cls")=""
     s all("%Library.TMColorDialog.cls")=""
     s all("%Library.TMComboBox.cls")=""
     s all("%Library.TMComBuffer.cls")=""
     s all("%Library.TMComFlowControl.cls")=""
     s all("%Library.TMComParity.cls")=""
     s all("%Library.TMComPort.cls")=""
     s all("%Library.TMCompositeReport.cls")=""
     s all("%Library.TMComTimeouts.cls")=""
     s all("%Library.TMControl.cls")=""
     s all("%Library.TMControlScrollBar.cls")=""
     s all("%Library.TMConverter.cls")=""
     s all("%Library.TMCustomBarSeries.cls")=""
     s all("%Library.TMCustomSeries.cls")=""
     s all("%Library.TMDataSet.cls")=""
     s all("%Library.TMDataSource.cls")=""
     s all("%Library.TMDateEdit.cls")=""
     s all("%Library.TMDBCheckBox.cls")=""
     s all("%Library.TMDBComboBox.cls")=""
     s all("%Library.TMDBDateEdit.cls")=""
     s all("%Library.TMDBEdit.cls")=""
     s all("%Library.TMDBGrid.cls")=""
     s all("%Library.TMDBImage.cls")=""
     s all("%Library.TMDBLabel.cls")=""
     s all("%Library.TMDBListBox.cls")=""
     s all("%Library.TMDBLookupComboBox.cls")=""
     s all("%Library.TMDBLookupListBox.cls")=""
     s all("%Library.TMDBMemo.cls")=""
     s all("%Library.TMDBNumberEdit.cls")=""
     s all("%Library.TMDBRadioGroup.cls")=""
     s all("%Library.TMDock.cls")=""
     s all("%Library.TMEdit.cls")=""
     s all("%Library.TMFastLineSeries.cls")=""
     s all("%Library.TMFDesigner.cls")=""
     s all("%Library.TMFieldDef.cls")=""
     s all("%Library.TMFieldDefs.cls")=""
     s all("%Library.TMFileStream.cls")=""
     s all("%Library.TMFont.cls")=""
     s all("%Library.TMFontDialog.cls")=""
     s all("%Library.TMForm.cls")=""
     s all("%Library.TMFormClass.cls")=""
     s all("%Library.TMFReport.cls")=""
     s all("%Library.TMGanttSeries.cls")=""
     s all("%Library.TMGaugeAttrs.cls")=""
     s all("%Library.TMGraphic.cls")=""
     s all("%Library.TMGridColumn.cls")=""
     s all("%Library.TMGridColumns.cls")=""
     s all("%Library.TMGroupBox.cls")=""
     s all("%Library.TMHorizBarSeries.cls")=""
     s all("%Library.TMIcon.cls")=""
     s all("%Library.TMIconOptions.cls")=""
     s all("%Library.TMImage.cls")=""
     s all("%Library.TMImageList.cls")=""
     s all("%Library.TMLabel.cls")=""
     s all("%Library.TMLineSeries.cls")=""
     s all("%Library.TMListBox.cls")=""
     s all("%Library.TMListColumn.cls")=""
     s all("%Library.TMListColumns.cls")=""
     s all("%Library.TMListItem.cls")=""
     s all("%Library.TMListItems.cls")=""
     s all("%Library.TMListView.cls")=""
     s all("%Library.TMLocator.cls")=""
     s all("%Library.TMMainMenu.cls")=""
     s all("%Library.TMMemo.cls")=""
     s all("%Library.TMMenuItem.cls")=""
     s all("%Library.TMNotebook.cls")=""
     s all("%Library.TMNumberEdit.cls")=""
     s all("%Library.TMOleContainer.cls")=""
     s all("%Library.TMOleObject.cls")=""
     s all("%Library.TMOpenDialog.cls")=""
     s all("%Library.TMPage.cls")=""
     s all("%Library.TMPageControl.cls")=""
     s all("%Library.TMPaintBox.cls")=""
     s all("%Library.TMPanel.cls")=""
     s all("%Library.TMParaAttributes.cls")=""
     s all("%Library.TMPen.cls")=""
     s all("%Library.TMPersistent.cls")=""
     s all("%Library.TMPieOtherSlice.cls")=""
     s all("%Library.TMPieSeries.cls")=""
     s all("%Library.TMPointSeries.cls")=""
     s all("%Library.TMPopupMenu.cls")=""
     s all("%Library.TMPrintDialog.cls")=""
     s all("%Library.TMPrinter.cls")=""
     s all("%Library.TMPrinterSetupDialog.cls")=""
     s all("%Library.TMProgressBar.cls")=""
     s all("%Library.TMQuery.cls")=""
     s all("%Library.TMRadioButton.cls")=""
     s all("%Library.TMRadioGroup.cls")=""
     s all("%Library.TMRichEdit.cls")=""
     s all("%Library.TMRxDrawGrid.cls")=""
     s all("%Library.TMSaveDialog.cls")=""
     s all("%Library.TMScrollBar.cls")=""
     s all("%Library.TMScrollBox.cls")=""
     s all("%Library.TMSeriesMarks.cls")=""
     s all("%Library.TMSeriesPointer.cls")=""
     s all("%Library.TMShape.cls")=""
     s all("%Library.TMSizeConstraints.cls")=""
     s all("%Library.TMSpeedButton.cls")=""
     s all("%Library.TMSplitter.cls")=""
     s all("%Library.TMStatusBar.cls")=""
     s all("%Library.TMStatusPanel.cls")=""
     s all("%Library.TMStatusPanels.cls")=""
     s all("%Library.TMStringGrid.cls")=""
     s all("%Library.TMStringList.cls")=""
     s all("%Library.TMStrings.cls")=""
     s all("%Library.TMTabControl.cls")=""
     s all("%Library.TMTabSet.cls")=""
     s all("%Library.TMTabSheet.cls")=""
     s all("%Library.TMTextAttributes.cls")=""
     s all("%Library.TMTimer.cls")=""
     s all("%Library.TMToolbar.cls")=""
     s all("%Library.TMToolbarSep.cls")=""
     s all("%Library.TMTrackBar.cls")=""
     s all("%Library.TMTreeNode.cls")=""
     s all("%Library.TMTreeNodes.cls")=""
     s all("%Library.TMTreeView.cls")=""
     s all("%Library.TMView3DOptions.cls")=""
     s all("%Library.TMWinControl.cls")=""
     if $l(path)=0     d $system.OBJ.Export(.all,"C:\TEMP\SMWRap\ProjectSMWrap2017("_$REPLACE($zd(+$h,4),"/","-")_").xml")
     e  d $system.OBJ.Export(.all,path)
     k all
     q
delete(path)
      
       ; d ExportUDL^MAKOVA("C:\Temp\SMWRap\smwrap\SMWrapClassesUDL\")
ExportUDL(path="C:\Temp\SMWRap\smwrap\SMWrapClassesUDL\")      
   d $system.OBJ.ExportUDL("%ZMSrv.Controller.CLS", path_"%ZMSrv.Controller.CLS","/diffexport")
   k all
   d $system.OBJ.ExportUDL("MAKOVA.MAC", path_"MAKOVA.MAC","/diffexport")
   d $system.OBJ.ExportUDL("MAKOVABIN.MAC", path_"MAKOVABIN.MAC","/diffexport")
   d $system.OBJ.ExportUDL("Convert2012.MAC", path_"Convert2012.MAC","/diffexport")
   ; 
   d $system.OBJ.ExportUDL("%Const.INC", path_"%Const.INC","/diffexport")
   d $system.OBJ.ExportUDL("%ZConst.INC", path_"%ZConst.INC","/diffexport")
   d $system.OBJ.ExportUDL("ZMRDEF.INC", path_"ZMRDEF.INC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRASD.MAC", path_"%ZMRASD.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRAUTH.MAC", path_"%ZMRAUTH.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMREVENT.MAC", path_"%ZMREVENT.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRINS.MAC", path_"%ZMRINS.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRPMD.MAC", path_"%ZMRPMD.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRSMGR.MAC", path_"%ZMRSMGR.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZGLEXIM.MAC", path_"%ZGLEXIM.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRProgramCosta.MAC", path_"%ZMRProgramCosta.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRProgramAuthor.MAC", path_"%ZMRProgramAuthor.MAC","/diffexport")
   d $system.OBJ.ExportUDL("%ZMRMStudioHooks.MAC", path_"%ZMRMStudioHooks.MAC","/diffexport")
     
   
   d $system.OBJ.ExportUDL("%ZSMWrap.Class.CLS", path_"%ZSMWrap.Class.CLS","/diffexport")
     ;  s all("%ZSMWrap.Utility.CLS", path,"/diffexport")
     ;  s all("%ZSMWrap.Client.CLS", path,"/diffexport") 
   d $system.OBJ.ExportUDL("%ZSMWrap.Server.CLS", path_"%ZSMWrap.Server.CLS","/diffexport") 
   
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.Castum.CLS", path_"%ZSMWrap.Template.Castum.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.Csp.CLS", path_"%ZSMWrap.Template.Csp.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.Form.CLS", path_"%ZSMWrap.Template.Form.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.Persistent.CLS", path_"%ZSMWrap.Template.Persistent.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.Registered.CLS", path_"%ZSMWrap.Template.Registered.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.SerialObject.CLS", path_"%ZSMWrap.Template.SerialObject.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.ShadowControl.CLS", path_"%ZSMWrap.Template.ShadowControl.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.WebSocketServer.CLS", path_"%ZSMWrap.Template.WebSocketServer.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.XDataHTML.CLS", path_"%ZSMWrap.Template.XDataHTML.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%ZSMWrap.Template.WebForm.CLS", path_"%ZSMWrap.Template.WebForm.CLS","/diffexport")
   
   d $system.OBJ.Export("^%ZSMTemplate.GBL", path_"^%ZSMTemplate.XML","/diffexport")   
   ;
   ;   s all("SMProject.GBL", path,"/diffexport")     ; Р“Р»РѕР±Р°Р»СЊ РІ РєРѕС‚РѕСЂРѕР№ С…СЂР°РЅРёС‚СЃСЏ  РѕРїРёСЃР°РЅРёРµ РїСЂРѕРµРєС‚РѕРІ
   ;   s all("User.zRunTest.CLS", path,"/diffexport") ; РЎС‚Р°СЂС‚РѕРІС‹Р№ РєР»Р°СЃСЃ
   ;
   ; РєР»Р°СЃСЃС‹ РњРђРљРћР’Рђ
   d $system.OBJ.ExportUDL("%Library.SMProject.cls", path_"%Library.SMProject.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMWebFormClass.CLS", path_"%Library.TMWebFormClass.CLS","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMApplication.cls", path_"%Library.TMApplication.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMAreaSeries.cls", path_"%Library.TMAreaSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMArrowSeries.cls", path_"%Library.TMArrowSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMAsync.cls", path_"%Library.TMAsync.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMBarSeries.cls", path_"%Library.TMBarSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMBevel.cls", path_"%Library.TMBevel.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMBitmap.cls", path_"%Library.TMBitmap.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMBrush.cls", path_"%Library.TMBrush.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMBubbleSeries.cls", path_"%Library.TMBubbleSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMButton.cls", path_"%Library.TMButton.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMButtonGrid.cls", path_"%Library.TMButtonGrid.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMCanvas.cls", path_"%Library.TMCanvas.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChart.cls", path_"%Library.TMChart.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartAxis.cls", path_"%Library.TMChartAxis.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartAxisTitle.cls", path_"%Library.TMChartAxisTitle.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartGradient.cls", path_"%Library.TMChartGradient.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartLegend.cls", path_"%Library.TMChartLegend.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartPen.cls", path_"%Library.TMChartPen.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartSeries.cls", path_"%Library.TMChartSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartShape.cls", path_"%Library.TMChartShape.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartTitle.cls", path_"%Library.TMChartTitle.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartValueList.cls", path_"%Library.TMChartValueList.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMChartWall.cls", path_"%Library.TMChartWall.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMCheckBox.cls", path_"%Library.TMCheckBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMCheckListBox.cls", path_"%Library.TMCheckListBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMClientDataSet.cls", path_"%Library.TMClientDataSet.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMColorDialog.cls", path_"%Library.TMColorDialog.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMComboBox.cls", path_"%Library.TMComboBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMComBuffer.cls", path_"%Library.TMComBuffer.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMComFlowControl.cls", path_"%Library.TMComFlowControl.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMComParity.cls", path_"%Library.TMComParity.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMComPort.cls", path_"%Library.TMComPort.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMCompositeReport.cls", path_"%Library.TMCompositeReport.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMComTimeouts.cls", path_"%Library.TMComTimeouts.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMControl.cls", path_"%Library.TMControl.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMControlScrollBar.cls", path_"%Library.TMControlScrollBar.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMConverter.cls", path_"%Library.TMConverter.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMCustomBarSeries.cls", path_"%Library.TMCustomBarSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMCustomSeries.cls", path_"%Library.TMCustomSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDataSet.cls", path_"%Library.TMDataSet.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDataSource.cls", path_"%Library.TMDataSource.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDateEdit.cls", path_"%Library.TMDateEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBCheckBox.cls", path_"%Library.TMDBCheckBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBComboBox.cls", path_"%Library.TMDBComboBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBDateEdit.cls", path_"%Library.TMDBDateEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBEdit.cls", path_"%Library.TMDBEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBGrid.cls", path_"%Library.TMDBGrid.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBImage.cls", path_"%Library.TMDBImage.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBLabel.cls", path_"%Library.TMDBLabel.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBListBox.cls", path_"%Library.TMDBListBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBLookupComboBox.cls", path_"%Library.TMDBLookupComboBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBLookupListBox.cls", path_"%Library.TMDBLookupListBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBMemo.cls", path_"%Library.TMDBMemo.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBNumberEdit.cls", path_"%Library.TMDBNumberEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDBRadioGroup.cls", path_"%Library.TMDBRadioGroup.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMDock.cls", path_"%Library.TMDock.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMEdit.cls", path_"%Library.TMEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFastLineSeries.cls", path_"%Library.TMFastLineSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFDesigner.cls", path_"%Library.TMFDesigner.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFieldDef.cls", path_"%Library.TMFieldDef.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFieldDefs.cls", path_"%Library.TMFieldDefs.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFileStream.cls", path_"%Library.TMFileStream.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFont.cls", path_"%Library.TMFont.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFontDialog.cls", path_"%Library.TMFontDialog.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMForm.cls", path_"%Library.TMForm.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFormClass.cls", path_"%Library.TMFormClass.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMFReport.cls", path_"%Library.TMFReport.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMGanttSeries.cls", path_"%Library.TMGanttSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMGaugeAttrs.cls", path_"%Library.TMGaugeAttrs.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMGraphic.cls", path_"%Library.TMGraphic.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMGridColumn.cls", path_"%Library.TMGridColumn.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMGridColumns.cls", path_"%Library.TMGridColumns.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMGroupBox.cls", path_"%Library.TMGroupBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMHorizBarSeries.cls", path_"%Library.TMHorizBarSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMIcon.cls", path_"%Library.TMIcon.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMIconOptions.cls", path_"%Library.TMIconOptions.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMImage.cls", path_"%Library.TMImage.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMImageList.cls", path_"%Library.TMImageList.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMLabel.cls", path_"%Library.TMLabel.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMLineSeries.cls", path_"%Library.TMLineSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMListBox.cls", path_"%Library.TMListBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMListColumn.cls", path_"%Library.TMListColumn.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMListColumns.cls", path_"%Library.TMListColumns.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMListItem.cls", path_"%Library.TMListItem.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMListItems.cls", path_"%Library.TMListItems.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMListView.cls", path_"%Library.TMListView.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMLocator.cls", path_"%Library.TMLocator.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMMainMenu.cls", path_"%Library.TMMainMenu.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMMemo.cls", path_"%Library.TMMemo.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMMenuItem.cls", path_"%Library.TMMenuItem.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMNotebook.cls", path_"%Library.TMNotebook.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMNumberEdit.cls", path_"%Library.TMNumberEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMOleContainer.cls", path_"%Library.TMOleContainer.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMOleObject.cls", path_"%Library.TMOleObject.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMOpenDialog.cls", path_"%Library.TMOpenDialog.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPage.cls", path_"%Library.TMPage.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPageControl.cls", path_"%Library.TMPageControl.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPaintBox.cls", path_"%Library.TMPaintBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPanel.cls", path_"%Library.TMPanel.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMParaAttributes.cls"_"%Library.TMParaAttributes.cls", path,"/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPen.cls", path_"%Library.TMPen.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPersistent.cls", path_"%Library.TMPersistent.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPieOtherSlice.cls", path_"%Library.TMPieOtherSlice.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPieSeries.cls", path_"%Library.TMPieSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPointSeries.cls", path_"%Library.TMPointSeries.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPopupMenu.cls", path_"%Library.TMPopupMenu.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPrintDialog.cls", path_"%Library.TMPrintDialog.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPrinter.cls", path_"%Library.TMPrinter.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMPrinterSetupDialog.cls", path_"%Library.TMPrinterSetupDialog.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMProgressBar.cls", path_"%Library.TMProgressBar.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMQuery.cls", path_"%Library.TMQuery.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMRadioButton.cls", path_"%Library.TMRadioButton.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMRadioGroup.cls", path_"%Library.TMRadioGroup.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMRichEdit.cls", path_"%Library.TMRichEdit.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMRxDrawGrid.cls", path_"%Library.TMRxDrawGrid.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMSaveDialog.cls", path_"%Library.TMSaveDialog.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMScrollBar.cls", path_"%Library.TMScrollBar.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMScrollBox.cls", path_"%Library.TMScrollBox.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMSeriesMarks.cls", path_"%Library.TMSeriesMarks.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMSeriesPointer.cls", path_"%Library.TMSeriesPointer.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMShape.cls", path_"%Library.TMShape.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMSizeConstraints.cls", path_"%Library.TMSizeConstraints.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMSpeedButton.cls", path_"%Library.TMSpeedButton.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMSplitter.cls", path_"%Library.TMSplitter.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMStatusBar.cls", path_"%Library.TMStatusBar.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMStatusPanel.cls", path_"%Library.TMStatusPanel.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMStatusPanels.cls", path_"%Library.TMStatusPanels.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMStringGrid.cls", path_"%Library.TMStringGrid.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMStringList.cls", path_"%Library.TMStringList.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMStrings.cls", path_"%Library.TMStrings.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTabControl.cls", path_"%Library.TMTabControl.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTabSet.cls", path_"%Library.TMTabSet.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTabSheet.cls", path_"%Library.TMTabSheet.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTextAttributes.cls", path_"%Library.TMTextAttributes.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTimer.cls", path_"%Library.TMTimer.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMToolbar.cls", path_"%Library.TMToolbar.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMToolbarSep.cls", path_"%Library.TMToolbarSep.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTrackBar.cls", path_"%Library.TMTrackBar.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTreeNode.cls", path_"%Library.TMTreeNode.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTreeNodes.cls", path_"%Library.TMTreeNodes.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMTreeView.cls", path_"%Library.TMTreeView.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMView3DOptions.cls", path_"%Library.TMView3DOptions.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMWinControl.cls", path_"%Library.TMWinControl.cls","/diffexport")
   d $system.OBJ.ExportUDL("%Library.TMParaAttributes.cls", path_"%Library.TMParaAttributes.cls","/diffexport")
   
   
   q 

]]></Routine>


<Routine name="MAKOVABIN" type="MAC" languagemode="0"><![CDATA[
    /*
    zn "%SYS"
    d export^MAKOVABIN("")
    */
export(path)
 ;  d RUN^%ZMRPMD("E:\!5autoexport\myasnikovia\MakovaBackUp\")
 ;  d RUN^%ZMRPMD("C:\BackUp\")
 ;  d RUN^%ZMRPMD     ; Р·Р°РїСѓСЃРє СЃРµСЂРІРµСЂР°
 ;  d HALT^%ZMRPMD    ; РћСЃС‚Р°РЅРѕРІРёС‚СЊ СЃРµСЂРІРµСЂ
 ;  d CONFIG^%ZMRPMD
     k all
     s all("MAKOVABIN.MAC")=""
    ; 
    ; РЎРµСЂРІРµСЂ 
     ; s all("%Const.INC")=""
     s all("%Const.MAC")=""
     s all("%ZConst.INC")=""
     s all("%ZMRAUTH.OBJ")=""
     s all("ZMRDEF.INC")=""
     s all("%ZMRASD.OBJ")=""
     s all("%ZMRAUTH.MAC")=""
     s all("%ZMREVENT.OBJ")=""
     s all("%ZMRINS.OBJ")=""
     s all("%ZMRPMD.OBJ")=""
     s all("%ZMRSMGR.OBJ")=""
     s all("%ZGLEXIM.OBJ")=""
     s all("%ZMRProgramCosta.OBJ")=""
     s all("%ZMRProgramCosta.MAC")=""
     s all("%ZMRProgramAuthor.MAC")=""
     s all("%ZMRProgramAuthor.OBJ")=""
     s all("%ZMRMStudioHooks.mac")=""
     s all("%ZMRMStudioHooks.OBJ")=""
     
  ; РєР»Р°СЃСЃС‹ РґР»СЏ Cache2017        
     s all("%ZSMWrap.Class.CLS")=""
    ; s all("%ZSMWrap.Utility.CLS")=""
    ; s all("%ZSMWrap.Client.CLS")=""       ; РљР»РёРµРЅС‚  
     s all("%ZSMWrap.Server.CLS")=""       ; РђРІС‚РѕР·Р°РїСѓСЃРє СЃРµСЂРІРµСЂР°


    s all("%ZSMWrap.Template.Castum.CLS")=""
     s all("%ZSMWrap.Template.Csp.CLS")=""
     s all("%ZSMWrap.Template.Form.CLS")=""
     s all("%ZSMWrap.Template.Persistent.CLS")=""
     s all("%ZSMWrap.Template.Registered.CLS")=""
     s all("%ZSMWrap.Template.SerialObject.CLS")=""
     s all("%ZSMWrap.Template.ShadowControl.CLS")=""
     s all("%ZSMWrap.Template.WebSocketServer.CLS")=""
     s all("%ZSMWrap.Template.XDataHTML.CLS")=""
     s all("%ZSMWrap.Template.WebForm.CLS")=""

     s all("^%ZSMTemplate.GBL")=""   ; Р“Р»РѕР±Р°Р»СЊ РІ РєРѕС‚РѕСЂРѕР№ С…СЂР°РЅРёС‚СЃСЏ РѕРїРёСЃР°РЅРёРµ С€Р°Р±Р»РѕРЅРѕРІ РєР»Р°СЃСЃРѕРІ
 
     
   ;
   ; РїСЂРѕРµРєС‚
   ;   s all("SMProject.GBL")=""     ; Р“Р»РѕР±Р°Р»СЊ РІ РєРѕС‚РѕСЂРѕР№ С…СЂР°РЅРёС‚СЃСЏ  РѕРїРёСЃР°РЅРёРµ РїСЂРѕРµРєС‚РѕРІ
   ;   s all("User.zRunTest.CLS")="" ; РЎС‚Р°СЂС‚РѕРІС‹Р№ РєР»Р°СЃСЃ
   ;
   ; РєР»Р°СЃСЃС‹ РњРђРљРћР’Рђ
     s all("%Library.SMProject.cls")=""
     s all("%Library.TMApplication.cls")=""
     s all("%Library.TMAreaSeries.cls")=""
     s all("%Library.TMArrowSeries.cls")=""
     s all("%Library.TMAsync.cls")=""
     s all("%Library.TMBarSeries.cls")=""
     s all("%Library.TMBevel.cls")=""
     s all("%Library.TMBitmap.cls")=""
     s all("%Library.TMBrush.cls")=""
     s all("%Library.TMBubbleSeries.cls")=""
     s all("%Library.TMButton.cls")=""
     s all("%Library.TMButtonGrid.cls")=""
     s all("%Library.TMCanvas.cls")=""
     s all("%Library.TMChart.cls")=""
     s all("%Library.TMChartAxis.cls")=""
     s all("%Library.TMChartAxisTitle.cls")=""
     s all("%Library.TMChartGradient.cls")=""
     s all("%Library.TMChartLegend.cls")=""
     s all("%Library.TMChartPen.cls")=""
     s all("%Library.TMChartSeries.cls")=""
     s all("%Library.TMChartShape.cls")=""
     s all("%Library.TMChartTitle.cls")=""
     s all("%Library.TMChartValueList.cls")=""
     s all("%Library.TMChartWall.cls")=""
     s all("%Library.TMCheckBox.cls")=""
     s all("%Library.TMCheckListBox.cls")=""
     s all("%Library.TMClientDataSet.cls")=""
     s all("%Library.TMColorDialog.cls")=""
     s all("%Library.TMComboBox.cls")=""
     s all("%Library.TMComBuffer.cls")=""
     s all("%Library.TMComFlowControl.cls")=""
     s all("%Library.TMComParity.cls")=""
     s all("%Library.TMComPort.cls")=""
     s all("%Library.TMCompositeReport.cls")=""
     s all("%Library.TMComTimeouts.cls")=""
     s all("%Library.TMControl.cls")=""
     s all("%Library.TMControlScrollBar.cls")=""
     s all("%Library.TMConverter.cls")=""
     s all("%Library.TMCustomBarSeries.cls")=""
     s all("%Library.TMCustomSeries.cls")=""
     s all("%Library.TMDataSet.cls")=""
     s all("%Library.TMDataSource.cls")=""
     s all("%Library.TMDateEdit.cls")=""
     s all("%Library.TMDBCheckBox.cls")=""
     s all("%Library.TMDBComboBox.cls")=""
     s all("%Library.TMDBDateEdit.cls")=""
     s all("%Library.TMDBEdit.cls")=""
     s all("%Library.TMDBGrid.cls")=""
     s all("%Library.TMDBImage.cls")=""
     s all("%Library.TMDBLabel.cls")=""
     s all("%Library.TMDBListBox.cls")=""
     s all("%Library.TMDBLookupComboBox.cls")=""
     s all("%Library.TMDBLookupListBox.cls")=""
     s all("%Library.TMDBMemo.cls")=""
     s all("%Library.TMDBNumberEdit.cls")=""
     s all("%Library.TMDBRadioGroup.cls")=""
     s all("%Library.TMDock.cls")=""
     s all("%Library.TMEdit.cls")=""
     s all("%Library.TMFastLineSeries.cls")=""
     s all("%Library.TMFDesigner.cls")=""
     s all("%Library.TMFieldDef.cls")=""
     s all("%Library.TMFieldDefs.cls")=""
     s all("%Library.TMFileStream.cls")=""
     s all("%Library.TMFont.cls")=""
     s all("%Library.TMFontDialog.cls")=""
     s all("%Library.TMForm.cls")=""
     s all("%Library.TMFormClass.cls")=""
     s all("%Library.TMFReport.cls")=""
     s all("%Library.TMGanttSeries.cls")=""
     s all("%Library.TMGaugeAttrs.cls")=""
     s all("%Library.TMGraphic.cls")=""
     s all("%Library.TMGridColumn.cls")=""
     s all("%Library.TMGridColumns.cls")=""
     s all("%Library.TMGroupBox.cls")=""
     s all("%Library.TMHorizBarSeries.cls")=""
     s all("%Library.TMIcon.cls")=""
     s all("%Library.TMIconOptions.cls")=""
     s all("%Library.TMImage.cls")=""
     s all("%Library.TMImageList.cls")=""
     s all("%Library.TMLabel.cls")=""
     s all("%Library.TMLineSeries.cls")=""
     s all("%Library.TMListBox.cls")=""
     s all("%Library.TMListColumn.cls")=""
     s all("%Library.TMListColumns.cls")=""
     s all("%Library.TMListItem.cls")=""
     s all("%Library.TMListItems.cls")=""
     s all("%Library.TMListView.cls")=""
     s all("%Library.TMLocator.cls")=""
     s all("%Library.TMMainMenu.cls")=""
     s all("%Library.TMMemo.cls")=""
     s all("%Library.TMMenuItem.cls")=""
     s all("%Library.TMNotebook.cls")=""
     s all("%Library.TMNumberEdit.cls")=""
     s all("%Library.TMOleContainer.cls")=""
     s all("%Library.TMOleObject.cls")=""
     s all("%Library.TMOpenDialog.cls")=""
     s all("%Library.TMPage.cls")=""
     s all("%Library.TMPageControl.cls")=""
     s all("%Library.TMPaintBox.cls")=""
     s all("%Library.TMPanel.cls")=""
     s all("%Library.TMParaAttributes.cls")=""
     s all("%Library.TMPen.cls")=""
     s all("%Library.TMPersistent.cls")=""
     s all("%Library.TMPieOtherSlice.cls")=""
     s all("%Library.TMPieSeries.cls")=""
     s all("%Library.TMPointSeries.cls")=""
     s all("%Library.TMPopupMenu.cls")=""
     s all("%Library.TMPrintDialog.cls")=""
     s all("%Library.TMPrinter.cls")=""
     s all("%Library.TMPrinterSetupDialog.cls")=""
     s all("%Library.TMProgressBar.cls")=""
     s all("%Library.TMQuery.cls")=""
     s all("%Library.TMRadioButton.cls")=""
     s all("%Library.TMRadioGroup.cls")=""
     s all("%Library.TMRichEdit.cls")=""
     s all("%Library.TMRxDrawGrid.cls")=""
     s all("%Library.TMSaveDialog.cls")=""
     s all("%Library.TMScrollBar.cls")=""
     s all("%Library.TMScrollBox.cls")=""
     s all("%Library.TMSeriesMarks.cls")=""
     s all("%Library.TMSeriesPointer.cls")=""
     s all("%Library.TMShape.cls")=""
     s all("%Library.TMSizeConstraints.cls")=""
     s all("%Library.TMSpeedButton.cls")=""
     s all("%Library.TMSplitter.cls")=""
     s all("%Library.TMStatusBar.cls")=""
     s all("%Library.TMStatusPanel.cls")=""
     s all("%Library.TMStatusPanels.cls")=""
     s all("%Library.TMStringGrid.cls")=""
     s all("%Library.TMStringList.cls")=""
     s all("%Library.TMStrings.cls")=""
     s all("%Library.TMTabControl.cls")=""
     s all("%Library.TMTabSet.cls")=""
     s all("%Library.TMTabSheet.cls")=""
     s all("%Library.TMTextAttributes.cls")=""
     s all("%Library.TMTimer.cls")=""
     s all("%Library.TMToolbar.cls")=""
     s all("%Library.TMToolbarSep.cls")=""
     s all("%Library.TMTrackBar.cls")=""
     s all("%Library.TMTreeNode.cls")=""
     s all("%Library.TMTreeNodes.cls")=""
     s all("%Library.TMTreeView.cls")=""
     s all("%Library.TMView3DOptions.cls")=""
     s all("%Library.TMWinControl.cls")=""
     if $l(path)=0     d $system.OBJ.Export(.all,"C:\TEMP\SMWRap\PublicProjectSMWrap2017("_$REPLACE($zd(+$h,4),"/","-")_").xml")
     e  d $system.OBJ.Export(.all,path)
     k all
     q

]]></Routine>


<Routine name="ZMRDEF" type="INC"><![CDATA[
 ; ZMRPMD macro definitions
#define errNOJOB        "<NO JOB>"
#define errINVALTYPE    "<INVALID TYPE>"
#define errNOLIC        "<NO LICENSE>"
#define msgCONNECT      "<CONNECT>"
#define msgOK           "<OK>"
#define msgGOON         "<GO ON>"
#define errNOSESSION    "<NO SESSION>"
#define errBADCMD       "<BAD COMMAND>"
#define msgVALCONN      "<VALID CONNECTION>"
#define msgCALLBACK     "<CALLBACK>"
#define msgONMSGCBACK   "<ONMSGCALLBACK>"
 ;
#define APPTYPE         "MR"
#define APPTYPEOLD      1010
#define cmdCREATE       "cr"
#define cmdOPEN         "op"
#define cmdBRKFLW       "bfl"
 ;
#define cmdLOGON        "lg"
#define cmdQUIT         "qt"
#define cmdCODE         "c"
#define cmdDO           "d"
#define cmdEXEC         "x"
#define cmdRUN          "run"
#define cmdTERM         "t"
#define cmdFLOW         "fl"
#define cmdFUN          "f"
#define cmdKILL         "k"
#define cmdREAD         "r"
#define cmdSTORE        "st"
#define cmdVALCONN      "v"
#define cmdWRITE        "w"
#define cmdSETIP        "si"
 ;
#define LF              $C(10)
 ;
#define TRUE            0
#define FALSE           -1
 ;
#define Ini             ^%ZMRINI
 ; $$$Ini(1,*) - used by ZMRPMD
#define ieSrvPort       1,1
#define dfSrvPort       7200
 ; Default server port 
#define ieMaxAppPort    1,2
#define dfMaxAppPort    7399
 ; Max application port     
#define ieSrvOpenTO     1,3
#define dfSrvOpenTO     30
 ; SrvOpenTO in seconds
#define ieSrvReadTO     1,4
#define dfSrvReadTO     10
 ; SrvReadTO in seconds
#define ieSrvAuditTO    1,5
#define dfSrvAuditTO    1
 ; AuditTO in hours
#define ieSrvJobTO      1,6
#define dfSrvJobTO      10
 ; ieSrvJobTO in seconds
#define ieTCPWaitTO     1,7
#define dfTCPWaitTO     240
 ; tcp_close_wait_interval system parameter
 ; default value in Solaris - 240 sec, recommended - about 30 sec.
 ; see "man ndd" and RFC-1122
#define ieUseConcur     1,8
#define dfUseConcur     1
 ; Use or not concurrent server mode
 ;
 ; $$$Ini(2,*) - used by ZMRASD
#define ieAppSndBufSz   2,1
 // #define dfAppSndBufSz   4096
 // #define dfAppRcvBufSz   4096
#define dfAppSndBufSz   32768
#define dfAppRcvBufSz   32768

#define ieAppRcvBufSz   2,2
#define ieAppOpenTO     2,3
#define dfAppOpenTO     120
 ; ieAppOpenTO in seconds
#define ieAppLstTO      2,4
#define dfAppLstTO      120
 ; ieAppLstTO in seconds
#define ieAppReadTO     2,5
#define dfAppReadTO     2
 ; ieAppReadTO in seconds
#define ieAppIdleTO     2,6
#define dfAppIdleTO     120
 ; ieAppIdleTO in minutes
#define ieNativeAuth	2,7
#define	dfNativeAuth	0
 ; $$$Ini(3,*) - used by ZMRSMGR
#define ieSesAuditTO    3,1
#define dfSesAuditTO    1
 ; ieSesAuditTO in days
 ; $$$Ini(4,Product,*) - used for licensing
#define ieLicNode       4
#define ieLicCustomer   4,1
#define ieLicNumber     4,2
#define ieLicConnects   4,3
#define ieLicKey        4,4
 ;
#define AS              ^%ZMRAS
#define DBINF           ^%ZMRDbInf
#define PORTS           ^%ZMRPorts
#define MSGS            ^%ZMRMsgs
 ;
#define IsCache5        ($ZBITLEN($ZVERSION(0))>24)
 ; Packet delimiter
#define cTRM            $C(0)
#define aTRM            0
 ; Old command delimiters
#define cIDDLM          $C(1)
#define aIDDLM          1
#define cCMDDLM         $C(3)
#define aCMDDLM         3
#define cIVDLM          $C(15)
#define aIVDLM          15
 ;
#define TM              (($H-57343)*86400+$P($H,",",2))
 ;
#define INSCODE         "%ZMRINS"
#define PMD             %ZMRPMD
#define SMGR            %ZMRSMGR
#define ASD             %ZMRASD
#define EVENT           %ZMREVENT
#define OLDASD          %MRASD
 ;
#define SES     %ZoMRi(2140)
#define TIO     %ZoMRi(2141)
#define RTO     %ZoMRi(2142)
#define C       %ZoMRi(2143)
#define P       %ZoMRi(2144)
#define SW      "=$LG(%ZoMRi(2144),2)"
#define KEY     %ZoMRi(2145)
#define USERLN  %ZoMRi(2146)
#define ERR     %ZoMRi(2147)
#define RD      %ZoMRi(2148)
#define ITO     %ZoMRi(2149)
#define InsRut  %ZoMRi(2150)        
#define RES     %ZoMRi(2151)
#define SR      "%ZoMRi(2151)="
#define CRT     %ZoMRi(2152)
#define CBNOWAIT        %ZoMRi(2153)
#define ONMSGCODE       "%ZoMRi(2154)"
#define RL      %ZoMRi(2155)
#define RLP     %ZoMRi(2156)
#define SBS     %ZoMRi(2157)
#define RBS     %ZoMRi(2158)
 ; Used by CallBack^%ZMRASD
#define CBARGCOMMAND    ZMRpvtCBCommand
#define CBARGNOWAIT     ZMRpvtCBNoWait
#define CBST            ZMRpvtCBST
#define CBID    %ZoMRi(2159,$$$CBST)
#define CBNW    %ZoMRi(2159,$$$CBST,1)
#define CBRID   %ZoMRi(2159,$$$CBST,2)
#define CBOIO   %ZoMRi(2159,$$$CBST,3)
 ; Used in GetMsgs^%ZMRASD
#define MSGTYPE         ZMRpvtGetMsgType
#define MSGID           ZMRpvtGetMsgId
#define MSGPARAM        ZMRpvtGetMsgParam
#define MSGDIR          ZMRpvtGetMsgDir
#define MSGHANDLER      ZMRpvtGetMsgHandler
#define MSGOREF         ZMRpvtGetMsgOref
#define MSGPROC         ZMRpvtGetMsgProc
#define MSGNOEXEC       ZMRpvtGetMsgNoExec
 ; Used by old ASD
#define CD      %ZoMRi(2170)
#define FID     %ZoMRi(2171)
#define RV      %ZoMRi(2172)
#define RVSS    "%ZoMRi(2172,%ZoMRi(2172))="
#define P1      %ZoMRi(2173)
#define P2      %ZoMRi(2174)
#define SRS     "=%ZoMRi(2174)"
#define P3      %ZoMRi(2175)
#define BF      %ZoMRi(2176)
#define X       %ZoMRi(2177)
 ;
]]></Routine>
</Export>
